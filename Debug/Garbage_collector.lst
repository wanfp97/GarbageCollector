
Garbage_collector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006aec  08000000  0c000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         000001c0  1ffe8800  0c006aec  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000214  1ffe89c0  0c006cac  000109c0  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00001458  00000000  00000000  000109c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001c8f4  00000000  00000000  00011e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000407c  00000000  00000000  0002e70c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a114  00000000  00000000  00032788  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005624  00000000  00000000  0003c89c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000bc31  00000000  00000000  00041ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ad97  00000000  00000000  0004daf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011e0  00000000  00000000  00058888  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 0000099e  00000000  00000000  00059a68  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	f1 2b 00 08 99 02 00 08 00 00 00 00 31 2e 00 08     .+..........1...
 800003c:	a1 2e 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	7d 65 00 08 95 65 00 08 ad 65 00 08 99 02 00 08     }e...e...e......
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 c9 25 00 08     .............%..
 80001cc:	b9 25 00 08 99 02 00 08 99 02 00 08 99 02 00 08     .%..............
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c006aec 	.word	0x0c006aec
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	000001c0 	.word	0x000001c0
 8000254:	0c006aec 	.word	0x0c006aec
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe89c0 	.word	0x1ffe89c0
 8000264:	00000214 	.word	0x00000214
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800030d 	.word	0x0800030d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	0800663d 	.word	0x0800663d
    blx  r0
#endif

    ldr  r0, =main
 8000294:	080062e9 	.word	0x080062e9

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <TLE94112EL_SetHBRegdata>:
#include "base.h"

void TLE94112EL_SetHBRegdata(const TLE94112EL_t *const handler, uint8_t TLE94112EL_HB_ACT_X_CTRL, uint8_t regdata)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	460b      	mov	r3, r1
 80002a6:	70fb      	strb	r3, [r7, #3]
 80002a8:	4613      	mov	r3, r2
 80002aa:	70bb      	strb	r3, [r7, #2]
  uint8_t tx_data[2];
  uint8_t rx_data[2];
  uint8_t addr;

	switch(TLE94112EL_HB_ACT_X_CTRL){
 80002ac:	78fb      	ldrb	r3, [r7, #3]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d006      	beq.n	80002c0 <TLE94112EL_SetHBRegdata+0x24>
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d007      	beq.n	80002c6 <TLE94112EL_SetHBRegdata+0x2a>
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d108      	bne.n	80002cc <TLE94112EL_SetHBRegdata+0x30>

		case 1:
			addr = TLE94112EL_HB_ACT_1_CTRL;
 80002ba:	2303      	movs	r3, #3
 80002bc:	73fb      	strb	r3, [r7, #15]
			break;
 80002be:	e005      	b.n	80002cc <TLE94112EL_SetHBRegdata+0x30>

		case 2:
			addr = TLE94112EL_HB_ACT_2_CTRL;
 80002c0:	2343      	movs	r3, #67	; 0x43
 80002c2:	73fb      	strb	r3, [r7, #15]
			break;
 80002c4:	e002      	b.n	80002cc <TLE94112EL_SetHBRegdata+0x30>

		case 3:
			addr = TLE94112EL_HB_ACT_3_CTRL;
 80002c6:	2323      	movs	r3, #35	; 0x23
 80002c8:	73fb      	strb	r3, [r7, #15]
			break;
 80002ca:	bf00      	nop

	}

	  //write
	  tx_data[0] = addr | 0x80;
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	733b      	strb	r3, [r7, #12]
	  tx_data[1] = regdata;
 80002d6:	78bb      	ldrb	r3, [r7, #2]
 80002d8:	737b      	strb	r3, [r7, #13]
	  handler->spi_transfer(tx_data, rx_data);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	f107 010c 	add.w	r1, r7, #12
 80002e2:	f107 0208 	add.w	r2, r7, #8
 80002e6:	4608      	mov	r0, r1
 80002e8:	4611      	mov	r1, r2
 80002ea:	4798      	blx	r3
}
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop

080002f4 <TLE94112EL_Enable>:

  return rx_data[0];
}

int32_t TLE94112EL_Enable(const TLE94112EL_t *const handler)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  handler->enable();
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4798      	blx	r3
  return 0;
 8000302:	2300      	movs	r3, #0
}
 8000304:	4618      	mov	r0, r3
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800030c:	b598      	push	{r3, r4, r7, lr}
 800030e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000310:	4a05      	ldr	r2, [pc, #20]	; (8000328 <SystemInit+0x1c>)
 8000312:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000316:	4614      	mov	r4, r2
 8000318:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800031a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 800031e:	f005 f967 	bl	80055f0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8000322:	f005 f9cf 	bl	80056c4 <SystemCoreClockSetup>
}
 8000326:	bd98      	pop	{r3, r4, r7, pc}
 8000328:	2003ffc4 	.word	0x2003ffc4

0800032c <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000332:	4b2f      	ldr	r3, [pc, #188]	; (80003f0 <SystemCoreClockUpdate+0xc4>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800033a:	2b00      	cmp	r3, #0
 800033c:	d03e      	beq.n	80003bc <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800033e:	4b2d      	ldr	r3, [pc, #180]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d002      	beq.n	8000350 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800034a:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <SystemCoreClockUpdate+0xcc>)
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	e002      	b.n	8000356 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000350:	f005 f9ae 	bl	80056b0 <OSCHP_GetFrequency>
 8000354:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000356:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f003 0304 	and.w	r3, r3, #4
 800035e:	2b00      	cmp	r3, #0
 8000360:	d020      	beq.n	80003a4 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000362:	4b24      	ldr	r3, [pc, #144]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800036a:	0e1b      	lsrs	r3, r3, #24
 800036c:	3301      	adds	r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000370:	4b20      	ldr	r3, [pc, #128]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000378:	0a1b      	lsrs	r3, r3, #8
 800037a:	3301      	adds	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800037e:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000386:	0c1b      	lsrs	r3, r3, #16
 8000388:	3301      	adds	r3, #1
 800038a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	683a      	ldr	r2, [r7, #0]
 8000390:	fb02 f303 	mul.w	r3, r2, r3
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	fbb2 f3f3 	udiv	r3, r2, r3
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	fb02 f303 	mul.w	r3, r2, r3
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	e00d      	b.n	80003c0 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003ac:	3301      	adds	r3, #1
 80003ae:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 80003b0:	68fa      	ldr	r2, [r7, #12]
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	e001      	b.n	80003c0 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80003bc:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <SystemCoreClockUpdate+0xcc>)
 80003be:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <SystemCoreClockUpdate+0xc4>)
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	3301      	adds	r3, #1
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ce:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <SystemCoreClockUpdate+0xc4>)
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	3301      	adds	r3, #1
 80003da:	68fa      	ldr	r2, [r7, #12]
 80003dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e0:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80003e2:	4a06      	ldr	r2, [pc, #24]	; (80003fc <SystemCoreClockUpdate+0xd0>)
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	6013      	str	r3, [r2, #0]
}
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	50004600 	.word	0x50004600
 80003f4:	50004710 	.word	0x50004710
 80003f8:	016e3600 	.word	0x016e3600
 80003fc:	2003ffc0 	.word	0x2003ffc0

08000400 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a07      	ldr	r2, [pc, #28]	; (8000428 <XMC_ERU_Enable+0x28>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d107      	bne.n	8000420 <XMC_ERU_Enable+0x20>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
 8000410:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000414:	f000 fafe 	bl	8000a14 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 8000418:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800041c:	f000 f976 	bl	800070c <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40044000 	.word	0x40044000

0800042c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	460b      	mov	r3, r1
 8000436:	607a      	str	r2, [r7, #4]
 8000438:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800043a:	7afb      	ldrb	r3, [r7, #11]
 800043c:	089b      	lsrs	r3, r3, #2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	4618      	mov	r0, r3
 8000442:	7afb      	ldrb	r3, [r7, #11]
 8000444:	089b      	lsrs	r3, r3, #2
 8000446:	b2db      	uxtb	r3, r3
 8000448:	461a      	mov	r2, r3
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	3204      	adds	r2, #4
 800044e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000452:	7afb      	ldrb	r3, [r7, #11]
 8000454:	f003 0303 	and.w	r3, r3, #3
 8000458:	00db      	lsls	r3, r3, #3
 800045a:	4619      	mov	r1, r3
 800045c:	23f8      	movs	r3, #248	; 0xf8
 800045e:	408b      	lsls	r3, r1
 8000460:	43db      	mvns	r3, r3
 8000462:	ea02 0103 	and.w	r1, r2, r3
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	1d02      	adds	r2, r0, #4
 800046a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000472:	7afb      	ldrb	r3, [r7, #11]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	4619      	mov	r1, r3
 8000478:	2303      	movs	r3, #3
 800047a:	408b      	lsls	r3, r1
 800047c:	43db      	mvns	r3, r3
 800047e:	401a      	ands	r2, r3
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	4a3a      	ldr	r2, [pc, #232]	; (8000570 <XMC_GPIO_Init+0x144>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d003      	beq.n	8000494 <XMC_GPIO_Init+0x68>
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	4a39      	ldr	r2, [pc, #228]	; (8000574 <XMC_GPIO_Init+0x148>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d10a      	bne.n	80004aa <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000498:	7afb      	ldrb	r3, [r7, #11]
 800049a:	2101      	movs	r1, #1
 800049c:	fa01 f303 	lsl.w	r3, r1, r3
 80004a0:	43db      	mvns	r3, r3
 80004a2:	401a      	ands	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	661a      	str	r2, [r3, #96]	; 0x60
 80004a8:	e042      	b.n	8000530 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	b25b      	sxtb	r3, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	da3c      	bge.n	8000530 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	685a      	ldr	r2, [r3, #4]
 80004ba:	7afb      	ldrb	r3, [r7, #11]
 80004bc:	409a      	lsls	r2, r3
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80004c2:	7afb      	ldrb	r3, [r7, #11]
 80004c4:	08db      	lsrs	r3, r3, #3
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	4618      	mov	r0, r3
 80004ca:	7afb      	ldrb	r3, [r7, #11]
 80004cc:	08db      	lsrs	r3, r3, #3
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	461a      	mov	r2, r3
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3210      	adds	r2, #16
 80004d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004da:	7afb      	ldrb	r3, [r7, #11]
 80004dc:	f003 0307 	and.w	r3, r3, #7
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	4619      	mov	r1, r3
 80004e4:	2307      	movs	r3, #7
 80004e6:	408b      	lsls	r3, r1
 80004e8:	43db      	mvns	r3, r3
 80004ea:	ea02 0103 	and.w	r1, r2, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	f100 0210 	add.w	r2, r0, #16
 80004f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80004f8:	7afb      	ldrb	r3, [r7, #11]
 80004fa:	08db      	lsrs	r3, r3, #3
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	4618      	mov	r0, r3
 8000500:	7afb      	ldrb	r3, [r7, #11]
 8000502:	08db      	lsrs	r3, r3, #3
 8000504:	b2db      	uxtb	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	3210      	adds	r2, #16
 800050c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	7a1b      	ldrb	r3, [r3, #8]
 8000514:	4619      	mov	r1, r3
 8000516:	7afb      	ldrb	r3, [r7, #11]
 8000518:	f003 0307 	and.w	r3, r3, #7
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	fa01 f303 	lsl.w	r3, r1, r3
 8000522:	ea42 0103 	orr.w	r1, r2, r3
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	f100 0210 	add.w	r2, r0, #16
 800052c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000530:	7afb      	ldrb	r3, [r7, #11]
 8000532:	089b      	lsrs	r3, r3, #2
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	7afb      	ldrb	r3, [r7, #11]
 800053a:	089b      	lsrs	r3, r3, #2
 800053c:	b2db      	uxtb	r3, r3
 800053e:	461a      	mov	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3204      	adds	r2, #4
 8000544:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	7afb      	ldrb	r3, [r7, #11]
 8000550:	f003 0303 	and.w	r3, r3, #3
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	fa01 f303 	lsl.w	r3, r1, r3
 800055a:	ea42 0103 	orr.w	r1, r2, r3
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	1d02      	adds	r2, r0, #4
 8000562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	48028e00 	.word	0x48028e00
 8000574:	48028f00 	.word	0x48028f00

08000578 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 800057e:	681b      	ldr	r3, [r3, #0]
}
 8000580:	4618      	mov	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	2003ffc0 	.word	0x2003ffc0

08000590 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <XMC_SCU_GetMirrorStatus+0x14>)
 8000596:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800059a:	4618      	mov	r0, r3
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	50004000 	.word	0x50004000

080005a8 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80005b0:	f7ff febc 	bl	800032c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <XMC_SCU_lDelay+0x3c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <XMC_SCU_lDelay+0x40>)
 80005ba:	fba2 2303 	umull	r2, r3, r2, r3
 80005be:	0c9a      	lsrs	r2, r3, #18
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	fb02 f303 	mul.w	r3, r2, r3
 80005c6:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e003      	b.n	80005d6 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80005ce:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3301      	adds	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d3f7      	bcc.n	80005ce <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2003ffc0 	.word	0x2003ffc0
 80005e8:	431bde83 	.word	0x431bde83

080005ec <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 80005f2:	685b      	ldr	r3, [r3, #4]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	50004074 	.word	0x50004074

08000604 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	60d3      	str	r3, [r2, #12]
}
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	50004074 	.word	0x50004074

08000620 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af02      	add	r7, sp, #8
 8000626:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000628:	2000      	movs	r0, #0
 800062a:	f000 f8bf 	bl	80007ac <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800062e:	f000 fa91 	bl	8000b54 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	79db      	ldrb	r3, [r3, #7]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d00a      	beq.n	8000650 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800063a:	f000 fac9 	bl	8000bd0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800063e:	bf00      	nop
 8000640:	f000 fab4 	bl	8000bac <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000644:	4603      	mov	r3, r0
 8000646:	f083 0301 	eor.w	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1f7      	bne.n	8000640 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	7a5b      	ldrb	r3, [r3, #9]
 8000654:	4618      	mov	r0, r3
 8000656:	f000 f923 	bl	80008a0 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 800065a:	bf00      	nop
 800065c:	f7ff ff98 	bl	8000590 <XMC_SCU_GetMirrorStatus>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1fa      	bne.n	800065c <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7a1b      	ldrb	r3, [r3, #8]
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fa4c 	bl	8000b08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	7c1b      	ldrb	r3, [r3, #16]
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f931 	bl	80008dc <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7c5b      	ldrb	r3, [r3, #17]
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f954 	bl	800092c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7c9b      	ldrb	r3, [r3, #18]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f93b 	bl	8000904 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	7cdb      	ldrb	r3, [r3, #19]
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f95e 	bl	8000954 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	799b      	ldrb	r3, [r3, #6]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00a      	beq.n	80006b6 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80006a0:	f000 face 	bl	8000c40 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80006a4:	bf00      	nop
 80006a6:	f000 faf3 	bl	8000c90 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80006aa:	4603      	mov	r3, r0
 80006ac:	f083 0301 	eor.w	r3, r3, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1f7      	bne.n	80006a6 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	78db      	ldrb	r3, [r3, #3]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d102      	bne.n	80006c4 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80006be:	f000 fb0b 	bl	8000cd8 <XMC_SCU_CLOCK_DisableSystemPll>
 80006c2:	e014      	b.n	80006ee <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80006c4:	f000 faf8 	bl	8000cb8 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	8899      	ldrh	r1, [r3, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006d4:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006da:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4608      	mov	r0, r1
 80006e4:	4611      	mov	r1, r2
 80006e6:	462a      	mov	r2, r5
 80006e8:	4623      	mov	r3, r4
 80006ea:	f000 fb05 	bl	8000cf8 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006f6:	d103      	bne.n	8000700 <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 80006f8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80006fc:	f000 f856 	bl	80007ac <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000700:	f7ff fe14 	bl	800032c <SystemCoreClockUpdate>
}
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bdb0      	pop	{r4, r5, r7, pc}
 800070a:	bf00      	nop

0800070c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	0f1b      	lsrs	r3, r3, #28
 8000718:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000720:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	4613      	mov	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4413      	add	r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	461a      	mov	r2, r3
 800072e:	4b04      	ldr	r3, [pc, #16]	; (8000740 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000730:	4413      	add	r3, r2
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	601a      	str	r2, [r3, #0]
}
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	50004414 	.word	0x50004414

08000744 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	0f1b      	lsrs	r3, r3, #28
 8000750:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000758:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	4613      	mov	r3, r2
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	4413      	add	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	461a      	mov	r2, r3
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8000768:	4413      	add	r3, r2
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4013      	ands	r3, r2
 8000770:	2b00      	cmp	r3, #0
 8000772:	bf14      	ite	ne
 8000774:	2301      	movne	r3, #1
 8000776:	2300      	moveq	r3, #0
 8000778:	b2db      	uxtb	r3, r3
}
 800077a:	4618      	mov	r0, r3
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	5000440c 	.word	0x5000440c

0800078c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000790:	f7ff fef2 	bl	8000578 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000794:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000798:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	50004600 	.word	0x50004600

080007ac <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80007b4:	4906      	ldr	r1, [pc, #24]	; (80007d0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	50004600 	.word	0x50004600

080007d4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80007dc:	4906      	ldr	r1, [pc, #24]	; (80007f8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	50004600 	.word	0x50004600

080007fc <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000804:	4906      	ldr	r1, [pc, #24]	; (8000820 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4313      	orrs	r3, r2
 8000812:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	50004600 	.word	0x50004600

08000824 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d108      	bne.n	8000846 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000834:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800083e:	f023 0301 	bic.w	r3, r3, #1
 8000842:	60d3      	str	r3, [r2, #12]
 8000844:	e007      	b.n	8000856 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000846:	4a06      	ldr	r2, [pc, #24]	; (8000860 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	60d3      	str	r3, [r2, #12]
  }
}
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	50004710 	.word	0x50004710

08000864 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800086e:	bf00      	nop
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000872:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1f8      	bne.n	8000870 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800087e:	4907      	ldr	r1, [pc, #28]	; (800089c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000888:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800088a:	4313      	orrs	r3, r2
 800088c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	50004000 	.word	0x50004000
 800089c:	50004300 	.word	0x50004300

080008a0 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80008aa:	bf00      	nop
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80008ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f8      	bne.n	80008ac <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80008ba:	4907      	ldr	r1, [pc, #28]	; (80008d8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80008c6:	4313      	orrs	r3, r2
 80008c8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	50004000 	.word	0x50004000
 80008d8:	50004300 	.word	0x50004300

080008dc <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80008e4:	4906      	ldr	r1, [pc, #24]	; (8000900 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80008f2:	4313      	orrs	r3, r2
 80008f4:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	50004600 	.word	0x50004600

08000904 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800090c:	4906      	ldr	r1, [pc, #24]	; (8000928 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000910:	6a1b      	ldr	r3, [r3, #32]
 8000912:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800091a:	4313      	orrs	r3, r2
 800091c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	50004600 	.word	0x50004600

0800092c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000934:	4906      	ldr	r1, [pc, #24]	; (8000950 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000938:	691b      	ldr	r3, [r3, #16]
 800093a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000942:	4313      	orrs	r3, r2
 8000944:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	50004600 	.word	0x50004600

08000954 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800095c:	4906      	ldr	r1, [pc, #24]	; (8000978 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800096a:	4313      	orrs	r3, r2
 800096c:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	50004600 	.word	0x50004600

0800097c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000984:	4906      	ldr	r1, [pc, #24]	; (80009a0 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000992:	4313      	orrs	r3, r2
 8000994:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	50004600 	.word	0x50004600

080009a4 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80009ac:	4906      	ldr	r1, [pc, #24]	; (80009c8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80009ba:	4313      	orrs	r3, r2
 80009bc:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	50004600 	.word	0x50004600

080009cc <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80009d4:	4906      	ldr	r1, [pc, #24]	; (80009f0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80009d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80009e2:	4313      	orrs	r3, r2
 80009e4:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	50004600 	.word	0x50004600

080009f4 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	6053      	str	r3, [r2, #4]
}
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	50004600 	.word	0x50004600

08000a14 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	0f1b      	lsrs	r3, r3, #28
 8000a20:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000a28:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000a38:	4413      	add	r3, r2
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	601a      	str	r2, [r3, #0]
}
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	50004648 	.word	0x50004648

08000a4c <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	0f1b      	lsrs	r3, r3, #28
 8000a58:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000a60:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 8000a70:	4413      	add	r3, r2
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4013      	ands	r3, r2
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	bf14      	ite	ne
 8000a7c:	2301      	movne	r3, #1
 8000a7e:	2300      	moveq	r3, #0
 8000a80:	b2db      	uxtb	r3, r3
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	50004640 	.word	0x50004640

08000a94 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a9e:	4a19      	ldr	r2, [pc, #100]	; (8000b04 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000aaa:	4a16      	ldr	r2, [pc, #88]	; (8000b04 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	f043 0310 	orr.w	r3, r3, #16
 8000ab4:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000ab6:	4913      	ldr	r1, [pc, #76]	; (8000b04 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad2:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	f023 0310 	bic.w	r3, r3, #16
 8000ade:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000ae0:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aea:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000aec:	bf00      	nop
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0f9      	beq.n	8000aee <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	50004710 	.word	0x50004710

08000b08 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b1c:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d10e      	bne.n	8000b42 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b2e:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000b30:	2064      	movs	r0, #100	; 0x64
 8000b32:	f7ff fd39 	bl	80005a8 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000b36:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b40:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000b42:	2064      	movs	r0, #100	; 0x64
 8000b44:	f7ff fd30 	bl	80005a8 <XMC_SCU_lDelay>
}
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	50004710 	.word	0x50004710

08000b54 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d109      	bne.n	8000b78 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b6a:	bf00      	nop
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0f9      	beq.n	8000b6c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d00a      	beq.n	8000b9a <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8a:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000b8c:	bf00      	nop
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1f9      	bne.n	8000b8e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	50004200 	.word	0x50004200
 8000ba8:	50004400 	.word	0x50004400

08000bac <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	bf0c      	ite	eq
 8000bbc:	2301      	moveq	r3, #1
 8000bbe:	2300      	movne	r3, #0
 8000bc0:	b2db      	uxtb	r3, r3
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	50004300 	.word	0x50004300

08000bd0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000bd4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000bd8:	f7ff fd14 	bl	8000604 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000bdc:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000be6:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000be8:	bf00      	nop
 8000bea:	f7ff fcff 	bl	80005ec <XMC_SCU_INTERUPT_GetEventStatus>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0f8      	beq.n	8000bea <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000bf8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bfc:	f7ff fd02 	bl	8000604 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c02:	2208      	movs	r2, #8
 8000c04:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000c06:	bf00      	nop
 8000c08:	f7ff fcf0 	bl	80005ec <XMC_SCU_INTERUPT_GetEventStatus>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0f8      	beq.n	8000c08 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000c16:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c1a:	f7ff fcf3 	bl	8000604 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000c1e:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000c2a:	bf00      	nop
 8000c2c:	f7ff fcde 	bl	80005ec <XMC_SCU_INTERUPT_GetEventStatus>
 8000c30:	4603      	mov	r3, r0
 8000c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0f8      	beq.n	8000c2c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	50004300 	.word	0x50004300

08000c40 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000c44:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c4e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c50:	4d0d      	ldr	r5, [pc, #52]	; (8000c88 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000c5a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000c5e:	f004 fd27 	bl	80056b0 <OSCHP_GetFrequency>
 8000c62:	4602      	mov	r2, r0
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000c66:	fba3 2302 	umull	r2, r3, r3, r2
 8000c6a:	0d1b      	lsrs	r3, r3, #20
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c70:	4323      	orrs	r3, r4
 8000c72:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000c74:	4a03      	ldr	r2, [pc, #12]	; (8000c84 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c76:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c7e:	6053      	str	r3, [r2, #4]
}
 8000c80:	bdb0      	pop	{r4, r5, r7, pc}
 8000c82:	bf00      	nop
 8000c84:	50004710 	.word	0x50004710
 8000c88:	50004700 	.word	0x50004700
 8000c8c:	6b5fca6b 	.word	0x6b5fca6b

08000c90 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c9c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000ca0:	bf0c      	ite	eq
 8000ca2:	2301      	moveq	r3, #1
 8000ca4:	2300      	movne	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	50004710 	.word	0x50004710

08000cb8 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000cbc:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc6:	f023 0302 	bic.w	r3, r3, #2
 8000cca:	6053      	str	r3, [r2, #4]
}
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	50004710 	.word	0x50004710

08000cd8 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000cdc:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	6053      	str	r3, [r2, #4]
}
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	50004710 	.word	0x50004710

08000cf8 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60ba      	str	r2, [r7, #8]
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4603      	mov	r3, r0
 8000d04:	81fb      	strh	r3, [r7, #14]
 8000d06:	460b      	mov	r3, r1
 8000d08:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000d0a:	89fb      	ldrh	r3, [r7, #14]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fd89 	bl	8000824 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000d12:	7b7b      	ldrb	r3, [r7, #13]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	f040 8084 	bne.w	8000e22 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d109      	bne.n	8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000d20:	f004 fcc6 	bl	80056b0 <OSCHP_GetFrequency>
 8000d24:	4602      	mov	r2, r0
 8000d26:	4b4b      	ldr	r3, [pc, #300]	; (8000e54 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000d28:	fba3 2302 	umull	r2, r3, r3, r2
 8000d2c:	0c9b      	lsrs	r3, r3, #18
 8000d2e:	059b      	lsls	r3, r3, #22
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e002      	b.n	8000d3a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000d34:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d38:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	fb02 f203 	mul.w	r2, r2, r3
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d48:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	4a42      	ldr	r2, [pc, #264]	; (8000e58 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d52:	091b      	lsrs	r3, r3, #4
 8000d54:	0d9b      	lsrs	r3, r3, #22
 8000d56:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d58:	4a40      	ldr	r2, [pc, #256]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d5a:	4b40      	ldr	r3, [pc, #256]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d64:	4a3d      	ldr	r2, [pc, #244]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d66:	4b3d      	ldr	r3, [pc, #244]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f043 0310 	orr.w	r3, r3, #16
 8000d6e:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d70:	493a      	ldr	r1, [pc, #232]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d72:	4b3a      	ldr	r3, [pc, #232]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	4b3a      	ldr	r3, [pc, #232]	; (8000e60 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000d78:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	3a01      	subs	r2, #1
 8000d7e:	0212      	lsls	r2, r2, #8
 8000d80:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d88:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d90:	4313      	orrs	r3, r2
 8000d92:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d94:	4a31      	ldr	r2, [pc, #196]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d96:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d9e:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000da0:	4a2e      	ldr	r2, [pc, #184]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000da2:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f023 0310 	bic.w	r3, r3, #16
 8000daa:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000dac:	4a2b      	ldr	r2, [pc, #172]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000dae:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000db8:	bf00      	nop
 8000dba:	4b28      	ldr	r3, [pc, #160]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f9      	beq.n	8000dba <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000dc6:	4a25      	ldr	r2, [pc, #148]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000dc8:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f023 0301 	bic.w	r3, r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000dd2:	bf00      	nop
 8000dd4:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1f9      	bne.n	8000dd4 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000de4:	fba2 2303 	umull	r2, r3, r2, r3
 8000de8:	095b      	lsrs	r3, r3, #5
 8000dea:	0d9b      	lsrs	r3, r3, #22
 8000dec:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dee:	6a3a      	ldr	r2, [r7, #32]
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d202      	bcs.n	8000dfc <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000df6:	6938      	ldr	r0, [r7, #16]
 8000df8:	f000 f838 	bl	8000e6c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	085b      	lsrs	r3, r3, #1
 8000e00:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000e02:	fba2 2303 	umull	r2, r3, r2, r3
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	0d9b      	lsrs	r3, r3, #22
 8000e0a:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000e0c:	6a3a      	ldr	r2, [r7, #32]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d202      	bcs.n	8000e1a <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000e14:	6938      	ldr	r0, [r7, #16]
 8000e16:	f000 f829 	bl	8000e6c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000e1a:	6a38      	ldr	r0, [r7, #32]
 8000e1c:	f000 f826 	bl	8000e6c <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000e20:	e015      	b.n	8000e4e <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e22:	490e      	ldr	r1, [pc, #56]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
 8000e2e:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e30:	4313      	orrs	r3, r2
 8000e32:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e34:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000e40:	bf00      	nop
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0f9      	beq.n	8000e42 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	431bde83 	.word	0x431bde83
 8000e58:	aaaaaaab 	.word	0xaaaaaaab
 8000e5c:	50004710 	.word	0x50004710
 8000e60:	f08080ff 	.word	0xf08080ff
 8000e64:	88888889 	.word	0x88888889
 8000e68:	b60b60b7 	.word	0xb60b60b7

08000e6c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e84:	4313      	orrs	r3, r2
 8000e86:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000e88:	2032      	movs	r0, #50	; 0x32
 8000e8a:	f7ff fb8d 	bl	80005a8 <XMC_SCU_lDelay>
}
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	50004710 	.word	0x50004710

08000e98 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea6:	60da      	str	r2, [r3, #12]
}
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a10      	ldr	r2, [pc, #64]	; (8000f00 <XMC_CCU4_lDeassertReset+0x4c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d103      	bne.n	8000ecc <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000ec4:	2004      	movs	r0, #4
 8000ec6:	f7ff fc21 	bl	800070c <XMC_SCU_RESET_DeassertPeripheralReset>
 8000eca:	e016      	b.n	8000efa <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <XMC_CCU4_lDeassertReset+0x50>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d103      	bne.n	8000edc <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000ed4:	2008      	movs	r0, #8
 8000ed6:	f7ff fc19 	bl	800070c <XMC_SCU_RESET_DeassertPeripheralReset>
 8000eda:	e00e      	b.n	8000efa <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <XMC_CCU4_lDeassertReset+0x54>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d103      	bne.n	8000eec <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000ee4:	2010      	movs	r0, #16
 8000ee6:	f7ff fc11 	bl	800070c <XMC_SCU_RESET_DeassertPeripheralReset>
 8000eea:	e006      	b.n	8000efa <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <XMC_CCU4_lDeassertReset+0x58>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d102      	bne.n	8000efa <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000ef4:	4806      	ldr	r0, [pc, #24]	; (8000f10 <XMC_CCU4_lDeassertReset+0x5c>)
 8000ef6:	f7ff fc09 	bl	800070c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	4000c000 	.word	0x4000c000
 8000f04:	40010000 	.word	0x40010000
 8000f08:	40014000 	.word	0x40014000
 8000f0c:	48004000 	.word	0x48004000
 8000f10:	10000001 	.word	0x10000001

08000f14 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <XMC_CCU4_lUngateClock+0x4c>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d103      	bne.n	8000f2c <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000f24:	2004      	movs	r0, #4
 8000f26:	f7ff fd75 	bl	8000a14 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000f2a:	e016      	b.n	8000f5a <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <XMC_CCU4_lUngateClock+0x50>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d103      	bne.n	8000f3c <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000f34:	2008      	movs	r0, #8
 8000f36:	f7ff fd6d 	bl	8000a14 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000f3a:	e00e      	b.n	8000f5a <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <XMC_CCU4_lUngateClock+0x54>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d103      	bne.n	8000f4c <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8000f44:	2010      	movs	r0, #16
 8000f46:	f7ff fd65 	bl	8000a14 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000f4a:	e006      	b.n	8000f5a <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <XMC_CCU4_lUngateClock+0x58>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d102      	bne.n	8000f5a <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8000f54:	4806      	ldr	r0, [pc, #24]	; (8000f70 <XMC_CCU4_lUngateClock+0x5c>)
 8000f56:	f7ff fd5d 	bl	8000a14 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	4000c000 	.word	0x4000c000
 8000f64:	40010000 	.word	0x40010000
 8000f68:	40014000 	.word	0x40014000
 8000f6c:	48004000 	.word	0x48004000
 8000f70:	10000001 	.word	0x10000001

08000f74 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000f7c:	2010      	movs	r0, #16
 8000f7e:	f7ff fd39 	bl	80009f4 <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffc6 	bl	8000f14 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff93 	bl	8000eb4 <XMC_CCU4_lDeassertReset>
#endif
}
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ffe7 	bl	8000f74 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff76 	bl	8000e98 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fb8:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	039b      	lsls	r3, r3, #14
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	601a      	str	r2, [r3, #0]
}
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	795b      	ldrb	r3, [r3, #5]
 8000fe6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	051a      	lsls	r2, r3, #20
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	791b      	ldrb	r3, [r3, #4]
 8000ff6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	795b      	ldrb	r3, [r3, #5]
 8001006:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800100a:	b2db      	uxtb	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	795b      	ldrb	r3, [r3, #5]
 8001016:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	791b      	ldrb	r3, [r3, #4]
 8001026:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800102a:	b2db      	uxtb	r3, r3
 800102c:	461a      	mov	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
 8001048:	4613      	mov	r3, r2
 800104a:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001052:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	2b09      	cmp	r3, #9
 8001058:	d82c      	bhi.n	80010b4 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 800105a:	a201      	add	r2, pc, #4	; (adr r2, 8001060 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	08001089 	.word	0x08001089
 8001064:	08001089 	.word	0x08001089
 8001068:	08001093 	.word	0x08001093
 800106c:	08001093 	.word	0x08001093
 8001070:	080010b5 	.word	0x080010b5
 8001074:	080010b5 	.word	0x080010b5
 8001078:	080010b5 	.word	0x080010b5
 800107c:	080010b5 	.word	0x080010b5
 8001080:	0800109d 	.word	0x0800109d
 8001084:	080010a9 	.word	0x080010a9
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8001088:	2303      	movs	r3, #3
 800108a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
      break;
 8001090:	e016      	b.n	80010c0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8001092:	230c      	movs	r3, #12
 8001094:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8001096:	2302      	movs	r3, #2
 8001098:	617b      	str	r3, [r7, #20]
      break;
 800109a:	e011      	b.n	80010c0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 800109c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 80010a2:	2308      	movs	r3, #8
 80010a4:	617b      	str	r3, [r7, #20]
      break;
 80010a6:	e00b      	b.n	80010c0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 80010a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010ac:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 80010ae:	230a      	movs	r3, #10
 80010b0:	617b      	str	r3, [r7, #20]
      break;
 80010b2:	e005      	b.n	80010c0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 80010b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010b8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 80010ba:	230c      	movs	r3, #12
 80010bc:	617b      	str	r3, [r7, #20]
      break;
 80010be:	bf00      	nop
  }
  
  srs &= ~mask; 
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	4013      	ands	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 80010ca:	78ba      	ldrb	r2, [r7, #2]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80010e0:	371c      	adds	r7, #28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	460b      	mov	r3, r1
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f7ff f980 	bl	8000400 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4619      	mov	r1, r3
 800110a:	230f      	movs	r3, #15
 800110c:	408b      	lsls	r3, r1
 800110e:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8001110:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	7af9      	ldrb	r1, [r7, #11]
 8001118:	0089      	lsls	r1, r1, #2
 800111a:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 800111c:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 8001122:	7afa      	ldrb	r2, [r7, #11]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6859      	ldr	r1, [r3, #4]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3204      	adds	r2, #4
 800112c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop

08001138 <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	70fb      	strb	r3, [r7, #3]
 8001144:	4613      	mov	r3, r2
 8001146:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
 8001148:	78fa      	ldrb	r2, [r7, #3]
 800114a:	78bb      	ldrb	r3, [r7, #2]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	b2d9      	uxtb	r1, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3208      	adds	r2, #8
 8001156:	f001 0103 	and.w	r1, r1, #3
 800115a:	0109      	lsls	r1, r1, #4
 800115c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001160:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8001164:	4301      	orrs	r1, r0
 8001166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
 8001180:	4613      	mov	r3, r2
 8001182:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4619      	mov	r1, r3
 800118e:	2303      	movs	r3, #3
 8001190:	408b      	lsls	r3, r1
 8001192:	43db      	mvns	r3, r3
 8001194:	401a      	ands	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800119e:	78bb      	ldrb	r3, [r7, #2]
 80011a0:	78f9      	ldrb	r1, [r7, #3]
 80011a2:	0049      	lsls	r1, r1, #1
 80011a4:	408b      	lsls	r3, r1
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	675a      	str	r2, [r3, #116]	; 0x74
}
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f884 	bl	80012d0 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	795b      	ldrb	r3, [r3, #5]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d112      	bne.n	80011f6 <XMC_SPI_CH_Init+0x3e>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	791b      	ldrb	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d007      	beq.n	80011e8 <XMC_SPI_CH_Init+0x30>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	4619      	mov	r1, r3
 80011e0:	2202      	movs	r2, #2
 80011e2:	f000 f931 	bl	8001448 <XMC_USIC_CH_SetBaudrateEx>
 80011e6:	e006      	b.n	80011f6 <XMC_SPI_CH_Init+0x3e>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	4619      	mov	r1, r3
 80011f0:	2202      	movs	r2, #2
 80011f2:	f000 f8b9 	bl	8001368 <XMC_USIC_CH_SetBaudrate>
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <XMC_SPI_CH_Init+0x7c>)
 80011fa:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	795b      	ldrb	r3, [r3, #5]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d107      	bne.n	800121c <XMC_SPI_CH_Init+0x64>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	799b      	ldrb	r3, [r3, #6]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8001210:	f043 030b 	orr.w	r3, r3, #11
 8001214:	b2db      	uxtb	r3, r3
 8001216:	461a      	mov	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f04f 32ff 	mov.w	r2, #4294967295
 8001222:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	891b      	ldrh	r3, [r3, #8]
 8001228:	461a      	mov	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	073f0102 	.word	0x073f0102

08001238 <XMC_SPI_CH_EnableSlaveSelect>:
  return (XMC_SPI_CH_STATUS_t)status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001246:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001272:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d103      	bne.n	8001282 <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800127e:	81fb      	strh	r3, [r7, #14]
 8001280:	e003      	b.n	800128a <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001288:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800128a:	89fb      	ldrh	r3, [r7, #14]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <XMC_SPI_CH_DisableEvent>:
  channel->CCR |= (event&0x1fc00U);
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
}

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 80012ac:	43db      	mvns	r3, r3
 80012ae:	401a      	ands	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	035b      	lsls	r3, r3, #13
 80012bc:	b29b      	uxth	r3, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	401a      	ands	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a1a      	ldr	r2, [pc, #104]	; (8001344 <XMC_USIC_CH_Enable+0x74>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d003      	beq.n	80012e8 <XMC_USIC_CH_Enable+0x18>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a19      	ldr	r2, [pc, #100]	; (8001348 <XMC_USIC_CH_Enable+0x78>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d103      	bne.n	80012f0 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 80012e8:	4818      	ldr	r0, [pc, #96]	; (800134c <XMC_USIC_CH_Enable+0x7c>)
 80012ea:	f000 f9f9 	bl	80016e0 <XMC_USIC_Enable>
 80012ee:	e016      	b.n	800131e <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <XMC_USIC_CH_Enable+0x80>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d003      	beq.n	8001300 <XMC_USIC_CH_Enable+0x30>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a16      	ldr	r2, [pc, #88]	; (8001354 <XMC_USIC_CH_Enable+0x84>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d103      	bne.n	8001308 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001300:	4815      	ldr	r0, [pc, #84]	; (8001358 <XMC_USIC_CH_Enable+0x88>)
 8001302:	f000 f9ed 	bl	80016e0 <XMC_USIC_Enable>
 8001306:	e00a      	b.n	800131e <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <XMC_USIC_CH_Enable+0x8c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d003      	beq.n	8001318 <XMC_USIC_CH_Enable+0x48>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a13      	ldr	r2, [pc, #76]	; (8001360 <XMC_USIC_CH_Enable+0x90>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d102      	bne.n	800131e <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001318:	4812      	ldr	r0, [pc, #72]	; (8001364 <XMC_USIC_CH_Enable+0x94>)
 800131a:	f000 f9e1 	bl	80016e0 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2203      	movs	r2, #3
 8001322:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001324:	bf00      	nop
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f9      	beq.n	8001326 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f023 020f 	bic.w	r2, r3, #15
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40030000 	.word	0x40030000
 8001348:	40030200 	.word	0x40030200
 800134c:	40030008 	.word	0x40030008
 8001350:	48020000 	.word	0x48020000
 8001354:	48020200 	.word	0x48020200
 8001358:	48020008 	.word	0x48020008
 800135c:	48024000 	.word	0x48024000
 8001360:	48024200 	.word	0x48024200
 8001364:	48024008 	.word	0x48024008

08001368 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08e      	sub	sp, #56	; 0x38
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b63      	cmp	r3, #99	; 0x63
 8001378:	d958      	bls.n	800142c <XMC_USIC_CH_SetBaudrate+0xc4>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d055      	beq.n	800142c <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001380:	f7ff fa04 	bl	800078c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001384:	4602      	mov	r2, r0
 8001386:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001388:	fba3 2302 	umull	r2, r3, r3, r2
 800138c:	095b      	lsrs	r3, r3, #5
 800138e:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4a2b      	ldr	r2, [pc, #172]	; (8001440 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	095b      	lsrs	r3, r3, #5
 800139a:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 800139c:	2301      	movs	r3, #1
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80013a0:	2301      	movs	r3, #1
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80013a4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80013aa:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
 80013b0:	e022      	b.n	80013f8 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013b6:	fb02 f203 	mul.w	r2, r2, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	fb01 f303 	mul.w	r3, r1, r3
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	0a9b      	lsrs	r3, r3, #10
 80013cc:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013d4:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013dc:	d209      	bcs.n	80013f2 <XMC_USIC_CH_SetBaudrate+0x8a>
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d205      	bcs.n	80013f2 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 80013ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80013f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f4:	3b01      	subs	r3, #1
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
 80013f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1d9      	bne.n	80013b2 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 80013fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001400:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	695a      	ldr	r2, [r3, #20]
 800140c:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <XMC_USIC_CH_SetBaudrate+0xdc>)
 800140e:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	3a01      	subs	r2, #1
 8001414:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001416:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141a:	3b01      	subs	r3, #1
 800141c:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800141e:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800142a:	e002      	b.n	8001432 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8001432:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001436:	4618      	mov	r0, r3
 8001438:	3738      	adds	r7, #56	; 0x38
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	51eb851f 	.word	0x51eb851f
 8001444:	fc0080ef 	.word	0xfc0080ef

08001448 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001454:	f7ff f99a 	bl	800078c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001458:	4603      	mov	r3, r0
 800145a:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 8001466:	2301      	movs	r3, #1
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 800146a:	6a3a      	ldr	r2, [r7, #32]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	429a      	cmp	r2, r3
 8001470:	dd5f      	ble.n	8001532 <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001472:	6a3a      	ldr	r2, [r7, #32]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	fb92 f3f3 	sdiv	r3, r2, r3
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 800147c:	e010      	b.n	80014a0 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 800147e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001480:	3301      	adds	r3, #1
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	fb02 f303 	mul.w	r3, r2, r3
 800148c:	461a      	mov	r2, r3
 800148e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001490:	fb03 f302 	mul.w	r3, r3, r2
 8001494:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001496:	6a3a      	ldr	r2, [r7, #32]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	fb92 f3f3 	sdiv	r3, r2, r3
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 80014a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a2:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d8e9      	bhi.n	800147e <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 80014aa:	6a3a      	ldr	r2, [r7, #32]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014b0:	fb01 f303 	mul.w	r3, r1, r3
 80014b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014b6:	fb01 f303 	mul.w	r3, r1, r3
 80014ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80014be:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 80014c0:	6a3a      	ldr	r2, [r7, #32]
 80014c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c4:	3301      	adds	r3, #1
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	fb01 f303 	mul.w	r3, r1, r3
 80014cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014ce:	fb01 f303 	mul.w	r3, r1, r3
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80014e2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80014e6:	68b9      	ldr	r1, [r7, #8]
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	1acb      	subs	r3, r1, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bfb8      	it	lt
 80014f0:	425b      	neglt	r3, r3
 80014f2:	429a      	cmp	r2, r3
 80014f4:	da02      	bge.n	80014fc <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	3301      	adds	r3, #1
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 80014fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fe:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	695a      	ldr	r2, [r3, #20]
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8001514:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	3a01      	subs	r2, #1
 800151a:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800151c:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);
 800151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001520:	3b01      	subs	r3, #1
 8001522:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001524:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
				   ((pdiv -1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001530:	e002      	b.n	8001538 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8001538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800153c:	4618      	mov	r0, r3
 800153e:	3730      	adds	r7, #48	; 0x30
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	fc0080ef 	.word	0xfc0080ef

08001548 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	4613      	mov	r3, r2
 8001556:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800155e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001570:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	0211      	lsls	r1, r2, #8
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 800157a:	79fa      	ldrb	r2, [r7, #7]
 800157c:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800157e:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001580:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	f8ffc0c0 	.word	0xf8ffc0c0

08001598 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	4613      	mov	r3, r2
 80015a6:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80015ae:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 80015c0:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	0211      	lsls	r1, r2, #8
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 80015ca:	79fa      	ldrb	r2, [r7, #7]
 80015cc:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 80015ce:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80015d0:	4313      	orrs	r3, r2
 80015d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	efffc0c0 	.word	0xefffc0c0

080015ec <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	460b      	mov	r3, r1
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001600:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001610:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001618:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 800161a:	7afb      	ldrb	r3, [r7, #11]
 800161c:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 800161e:	431a      	orrs	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	460b      	mov	r3, r1
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	699a      	ldr	r2, [r3, #24]
 8001642:	7afb      	ldrb	r3, [r7, #11]
 8001644:	2107      	movs	r1, #7
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001656:	431a      	orrs	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop

08001668 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	460b      	mov	r3, r1
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800167c:	7afb      	ldrb	r3, [r7, #11]
 800167e:	2107      	movs	r1, #7
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8001688:	7afb      	ldrb	r3, [r7, #11]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop

080016a4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	460b      	mov	r3, r1
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80016b8:	7afb      	ldrb	r3, [r7, #11]
 80016ba:	2107      	movs	r1, #7
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 80016c4:	7afb      	ldrb	r3, [r7, #11]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80016cc:	431a      	orrs	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop

080016e0 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a28      	ldr	r2, [pc, #160]	; (800178c <XMC_USIC_Enable+0xac>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d118      	bne.n	8001722 <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 80016f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016f4:	f7ff f98e 	bl	8000a14 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 80016f8:	bf00      	nop
 80016fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016fe:	f7ff f9a5 	bl	8000a4c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f8      	bne.n	80016fa <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001708:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800170c:	f7fe fffe 	bl	800070c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8001710:	bf00      	nop
 8001712:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001716:	f7ff f815 	bl	8000744 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f8      	bne.n	8001712 <XMC_USIC_Enable+0x32>
 8001720:	e030      	b.n	8001784 <XMC_USIC_Enable+0xa4>
#endif 
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a1a      	ldr	r2, [pc, #104]	; (8001790 <XMC_USIC_Enable+0xb0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d114      	bne.n	8001754 <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 800172a:	481a      	ldr	r0, [pc, #104]	; (8001794 <XMC_USIC_Enable+0xb4>)
 800172c:	f7ff f972 	bl	8000a14 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 8001730:	bf00      	nop
 8001732:	4818      	ldr	r0, [pc, #96]	; (8001794 <XMC_USIC_Enable+0xb4>)
 8001734:	f7ff f98a 	bl	8000a4c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f9      	bne.n	8001732 <XMC_USIC_Enable+0x52>
#endif 
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800173e:	4815      	ldr	r0, [pc, #84]	; (8001794 <XMC_USIC_Enable+0xb4>)
 8001740:	f7fe ffe4 	bl	800070c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8001744:	bf00      	nop
 8001746:	4813      	ldr	r0, [pc, #76]	; (8001794 <XMC_USIC_Enable+0xb4>)
 8001748:	f7fe fffc 	bl	8000744 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f9      	bne.n	8001746 <XMC_USIC_Enable+0x66>
 8001752:	e017      	b.n	8001784 <XMC_USIC_Enable+0xa4>
#endif 
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a10      	ldr	r2, [pc, #64]	; (8001798 <XMC_USIC_Enable+0xb8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d113      	bne.n	8001784 <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 800175c:	480f      	ldr	r0, [pc, #60]	; (800179c <XMC_USIC_Enable+0xbc>)
 800175e:	f7ff f959 	bl	8000a14 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 8001762:	bf00      	nop
 8001764:	480d      	ldr	r0, [pc, #52]	; (800179c <XMC_USIC_Enable+0xbc>)
 8001766:	f7ff f971 	bl	8000a4c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f9      	bne.n	8001764 <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001770:	480a      	ldr	r0, [pc, #40]	; (800179c <XMC_USIC_Enable+0xbc>)
 8001772:	f7fe ffcb 	bl	800070c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8001776:	bf00      	nop
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <XMC_USIC_Enable+0xbc>)
 800177a:	f7fe ffe3 	bl	8000744 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f9      	bne.n	8001778 <XMC_USIC_Enable+0x98>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40030008 	.word	0x40030008
 8001790:	48020008 	.word	0x48020008
 8001794:	10000080 	.word	0x10000080
 8001798:	48024008 	.word	0x48024008
 800179c:	10000100 	.word	0x10000100

080017a0 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <_sbrk+0x5c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <_sbrk+0x5c>)
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <_sbrk+0x60>)
 80017b4:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <_sbrk+0x5c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3303      	adds	r3, #3
 80017c0:	f023 0303 	bic.w	r3, r3, #3
 80017c4:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <_sbrk+0x5c>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <_sbrk+0x64>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <_sbrk+0x5c>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	4a07      	ldr	r2, [pc, #28]	; (80017fc <_sbrk+0x5c>)
 80017de:	6013      	str	r3, [r2, #0]
    return (base);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	e006      	b.n	80017f2 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 80017e4:	f004 ff24 	bl	8006630 <__errno>
 80017e8:	4602      	mov	r2, r0
 80017ea:	230c      	movs	r3, #12
 80017ec:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	1ffe89c0 	.word	0x1ffe89c0
 8001800:	20000000 	.word	0x20000000
 8001804:	2003ffc0 	.word	0x2003ffc0

08001808 <_init>:

/* Init */
void _init(void)
{}
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <XMC_USIC_CH_WriteToTBUFTCI>:
 * XMC_USIC_CH_WriteToTBUF() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
                                             const uint16_t data,
                                             const uint32_t transmit_control_information)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	460b      	mov	r3, r1
 800181e:	607a      	str	r2, [r7, #4]
 8001820:	817b      	strh	r3, [r7, #10]
  channel->TBUF[transmit_control_information] = data;
 8001822:	8979      	ldrh	r1, [r7, #10]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	3220      	adds	r2, #32
 800182a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop

0800187c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800188e:	b2db      	uxtb	r3, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018c8:	409a      	lsls	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	43db      	mvns	r3, r3
 8001910:	401a      	ands	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop

08001924 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>:
 * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
                                                       const uint16_t data,
                                                       const uint32_t frame_length)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	460b      	mov	r3, r1
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	817b      	strh	r3, [r7, #10]
  channel->IN[frame_length] = data;
 8001932:	8979      	ldrh	r1, [r7, #10]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	3260      	adds	r2, #96	; 0x60
 800193a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001956:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf14      	ite	ne
 800197a:	2301      	movne	r3, #1
 800197c:	2300      	moveq	r3, #0
 800197e:	b2db      	uxtb	r3, r3
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800199a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	401a      	ands	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop

08001a00 <XMC_USIC_CH_RXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a0e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bf14      	ite	ne
 8001a32:	2301      	movne	r3, #1
 8001a34:	2300      	moveq	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <XMC_SPI_CH_SetTransmitMode>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	019b      	lsls	r3, r3, #6
 8001a5c:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop

08001a70 <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4798      	blx	r3
 8001a80:	4603      	mov	r3, r0
 8001a82:	73fb      	strb	r3, [r7, #15]

  return status;
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop

08001a90 <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	75fb      	strb	r3, [r7, #23]

#if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d106      	bne.n	8001aba <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_StartTransmitIRQ(handle, dataptr, count);
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	68b9      	ldr	r1, [r7, #8]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	f000 f807 	bl	8001ac4 <SPI_MASTER_StartTransmitIRQ>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
  }
#endif

  return status;
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <SPI_MASTER_StartTransmitIRQ>:
#if (SPI_MASTER_INTERRUPT_TRANSMIT_MODE == 1U)
/*
 * Transmit the number of data words specified.
 */
SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitIRQ(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
                                                           Specify the number of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_StartTransmitIRQ:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	617b      	str	r3, [r7, #20]

  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d15c      	bne.n	8001ba4 <SPI_MASTER_StartTransmitIRQ+0xe0>
  {
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d057      	beq.n	8001ba0 <SPI_MASTER_StartTransmitIRQ+0xdc>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d054      	beq.n	8001ba0 <SPI_MASTER_StartTransmitIRQ+0xdc>
    {
      status = SPI_MASTER_STATUS_BUSY;
 8001af6:	2302      	movs	r3, #2
 8001af8:	77fb      	strb	r3, [r7, #31]
      /*Check data pointer is valid or not*/
      if (false == runtime_handle->tx_busy)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f083 0301 	eor.w	r3, r3, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d048      	beq.n	8001b9e <SPI_MASTER_StartTransmitIRQ+0xda>
      {
        if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d901      	bls.n	8001b1a <SPI_MASTER_StartTransmitIRQ+0x56>
        {
          bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
        }

        /* Obtain the address of data, size of data */
        runtime_handle->tx_data = dataptr;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	461a      	mov	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	fa03 f202 	lsl.w	r2, r3, r2
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	605a      	str	r2, [r3, #4]
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
        runtime_handle->tx_busy = true;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2020 	strb.w	r2, [r3, #32]

        /* Enable the transmit buffer event */
        if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00c      	beq.n	8001b64 <SPI_MASTER_StartTransmitIRQ+0xa0>
        {
          /* Flush the Transmit FIFO */
          XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fefa 	bl	8001948 <XMC_USIC_CH_TXFIFO_Flush>
          XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b5e:	f7ff febb 	bl	80018d8 <XMC_USIC_CH_TXFIFO_EnableEvent>
 8001b62:	e006      	b.n	8001b72 <SPI_MASTER_StartTransmitIRQ+0xae>
        }
        else
        {
          XMC_USIC_CH_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b6e:	f7ff fe63 	bl	8001838 <XMC_USIC_CH_EnableEvent>
        }
        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	7f1b      	ldrb	r3, [r3, #28]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f7ff ff60 	bl	8001a44 <XMC_SPI_CH_SetTransmitMode>
        status = SPI_MASTER_STATUS_SUCCESS;
 8001b84:	2300      	movs	r3, #0
 8001b86:	77fb      	strb	r3, [r7, #31]

        /* Trigger the transmit buffer interrupt */
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff fe8e 	bl	80018b8 <XMC_USIC_CH_TriggerServiceRequest>
    /* Check whether SPI channel is free or not */
    if ((dataptr != NULL) && (count > 0U))
    {
      status = SPI_MASTER_STATUS_BUSY;
      /*Check data pointer is valid or not*/
      if (false == runtime_handle->tx_busy)
 8001b9c:	e002      	b.n	8001ba4 <SPI_MASTER_StartTransmitIRQ+0xe0>
 8001b9e:	e001      	b.n	8001ba4 <SPI_MASTER_StartTransmitIRQ+0xe0>
        XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8001ba4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3720      	adds	r7, #32
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop

08001bb0 <SPI_MASTER_Transfer>:
 */
SPI_MASTER_STATUS_t SPI_MASTER_Transfer(const SPI_MASTER_t *const handle,
                                        uint8_t* tx_dataptr,
                                        uint8_t* rx_dataptr,
                                        uint32_t count)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_Transfer:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	613b      	str	r3, [r7, #16]

  if (XMC_SPI_CH_MODE_STANDARD == runtime_handle->spi_master_mode)
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	7f1b      	ldrb	r3, [r3, #28]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d13f      	bne.n	8001c52 <SPI_MASTER_Transfer+0xa2>
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d038      	beq.n	8001c4a <SPI_MASTER_Transfer+0x9a>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d035      	beq.n	8001c4a <SPI_MASTER_Transfer+0x9a>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d032      	beq.n	8001c4a <SPI_MASTER_Transfer+0x9a>
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	7fdb      	ldrb	r3, [r3, #31]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f083 0301 	eor.w	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d029      	beq.n	8001c48 <SPI_MASTER_Transfer+0x98>
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f083 0301 	eor.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d020      	beq.n	8001c48 <SPI_MASTER_Transfer+0x98>
      {
        runtime_handle->rx_busy = true;
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = rx_dataptr;
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = tx_dataptr;
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = count;
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = false;
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

#if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)
        if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_INTERRUPT)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <SPI_MASTER_Transfer+0x98>
        {
          status = SPI_MASTER_lReceiveIRQ(handle, count);
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	6839      	ldr	r1, [r7, #0]
 8001c3e:	f000 f8f3 	bl	8001e28 <SPI_MASTER_lReceiveIRQ>
 8001c42:	4603      	mov	r3, r0
 8001c44:	75fb      	strb	r3, [r7, #23]
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8001c46:	e003      	b.n	8001c50 <SPI_MASTER_Transfer+0xa0>
 8001c48:	e002      	b.n	8001c50 <SPI_MASTER_Transfer+0xa0>
#endif
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	75fb      	strb	r3, [r7, #23]
 8001c4e:	e002      	b.n	8001c56 <SPI_MASTER_Transfer+0xa6>
 8001c50:	e001      	b.n	8001c56 <SPI_MASTER_Transfer+0xa6>
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_FAILURE;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <SPI_MASTER_lTransmitHandler>:
 * Transmit interrupt handler for the APP.
 * This is a common interrupt handling function called for different instances of the APP.
 *
 */
void SPI_MASTER_lTransmitHandler(const SPI_MASTER_t * const handle)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16.*/
 8001c68:	2301      	movs	r3, #1
 8001c6a:	613b      	str	r3, [r7, #16]
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	60fb      	str	r3, [r7, #12]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d901      	bls.n	8001c80 <SPI_MASTER_lTransmitHandler+0x20>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	613b      	str	r3, [r7, #16]
  }

  if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	f080 808b 	bcs.w	8001da4 <SPI_MASTER_lTransmitHandler+0x144>
  {
    data = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	82fb      	strh	r3, [r7, #22]
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d04b      	beq.n	8001d36 <SPI_MASTER_lTransmitHandler+0xd6>
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001c9e:	e03e      	b.n	8001d1e <SPI_MASTER_lTransmitHandler+0xbe>
      {
        if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d236      	bcs.n	8001d1a <SPI_MASTER_lTransmitHandler+0xba>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          if (runtime_handle->tx_data_dummy == true)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00b      	beq.n	8001cd0 <SPI_MASTER_lTransmitHandler+0x70>
          {
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	7f1b      	ldrb	r3, [r3, #28]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f7ff fe2b 	bl	8001924 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
 8001cce:	e01d      	b.n	8001d0c <SPI_MASTER_lTransmitHandler+0xac>
          }
          else
          {
            if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d107      	bne.n	8001ce6 <SPI_MASTER_lTransmitHandler+0x86>
            {
              data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	4413      	add	r3, r2
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	82fb      	strh	r3, [r7, #22]
 8001ce4:	e006      	b.n	8001cf4 <SPI_MASTER_lTransmitHandler+0x94>
            }
            else
            {
              data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	699a      	ldr	r2, [r3, #24]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	4413      	add	r3, r2
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	82fb      	strh	r3, [r7, #22]
            }
            XMC_USIC_CH_TXFIFO_PutDataHPCMode(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	7f1b      	ldrb	r3, [r3, #28]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	461c      	mov	r4, r3
 8001d00:	8afb      	ldrh	r3, [r7, #22]
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	4622      	mov	r2, r4
 8001d08:	f7ff fe0c 	bl	8001924 <XMC_USIC_CH_TXFIFO_PutDataHPCMode>
          }
          (runtime_handle->tx_data_index)+= bytes_per_word;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	441a      	add	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	e001      	b.n	8001d1e <SPI_MASTER_lTransmitHandler+0xbe>
        }
        else
        {
          break;
 8001d1a:	bf00      	nop
 8001d1c:	e080      	b.n	8001e20 <SPI_MASTER_lTransmitHandler+0x1c0>
    data = 0U;
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fe1e 	bl	8001964 <XMC_USIC_CH_TXFIFO_IsFull>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f083 0301 	eor.w	r3, r3, #1
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1b5      	bne.n	8001ca0 <SPI_MASTER_lTransmitHandler+0x40>
 8001d34:	e074      	b.n	8001e20 <SPI_MASTER_lTransmitHandler+0x1c0>
        }
      }
    }
    else/*When Transmit FIFO is disabled*/
    {
      if (runtime_handle->tx_data_dummy == true)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00b      	beq.n	8001d5a <SPI_MASTER_lTransmitHandler+0xfa>
      {
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, 0xFFFFU, (uint32_t)runtime_handle->spi_master_mode);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	7f1b      	ldrb	r3, [r3, #28]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d52:	461a      	mov	r2, r3
 8001d54:	f7ff fd5e 	bl	8001814 <XMC_USIC_CH_WriteToTBUFTCI>
 8001d58:	e01d      	b.n	8001d96 <SPI_MASTER_lTransmitHandler+0x136>
      }
      else
      {
        if(bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d107      	bne.n	8001d70 <SPI_MASTER_lTransmitHandler+0x110>
        {
          data = *((uint16_t*)&runtime_handle->tx_data[runtime_handle->tx_data_index]);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4413      	add	r3, r2
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	82fb      	strh	r3, [r7, #22]
 8001d6e:	e006      	b.n	8001d7e <SPI_MASTER_lTransmitHandler+0x11e>
        }
        else
        {
          data = runtime_handle->tx_data[runtime_handle->tx_data_index];
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4413      	add	r3, r2
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	82fb      	strh	r3, [r7, #22]
        }
        XMC_USIC_CH_WriteToTBUFTCI(handle->channel, data, (uint32_t)runtime_handle->spi_master_mode);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	7f1b      	ldrb	r3, [r3, #28]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	461c      	mov	r4, r3
 8001d8a:	8afb      	ldrh	r3, [r7, #22]
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4622      	mov	r2, r4
 8001d92:	f7ff fd3f 	bl	8001814 <XMC_USIC_CH_WriteToTBUFTCI>
      }
      (runtime_handle->tx_data_index)+= bytes_per_word;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	441a      	add	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	e03d      	b.n	8001e20 <SPI_MASTER_lTransmitHandler+0x1c0>
    }
  }
  else
  {
    if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fdef 	bl	800198c <XMC_USIC_CH_TXFIFO_IsEmpty>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d035      	beq.n	8001e20 <SPI_MASTER_lTransmitHandler+0x1c0>
    {
      /* Clear the flag */
      if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <SPI_MASTER_lTransmitHandler+0x170>
      {
        /* Clear the transmit FIFO event */
        XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dca:	f7ff fd97 	bl	80018fc <XMC_USIC_CH_TXFIFO_DisableEvent>
 8001dce:	e006      	b.n	8001dde <SPI_MASTER_lTransmitHandler+0x17e>
      }
      else
      {
        /* Clear the standard transmit event */
        XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dda:	f7ff fd3d 	bl	8001858 <XMC_USIC_CH_DisableEvent>
      }

      /* Wait for the transmit buffer to be free to ensure that all data is transmitted */
      while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001dde:	bf00      	nop
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fd49 	bl	800187c <XMC_USIC_CH_GetTransmitBufferStatus>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b80      	cmp	r3, #128	; 0x80
 8001dee:	d0f7      	beq.n	8001de0 <SPI_MASTER_lTransmitHandler+0x180>
      {

      }

      /* All data is transmitted */
      runtime_handle->tx_busy = false;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2020 	strb.w	r2, [r3, #32]
      runtime_handle->tx_data = NULL;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]

      if ((handle->config->tx_cbhandler != NULL) && (runtime_handle->rx_busy == false))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00b      	beq.n	8001e20 <SPI_MASTER_lTransmitHandler+0x1c0>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	7fdb      	ldrb	r3, [r3, #31]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f083 0301 	eor.w	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <SPI_MASTER_lTransmitHandler+0x1c0>
      {
        /* Execute the callback function provided in the SPI_MASTER APP UI */
        handle->config->tx_cbhandler();
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1e:	4798      	blx	r3
      }
    }
  }
}
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd90      	pop	{r4, r7, pc}
 8001e26:	bf00      	nop

08001e28 <SPI_MASTER_lReceiveIRQ>:
#endif

#if (SPI_MASTER_INTERRUPT_RECEIVE_MODE == 1U)

SPI_MASTER_STATUS_t SPI_MASTER_lReceiveIRQ(const SPI_MASTER_t *const handle, uint32_t count)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]

  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD;; /* This is to support the word length 8 and 16.
 8001e32:	2301      	movs	r3, #1
 8001e34:	617b      	str	r3, [r7, #20]
                                                            Specify the number of bytes for the configured word length*/

  runtime_handle = handle->runtime;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	613b      	str	r3, [r7, #16]
  runtime_handle->rx_data_index = 0U;
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d901      	bls.n	8001e50 <SPI_MASTER_lReceiveIRQ+0x28>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	617b      	str	r3, [r7, #20]
  }

  /* If no active reception in progress, obtain the address of data buffer and number of data bytes to be received */
  runtime_handle->rx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	461a      	mov	r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	fa03 f202 	lsl.w	r2, r3, r2
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	60da      	str	r2, [r3, #12]

  /* Check if FIFO is enabled */
  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d017      	beq.n	8001e9c <SPI_MASTER_lReceiveIRQ+0x74>
  {
    /* Clear the receive FIFO */
    XMC_USIC_CH_RXFIFO_Flush(handle->channel);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fdc5 	bl	8001a00 <XMC_USIC_CH_RXFIFO_Flush>
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f996 	bl	80021ac <SPI_MASTER_lStdRBUFFlush>

    /* Configure the FIFO trigger limit based on the required data size */
    SPI_MASTER_lReconfigureRxFIFO(handle, runtime_handle->rx_data_count);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	4619      	mov	r1, r3
 8001e88:	f000 f958 	bl	800213c <SPI_MASTER_lReconfigureRxFIFO>

    /* Enable the receive FIFO events */
    XMC_USIC_CH_RXFIFO_EnableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001e96:	f7ff fd8d 	bl	80019b4 <XMC_USIC_CH_RXFIFO_EnableEvent>
 8001e9a:	e00b      	b.n	8001eb4 <SPI_MASTER_lReceiveIRQ+0x8c>
  }
  else
  {
    /* Flush the RBUF0 and RBUF1 */
    SPI_MASTER_lStdRBUFFlush(handle->channel);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 f983 	bl	80021ac <SPI_MASTER_lStdRBUFFlush>

    /* Enable the standard receive events */
    XMC_USIC_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001eb0:	f7ff fcc2 	bl	8001838 <XMC_USIC_CH_EnableEvent>
  }
  /* Call the transmit, to receive the data synchronously */
  status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	699a      	ldr	r2, [r3, #24]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f7ff fde5 	bl	8001a90 <SPI_MASTER_Transmit>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	73fb      	strb	r3, [r7, #15]

  return status;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <SPI_MASTER_lReceiveHandler>:
/*
 * Receive interrupt handler for the APP.
 * This is a common interrupt handling function for different instances of the SPI_MASTER APP.
 */
void SPI_MASTER_lReceiveHandler(const SPI_MASTER_t * const handle)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* This is to support the word length 8 and 16. */
 8001edc:	2301      	movs	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	613b      	str	r3, [r7, #16]

  data = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	81fb      	strh	r3, [r7, #14]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d901      	bls.n	8001ef8 <SPI_MASTER_lReceiveHandler+0x24>
  {
    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	617b      	str	r3, [r7, #20]
  }

  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01d      	beq.n	8001f40 <SPI_MASTER_lReceiveHandler+0x6c>
  {
    /* read the FIFO */
    SPI_MASTER_lFIFORead(handle, bytes_per_word);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	6979      	ldr	r1, [r7, #20]
 8001f08:	f000 f8b6 	bl	8002078 <SPI_MASTER_lFIFORead>
    /* Reconfigure the RXFIFO trigger limit based on pending receive bytes */
    if ((runtime_handle->rx_data_count - runtime_handle->rx_data_index) <= (1UL << (handle->config->rx_fifo_size - 1)))
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	1ad2      	subs	r2, r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	2101      	movs	r1, #1
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	429a      	cmp	r2, r3
 8001f28:	f200 80a2 	bhi.w	8002070 <SPI_MASTER_lReceiveHandler+0x19c>
    {
      SPI_MASTER_lReconfigureRxFIFO(handle, (uint32_t)(runtime_handle->rx_data_count - runtime_handle->rx_data_index));
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f000 f8ff 	bl	800213c <SPI_MASTER_lReconfigureRxFIFO>
 8001f3e:	e097      	b.n	8002070 <SPI_MASTER_lReceiveHandler+0x19c>
    }
  }
  else
  {
    /* When RxFIFO is disabled */
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0) != 0U )
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fca9 	bl	800189c <XMC_USIC_CH_GetReceiveBufferStatus>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d028      	beq.n	8001fa6 <SPI_MASTER_lReceiveHandler+0xd2>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d222      	bcs.n	8001fa6 <SPI_MASTER_lReceiveHandler+0xd2>
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff f97d 	bl	8001264 <XMC_SPI_CH_GetReceivedData>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	81fb      	strh	r3, [r7, #14]

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	4413      	add	r3, r2
 8001f78:	89fa      	ldrh	r2, [r7, #14]
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	701a      	strb	r2, [r3, #0]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d10a      	bne.n	8001f9a <SPI_MASTER_lReceiveHandler+0xc6>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	89fa      	ldrh	r2, [r7, #14]
 8001f92:	0a12      	lsrs	r2, r2, #8
 8001f94:	b292      	uxth	r2, r2
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	441a      	add	r2, r3
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	611a      	str	r2, [r3, #16]
      }
    }
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) != 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fc76 	bl	800189c <XMC_USIC_CH_GetReceiveBufferStatus>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d028      	beq.n	800200c <SPI_MASTER_lReceiveHandler+0x138>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d222      	bcs.n	800200c <SPI_MASTER_lReceiveHandler+0x138>
      {
        data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff f94a 	bl	8001264 <XMC_SPI_CH_GetReceivedData>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	81fb      	strh	r3, [r7, #14]

        runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	89fa      	ldrh	r2, [r7, #14]
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	701a      	strb	r2, [r3, #0]

        if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d10a      	bne.n	8002000 <SPI_MASTER_lReceiveHandler+0x12c>
        {
          runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	89fa      	ldrh	r2, [r7, #14]
 8001ff8:	0a12      	lsrs	r2, r2, #8
 8001ffa:	b292      	uxth	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	701a      	strb	r2, [r3, #0]
        }

        (runtime_handle->rx_data_index)+= bytes_per_word;
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	441a      	add	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	611a      	str	r2, [r3, #16]
      }
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d12b      	bne.n	8002070 <SPI_MASTER_lReceiveHandler+0x19c>
    {
      /* Disable both standard receive and alternative receive FIFO events */
      if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002020:	2b00      	cmp	r3, #0
 8002022:	d007      	beq.n	8002034 <SPI_MASTER_lReceiveHandler+0x160>
      {
        /* Enable the receive FIFO events */
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800202e:	f7ff fcd3 	bl	80019d8 <XMC_USIC_CH_RXFIFO_DisableEvent>
 8002032:	e006      	b.n	8002042 <SPI_MASTER_lReceiveHandler+0x16e>
      }
      else
      {
        XMC_SPI_CH_DisableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800203e:	f7ff f92b 	bl	8001298 <XMC_SPI_CH_DisableEvent>
      }
      /* Reception complete */
      runtime_handle->rx_busy = false;
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2200      	movs	r2, #0
 8002046:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      runtime_handle->rx_data_dummy = true;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      runtime_handle->rx_data = NULL;
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2200      	movs	r2, #0
 800205c:	615a      	str	r2, [r3, #20]

      if (handle->config->rx_cbhandler != NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <SPI_MASTER_lReceiveHandler+0x19c>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206e:	4798      	blx	r3
      }
    }
  }
}
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop

08002078 <SPI_MASTER_lFIFORead>:

/*
 * Read the data from FIFO until it becomes empty.
 */
void SPI_MASTER_lFIFORead(const SPI_MASTER_t * const handle, const uint32_t bytes_per_word)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint16_t data;

  runtime_handle = handle->runtime;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	60fb      	str	r3, [r7, #12]
  data = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	817b      	strh	r3, [r7, #10]

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 800208c:	e047      	b.n	800211e <SPI_MASTER_lFIFORead+0xa6>
  {
    if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	429a      	cmp	r2, r3
 8002098:	d222      	bcs.n	80020e0 <SPI_MASTER_lFIFORead+0x68>
    {
      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f8e0 	bl	8001264 <XMC_SPI_CH_GetReceivedData>
 80020a4:	4603      	mov	r3, r0
 80020a6:	817b      	strh	r3, [r7, #10]
      runtime_handle->rx_data[runtime_handle->rx_data_index] = (uint8_t)data;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	695a      	ldr	r2, [r3, #20]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	897a      	ldrh	r2, [r7, #10]
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	701a      	strb	r2, [r3, #0]

      if (bytes_per_word == SPI_MASTER_2_BYTES_PER_WORD)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d10a      	bne.n	80020d4 <SPI_MASTER_lFIFORead+0x5c>
      {
        runtime_handle->rx_data[runtime_handle->rx_data_index + 1U] = (uint8_t)((uint16_t)data >> 8);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	3301      	adds	r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	897a      	ldrh	r2, [r7, #10]
 80020cc:	0a12      	lsrs	r2, r2, #8
 80020ce:	b292      	uxth	r2, r2
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	701a      	strb	r2, [r3, #0]
      }
      (runtime_handle->rx_data_index)+= bytes_per_word;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	441a      	add	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	611a      	str	r2, [r3, #16]
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d118      	bne.n	800211e <SPI_MASTER_lFIFORead+0xa6>
    {
      /*Reception complete*/
      runtime_handle->rx_busy = false;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)SPI_MASTER_FIFO_RECEIVE_EVENT);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002104:	f7ff fc68 	bl	80019d8 <XMC_USIC_CH_RXFIFO_DisableEvent>
      if (handle->config->rx_cbhandler != NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <SPI_MASTER_lFIFORead+0xa4>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002118:	4798      	blx	r3
      }
      break;
 800211a:	e00b      	b.n	8002134 <SPI_MASTER_lFIFORead+0xbc>
 800211c:	e00a      	b.n	8002134 <SPI_MASTER_lFIFORead+0xbc>

  runtime_handle = handle->runtime;
  data = 0U;

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fc7a 	bl	8001a1c <XMC_USIC_CH_RXFIFO_IsEmpty>
 8002128:	4603      	mov	r3, r0
 800212a:	f083 0301 	eor.w	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1ac      	bne.n	800208e <SPI_MASTER_lFIFORead+0x16>
        handle->config->rx_cbhandler();
      }
      break;
    }
  }
}
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop

0800213c <SPI_MASTER_lReconfigureRxFIFO>:

/*
 * This function configures the FIFO settings
 */
static void SPI_MASTER_lReconfigureRxFIFO(const SPI_MASTER_t * const handle, uint32_t data_size)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val;

  if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800214e:	2b00      	cmp	r3, #0
 8002150:	d028      	beq.n	80021a4 <SPI_MASTER_lReconfigureRxFIFO+0x68>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d025      	beq.n	80021a4 <SPI_MASTER_lReconfigureRxFIFO+0x68>
  {
	fifo_size = 1UL << (handle->config->rx_fifo_size - 1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002160:	3b01      	subs	r3, #1
 8002162:	2201      	movs	r2, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	60bb      	str	r3, [r7, #8]

    if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b08      	cmp	r3, #8
 8002172:	d902      	bls.n	800217a <SPI_MASTER_lReconfigureRxFIFO+0x3e>
	{
	  /* Data size is divided by 2, to change the trigger limit according the word length */
	  data_size = (uint32_t)data_size >> 1U;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	085b      	lsrs	r3, r3, #1
 8002178:	603b      	str	r3, [r7, #0]
	}

	/*If data size is more than FIFO size, configure the limit to the FIFO size*/
	if (data_size <= fifo_size)
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	429a      	cmp	r2, r3
 8002180:	d803      	bhi.n	800218a <SPI_MASTER_lReconfigureRxFIFO+0x4e>
	{
	  ret_limit_val = data_size - 1U;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	3b01      	subs	r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	e001      	b.n	800218e <SPI_MASTER_lReconfigureRxFIFO+0x52>
	}
	else
	{
	  ret_limit_val = fifo_size;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	60fb      	str	r3, [r7, #12]
	}

	/*Set the limit value*/
	XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, ret_limit_val);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	f7ff fa24 	bl	80015ec <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
  }
}
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop

080021ac <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff f855 	bl	8001264 <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff f852 	bl	8001264 <XMC_SPI_CH_GetReceivedData>
}
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop

080021c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021d4:	0a1b      	lsrs	r3, r3, #8
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	db0b      	blt.n	800220e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f6:	4908      	ldr	r1, [pc, #32]	; (8002218 <__NVIC_EnableIRQ+0x34>)
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	79fa      	ldrb	r2, [r7, #7]
 8002200:	f002 021f 	and.w	r2, r2, #31
 8002204:	2001      	movs	r0, #1
 8002206:	fa00 f202 	lsl.w	r2, r0, r2
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	490d      	ldr	r1, [pc, #52]	; (8002268 <__NVIC_SetPriority+0x4c>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	0092      	lsls	r2, r2, #2
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	4909      	ldr	r1, [pc, #36]	; (800226c <__NVIC_SetPriority+0x50>)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3b04      	subs	r3, #4
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	0092      	lsls	r2, r2, #2
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
  }
}
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b06      	cmp	r3, #6
 800228c:	bf28      	it	cs
 800228e:	2306      	movcs	r3, #6
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3306      	adds	r3, #6
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b01      	subs	r3, #1
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2201      	movs	r2, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	1e5a      	subs	r2, r3, #1
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	401a      	ands	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2101      	movs	r1, #1
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	1e59      	subs	r1, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80022c4:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	; 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop

080022d4 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	70fb      	strb	r3, [r7, #3]
 80022e0:	4613      	mov	r3, r2
 80022e2:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80022e4:	78f8      	ldrb	r0, [r7, #3]
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	3306      	adds	r3, #6
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80022f6:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80022f8:	431a      	orrs	r2, r3
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	1d83      	adds	r3, r0, #6
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop

08002310 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002320:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	3b01      	subs	r3, #1
 8002328:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop

0800233c <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	3b01      	subs	r3, #1
 8002354:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop

08002368 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 800237c:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 800237e:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop

08002394 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f023 020f 	bic.w	r2, r3, #15
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40
}
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop

080023bc <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	2101      	movs	r1, #1
 80023c8:	f7ff ffe4 	bl	8002394 <XMC_USIC_CH_SetMode>
}
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop

080023d4 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
								   USIC_CH_BRG_PCTQ_Msk)) |
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	615a      	str	r2, [r3, #20]
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	f7ff ffa9 	bl	8002368 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4619      	mov	r1, r3
 800242e:	f7ff ff6f 	bl	8002310 <XMC_USIC_CH_SetWordLength>
}
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4619      	mov	r1, r3
 800244a:	f7ff ff77 	bl	800233c <XMC_USIC_CH_SetFrameLength>
}
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
 8002460:	4613      	mov	r3, r2
 8002462:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 8002464:	78f8      	ldrb	r0, [r7, #3]
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	3306      	adds	r3, #6
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8002476:	f043 0210 	orr.w	r2, r3, #16
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	1d83      	adds	r3, r0, #6
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	78bb      	ldrb	r3, [r7, #2]
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4611      	mov	r1, r2
 800248c:	461a      	mov	r2, r3
 800248e:	f7ff ff21 	bl	80022d4 <XMC_USIC_CH_SetInputSource>
}
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 800249e:	2300      	movs	r3, #0
 80024a0:	71fb      	strb	r3, [r7, #7]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI2_CH0, &SPI_MASTER_0_Channel_Config);
 80024a2:	483d      	ldr	r0, [pc, #244]	; (8002598 <SPI_MASTER_0_lInit+0x100>)
 80024a4:	493d      	ldr	r1, [pc, #244]	; (800259c <SPI_MASTER_0_lInit+0x104>)
 80024a6:	f7fe fe87 	bl	80011b8 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_SetWordLength(XMC_SPI2_CH0, (uint8_t)8);
 80024aa:	483b      	ldr	r0, [pc, #236]	; (8002598 <SPI_MASTER_0_lInit+0x100>)
 80024ac:	2108      	movs	r1, #8
 80024ae:	f7ff ffb5 	bl	800241c <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI2_CH0, (uint8_t)16);
 80024b2:	4839      	ldr	r0, [pc, #228]	; (8002598 <SPI_MASTER_0_lInit+0x100>)
 80024b4:	2110      	movs	r1, #16
 80024b6:	f7ff ffbf 	bl	8002438 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI2_CH0,
 80024ba:	4837      	ldr	r0, [pc, #220]	; (8002598 <SPI_MASTER_0_lInit+0x100>)
 80024bc:	2100      	movs	r1, #0
 80024be:	2200      	movs	r2, #0
 80024c0:	f7ff ff9e 	bl	8002400 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI2_CH0, 2U);
 80024c4:	4834      	ldr	r0, [pc, #208]	; (8002598 <SPI_MASTER_0_lInit+0x100>)
 80024c6:	2102      	movs	r1, #2
 80024c8:	f7ff ff84 	bl	80023d4 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)7, &SPI_MASTER_0_MISO_Config.port_config);
 80024cc:	4834      	ldr	r0, [pc, #208]	; (80025a0 <SPI_MASTER_0_lInit+0x108>)
 80024ce:	2107      	movs	r1, #7
 80024d0:	4a34      	ldr	r2, [pc, #208]	; (80025a4 <SPI_MASTER_0_lInit+0x10c>)
 80024d2:	f7fd ffab 	bl	800042c <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI2_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_C);
 80024d6:	4830      	ldr	r0, [pc, #192]	; (8002598 <SPI_MASTER_0_lInit+0x100>)
 80024d8:	2100      	movs	r1, #0
 80024da:	2202      	movs	r2, #2
 80024dc:	f7ff ffba 	bl	8002454 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI2_CH0);
 80024e0:	482d      	ldr	r0, [pc, #180]	; (8002598 <SPI_MASTER_0_lInit+0x100>)
 80024e2:	f7ff ff6b 	bl	80023bc <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)8, &SPI_MASTER_0_MOSI_Config.port_config);
 80024e6:	482e      	ldr	r0, [pc, #184]	; (80025a0 <SPI_MASTER_0_lInit+0x108>)
 80024e8:	2108      	movs	r1, #8
 80024ea:	4a2f      	ldr	r2, [pc, #188]	; (80025a8 <SPI_MASTER_0_lInit+0x110>)
 80024ec:	f7fd ff9e 	bl	800042c <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)9, &SPI_MASTER_0_SCLKOUT_Config.port_config);
 80024f0:	482b      	ldr	r0, [pc, #172]	; (80025a0 <SPI_MASTER_0_lInit+0x108>)
 80024f2:	2109      	movs	r1, #9
 80024f4:	4a2d      	ldr	r2, [pc, #180]	; (80025ac <SPI_MASTER_0_lInit+0x114>)
 80024f6:	f7fd ff99 	bl	800042c <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)6, &SPI_MASTER_0_SS_0_Config.port_config);
 80024fa:	482d      	ldr	r0, [pc, #180]	; (80025b0 <SPI_MASTER_0_lInit+0x118>)
 80024fc:	2106      	movs	r1, #6
 80024fe:	4a2d      	ldr	r2, [pc, #180]	; (80025b4 <SPI_MASTER_0_lInit+0x11c>)
 8002500:	f7fd ff94 	bl	800042c <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI2_CH0, XMC_SPI_CH_SLAVE_SELECT_3);
 8002504:	4824      	ldr	r0, [pc, #144]	; (8002598 <SPI_MASTER_0_lInit+0x100>)
 8002506:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800250a:	f7fe fe95 	bl	8001238 <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 800250e:	4822      	ldr	r0, [pc, #136]	; (8002598 <SPI_MASTER_0_lInit+0x100>)
 8002510:	2110      	movs	r1, #16
 8002512:	2200      	movs	r2, #0
 8002514:	f7ff f88c 	bl	8001630 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
            
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI2_CH0,
 8002518:	481f      	ldr	r0, [pc, #124]	; (8002598 <SPI_MASTER_0_lInit+0x100>)
 800251a:	2110      	movs	r1, #16
 800251c:	2204      	movs	r2, #4
 800251e:	2301      	movs	r3, #1
 8002520:	f7ff f812 	bl	8001548 <XMC_USIC_CH_TXFIFO_Configure>
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_SPI2_CH0,
 8002524:	481c      	ldr	r0, [pc, #112]	; (8002598 <SPI_MASTER_0_lInit+0x100>)
 8002526:	2110      	movs	r1, #16
 8002528:	2203      	movs	r2, #3
 800252a:	f7ff f89d 	bl	8001668 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_3);
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI2_CH0,
 800252e:	481a      	ldr	r0, [pc, #104]	; (8002598 <SPI_MASTER_0_lInit+0x100>)
 8002530:	2100      	movs	r1, #0
 8002532:	2204      	movs	r2, #4
 8002534:	2300      	movs	r3, #0
 8002536:	f7ff f82f 	bl	8001598 <XMC_USIC_CH_RXFIFO_Configure>
                               0U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               0U);
             
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI2_CH0,
 800253a:	4817      	ldr	r0, [pc, #92]	; (8002598 <SPI_MASTER_0_lInit+0x100>)
 800253c:	2110      	movs	r1, #16
 800253e:	2202      	movs	r2, #2
 8002540:	f7ff f8b0 	bl	80016a4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_2);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_SPI2_CH0,
 8002544:	4814      	ldr	r0, [pc, #80]	; (8002598 <SPI_MASTER_0_lInit+0x100>)
 8002546:	2113      	movs	r1, #19
 8002548:	2202      	movs	r2, #2
 800254a:	f7ff f8ab 	bl	80016a4 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
                                             (uint32_t)SPI_MASTER_SR_ID_2);
  /* Set priority of the Transmit interrupt */
  NVIC_SetPriority((IRQn_Type)99, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63U, 0U));
 800254e:	f7ff fe3b 	bl	80021c8 <__NVIC_GetPriorityGrouping>
 8002552:	4603      	mov	r3, r0
 8002554:	4618      	mov	r0, r3
 8002556:	213f      	movs	r1, #63	; 0x3f
 8002558:	2200      	movs	r2, #0
 800255a:	f7ff fe89 	bl	8002270 <NVIC_EncodePriority>
 800255e:	4603      	mov	r3, r0
 8002560:	2063      	movs	r0, #99	; 0x63
 8002562:	4619      	mov	r1, r3
 8002564:	f7ff fe5a 	bl	800221c <__NVIC_SetPriority>
     
  /* Enable Transmit interrupt */
  NVIC_EnableIRQ((IRQn_Type)99);
 8002568:	2063      	movs	r0, #99	; 0x63
 800256a:	f7ff fe3b 	bl	80021e4 <__NVIC_EnableIRQ>
             
  /* Set priority of the Receive interrupt */
  NVIC_SetPriority((IRQn_Type)98, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 62U, 0U));
 800256e:	f7ff fe2b 	bl	80021c8 <__NVIC_GetPriorityGrouping>
 8002572:	4603      	mov	r3, r0
 8002574:	4618      	mov	r0, r3
 8002576:	213e      	movs	r1, #62	; 0x3e
 8002578:	2200      	movs	r2, #0
 800257a:	f7ff fe79 	bl	8002270 <NVIC_EncodePriority>
 800257e:	4603      	mov	r3, r0
 8002580:	2062      	movs	r0, #98	; 0x62
 8002582:	4619      	mov	r1, r3
 8002584:	f7ff fe4a 	bl	800221c <__NVIC_SetPriority>
    
  /* Enable Receive interrupt */
  NVIC_EnableIRQ((IRQn_Type)98);
 8002588:	2062      	movs	r0, #98	; 0x62
 800258a:	f7ff fe2b 	bl	80021e4 <__NVIC_EnableIRQ>
    
  return status;
 800258e:	79fb      	ldrb	r3, [r7, #7]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	48024000 	.word	0x48024000
 800259c:	1ffe8814 	.word	0x1ffe8814
 80025a0:	48028300 	.word	0x48028300
 80025a4:	1ffe89c4 	.word	0x1ffe89c4
 80025a8:	1ffe8800 	.word	0x1ffe8800
 80025ac:	0800683c 	.word	0x0800683c
 80025b0:	48028500 	.word	0x48028500
 80025b4:	08006858 	.word	0x08006858

080025b8 <USIC2_3_IRQHandler>:
/*Transmit ISR*/
void SPI_MASTER_0_tx_handler()
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  SPI_MASTER_lTransmitHandler(&SPI_MASTER_0);
 80025bc:	4801      	ldr	r0, [pc, #4]	; (80025c4 <USIC2_3_IRQHandler+0xc>)
 80025be:	f7ff fb4f 	bl	8001c60 <SPI_MASTER_lTransmitHandler>
}
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	1ffe8844 	.word	0x1ffe8844

080025c8 <USIC2_2_IRQHandler>:

/*Receive ISR*/
void SPI_MASTER_0_rx_handler()
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  SPI_MASTER_lReceiveHandler(&SPI_MASTER_0);
 80025cc:	4801      	ldr	r0, [pc, #4]	; (80025d4 <USIC2_2_IRQHandler+0xc>)
 80025ce:	f7ff fc81 	bl	8001ed4 <SPI_MASTER_lReceiveHandler>
}
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	1ffe8844 	.word	0x1ffe8844

080025d8 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	2201      	movs	r2, #1
 80025e8:	409a      	lsls	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	60da      	str	r2, [r3, #12]
}
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	60da      	str	r2, [r3, #12]
}
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 800261c:	887a      	ldrh	r2, [r7, #2]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8002638:	887a      	ldrh	r2, [r7, #2]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	611a      	str	r2, [r3, #16]
}
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop

08002664 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	2101      	movs	r1, #1
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <PWM_lCCU4_Init>:

#ifdef PWM_SLICE_USED_CCU4

/*Initialize the APP and CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_Init(PWM_t *const handle_ptr)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status = PWM_STATUS_FAILURE;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_lCCU4_Init:Invalid handle_ptr" , (handle_ptr != NULL))

  if (PWM_STATUS_UNINITIALIZED == handle_ptr->state)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d14d      	bne.n	8002742 <PWM_lCCU4_Init+0xb2>
  {
    /* Initialize consumed Apps */
    status = (PWM_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handle);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fa24 	bl	8002af8 <GLOBAL_CCU4_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	73fb      	strb	r3, [r7, #15]

    /*Initialize CCU4 slice */
    if (PWM_STATUS_SUCCESS == status)/*check GLOBAL_CCU4_Init status*/
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d13f      	bne.n	800273a <PWM_lCCU4_Init+0xaa>
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	f7fe fc83 	bl	8000fd0 <XMC_CCU4_SLICE_CompareInit>

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689a      	ldr	r2, [r3, #8]
    		                             (uint16_t)handle_ptr->period_value);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
    {
      XMC_DEBUG("PWM_lCCU4_Init:Initilizing Slice")
      XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	f7ff ff9a 	bl	8002610 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689a      	ldr	r2, [r3, #8]
    		                              (uint16_t)handle_ptr->compare_value);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]

      /* Set the period and compare register values */
      XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr,
    		                             (uint16_t)handle_ptr->period_value);

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr,
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	4610      	mov	r0, r2
 80026e8:	4619      	mov	r1, r3
 80026ea:	f7ff ff9f 	bl	800262c <XMC_CCU4_SLICE_SetTimerCompareMatch>
    		                              (uint16_t)handle_ptr->compare_value);

      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7ff ffa5 	bl	8002648 <XMC_CCU4_EnableShadowTransfer>

      /* Initialize interrupts */
      PWM_lCCU4_ConfigInterrupts(handle_ptr);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f824 	bl	800274c <PWM_lCCU4_ConfigInterrupts>

      XMC_GPIO_Init(handle_ptr->gpio_out_port,handle_ptr->gpio_out_pin,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6919      	ldr	r1, [r3, #16]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4608      	mov	r0, r1
 8002714:	4611      	mov	r1, r2
 8002716:	461a      	mov	r2, r3
 8002718:	f7fd fe88 	bl	800042c <XMC_GPIO_Init>
    		        handle_ptr->gpio_out_config);

      handle_ptr->state = PWM_STATUS_SUCCESS;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->start_control)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <PWM_lCCU4_Init+0xa4>
      {
        PWM_Start(handle_ptr);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8b8 	bl	80028a4 <PWM_Start>
      }
      status = PWM_STATUS_SUCCESS;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	e003      	b.n	8002742 <PWM_lCCU4_Init+0xb2>
    }
    else
    {
      handle_ptr->state = PWM_STATUS_UNINITIALIZED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    }

  }
  return (status);
 8002742:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_lCCU4_Init() api */
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <PWM_lCCU4_ConfigInterrupts>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialize interrupts */
void PWM_lCCU4_ConfigInterrupts(PWM_t *const handle_ptr)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->period_match_enable)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00f      	beq.n	800277e <PWM_lCCU4_ConfigInterrupts+0x32>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:period match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	4618      	mov	r0, r3
 8002764:	2100      	movs	r1, #0
 8002766:	f7ff ff7d 	bl	8002664 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to period match event*/
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002774:	4610      	mov	r0, r2
 8002776:	2100      	movs	r1, #0
 8002778:	461a      	mov	r2, r3
 800277a:	f7fe fc5f 	bl	800103c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_period_match_node);
  }

  if ((bool) true == handle_ptr->compare_match_enable)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00f      	beq.n	80027a8 <PWM_lCCU4_ConfigInterrupts+0x5c>
  {
    XMC_DEBUG("PWM_lCCU4_ConfigInterrupts:compare match enable")
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4618      	mov	r0, r3
 800278e:	2102      	movs	r1, #2
 8002790:	f7ff ff68 	bl	8002664 <XMC_CCU4_SLICE_EnableEvent>

    /* Bind event to Service Request Node to compare match event */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800279e:	4610      	mov	r0, r2
 80027a0:	2102      	movs	r1, #2
 80027a2:	461a      	mov	r2, r3
 80027a4:	f7fe fc4a 	bl	800103c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_slice_compare_match_node);
  }
}
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop

080027b0 <PWM_lCCU4_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Starts the CCU4 slice. */
void PWM_lCCU4_Start(PWM_t *const handle_ptr)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if ((PWM_STATUS_SUCCESS == handle_ptr->state) || (PWM_STATUS_STOPPED == handle_ptr->state))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d004      	beq.n	80027cc <PWM_lCCU4_Start+0x1c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d111      	bne.n	80027f0 <PWM_lCCU4_Start+0x40>
  {
    /* Clears the IDLE mode for the slice */
    XMC_CCU4_EnableClock(handle_ptr->ccu4_kernel_ptr,handle_ptr->slice_number);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	f7ff fefd 	bl	80025d8 <XMC_CCU4_EnableClock>
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff08 	bl	80025f8 <XMC_CCU4_SLICE_StartTimer>

    handle_ptr->state = PWM_STATUS_RUNNING;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2203      	movs	r2, #3
 80027ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    XMC_DEBUG("PWM_lCCU4_Start:start PWM")
  }
} /* end of PWM_lCCU4_Start() api */
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop

080027f8 <PWM_lCCU4_SetDutyCycle>:
} /* end of PWM_lCCU4_Stop() api */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*Sets the duty cycle for CCU4 slice. */
PWM_STATUS_t PWM_lCCU4_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t compare;
  PWM_STATUS_t status;

  XMC_ASSERT("PWM_lCCU4_SetDutyCycle:Invalid duty_cycle " , ((duty_cycle >= 0) && (duty_cycle <= PWM_MAX_DUTY_CYCLE)))

  status = PWM_STATUS_FAILURE;
 8002802:	2301      	movs	r3, #1
 8002804:	75fb      	strb	r3, [r7, #23]
  if (PWM_STATUS_UNINITIALIZED != handle_ptr->state)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800280c:	2b02      	cmp	r3, #2
 800280e:	d02c      	beq.n	800286a <PWM_lCCU4_SetDutyCycle+0x72>
  {
    /* Duty cycle needs between 0 and 10000 */
    if (duty_cycle <= PWM_MAX_DUTY_CYCLE)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f242 7210 	movw	r2, #10000	; 0x2710
 8002816:	4293      	cmp	r3, r2
 8002818:	d827      	bhi.n	800286a <PWM_lCCU4_SetDutyCycle+0x72>
    {
      /* period = (PR + 1) */
      period = (uint32_t)handle_ptr->period_value + 1U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	3301      	adds	r3, #1
 8002820:	613b      	str	r3, [r7, #16]

      /* Duty Cycle(symmetric) = (PR-CR1)+1 / period */
      compare = ((period * (PWM_MAX_DUTY_CYCLE - duty_cycle)) / ((uint32_t) 100 * PWM_DUTY_CYCLE_SCALE));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8002828:	3310      	adds	r3, #16
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	fb02 f303 	mul.w	r3, r2, r3
 8002830:	4a10      	ldr	r2, [pc, #64]	; (8002874 <PWM_lCCU4_SetDutyCycle+0x7c>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	0b5b      	lsrs	r3, r3, #13
 8002838:	60fb      	str	r3, [r7, #12]

      handle_ptr->compare_value = compare;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	619a      	str	r2, [r3, #24]
      handle_ptr->duty_cycle = duty_cycle;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	621a      	str	r2, [r3, #32]

      XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, (uint16_t)compare);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	b29b      	uxth	r3, r3
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	f7ff feeb 	bl	800262c <XMC_CCU4_SLICE_SetTimerCompareMatch>
      XMC_CCU4_EnableShadowTransfer(handle_ptr->ccu4_kernel_ptr, handle_ptr->shadow_mask);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	f7ff fef1 	bl	8002648 <XMC_CCU4_EnableShadowTransfer>
      status = PWM_STATUS_SUCCESS;
 8002866:	2300      	movs	r3, #0
 8002868:	75fb      	strb	r3, [r7, #23]
    }
  }

  XMC_DEBUG("PWM_lCCU4_SetDutyCycle:dutycycle set")
  return (status);
 800286a:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_lCCU4_SetDutyCycle() api */
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	d1b71759 	.word	0xd1b71759

08002878 <PWM_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function initializes the app */
PWM_STATUS_t PWM_Init(PWM_t *const handle_ptr)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_Init:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800288a:	2b00      	cmp	r3, #0
 800288c:	d104      	bne.n	8002898 <PWM_Init+0x20>
  {
    status = PWM_lCCU4_Init(handle_ptr);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fefe 	bl	8002690 <PWM_lCCU4_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	73fb      	strb	r3, [r7, #15]
  {
    status = PWM_lCCU8_Init(handle_ptr);
  }
#endif

  return (status);
 8002898:	7bfb      	ldrb	r3, [r7, #15]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop

080028a4 <PWM_Start>:

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* This function starts the PWM generation. This needs to be called even if external start is configured.*/
void PWM_Start(PWM_t *const handle_ptr)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PWM_Start:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <PWM_Start+0x18>
  {
    PWM_lCCU4_Start(handle_ptr);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff7a 	bl	80027b0 <PWM_lCCU4_Start>
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    PWM_lCCU8_Start(handle_ptr);
  }
#endif
}
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop

080028c4 <PWM_SetDutyCycle>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*This function is used to set the duty cycle (uint32_t) of the PWM waveform  */
PWM_STATUS_t PWM_SetDutyCycle(PWM_t *const handle_ptr, uint32_t duty_cycle)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  PWM_STATUS_t status;
  status = PWM_STATUS_FAILURE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("PWM_SetDutyCycle:Invalid handle_ptr" , (handle_ptr != NULL))

#ifdef PWM_SLICE_USED_CCU4
  if (PWM_TIMER_SLICE_CCU4 == handle_ptr->timer_type)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <PWM_SetDutyCycle+0x24>
  {
    status = PWM_lCCU4_SetDutyCycle(handle_ptr, duty_cycle);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	6839      	ldr	r1, [r7, #0]
 80028e0:	f7ff ff8a 	bl	80027f8 <PWM_lCCU4_SetDutyCycle>
 80028e4:	4603      	mov	r3, r0
 80028e6:	73fb      	strb	r3, [r7, #15]
  if (PWM_TIMER_SLICE_CCU8 == handle_ptr->timer_type)
  {
    status = PWM_lCCU8_SetDutyCycle(handle_ptr, duty_cycle);
  }
#endif
  return (status);
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop

080028f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <__NVIC_GetPriorityGrouping+0x18>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002900:	0a1b      	lsrs	r3, r3, #8
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	2b00      	cmp	r3, #0
 8002920:	db0b      	blt.n	800293a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002922:	4908      	ldr	r1, [pc, #32]	; (8002944 <__NVIC_EnableIRQ+0x34>)
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	79fa      	ldrb	r2, [r7, #7]
 800292c:	f002 021f 	and.w	r2, r2, #31
 8002930:	2001      	movs	r0, #1
 8002932:	fa00 f202 	lsl.w	r2, r0, r2
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000e100 	.word	0xe000e100

08002948 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	db0c      	blt.n	8002974 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295a:	4909      	ldr	r1, [pc, #36]	; (8002980 <__NVIC_ClearPendingIRQ+0x38>)
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	79fa      	ldrb	r2, [r7, #7]
 8002964:	f002 021f 	and.w	r2, r2, #31
 8002968:	2001      	movs	r0, #1
 800296a:	fa00 f202 	lsl.w	r2, r0, r2
 800296e:	3360      	adds	r3, #96	; 0x60
 8002970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000e100 	.word	0xe000e100

08002984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db0a      	blt.n	80029ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002998:	490d      	ldr	r1, [pc, #52]	; (80029d0 <__NVIC_SetPriority+0x4c>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	0092      	lsls	r2, r2, #2
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	440b      	add	r3, r1
 80029a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80029ac:	e00a      	b.n	80029c4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ae:	4909      	ldr	r1, [pc, #36]	; (80029d4 <__NVIC_SetPriority+0x50>)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3b04      	subs	r3, #4
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	0092      	lsls	r2, r2, #2
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	440b      	add	r3, r1
 80029c2:	761a      	strb	r2, [r3, #24]
  }
}
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000e100 	.word	0xe000e100
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	; 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f1c3 0307 	rsb	r3, r3, #7
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	bf28      	it	cs
 80029f6:	2306      	movcs	r3, #6
 80029f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3306      	adds	r3, #6
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d902      	bls.n	8002a08 <NVIC_EncodePriority+0x30>
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	e000      	b.n	8002a0a <NVIC_EncodePriority+0x32>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	1e5a      	subs	r2, r3, #1
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	401a      	ands	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2101      	movs	r1, #1
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	1e59      	subs	r1, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002a2c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop

08002a3c <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3308      	adds	r3, #8
 8002a52:	4608      	mov	r0, r1
 8002a54:	4611      	mov	r1, r2
 8002a56:	461a      	mov	r2, r3
 8002a58:	f7fd fce8 	bl	800042c <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6819      	ldr	r1, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	7fda      	ldrb	r2, [r3, #31]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3314      	adds	r3, #20
 8002a68:	4608      	mov	r0, r1
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	f7fe fb3d 	bl	80010ec <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	2201      	movs	r2, #1
 8002a82:	f7fe fb59 	bl	8001138 <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7f1c      	ldrb	r4, [r3, #28]
 8002a8a:	f7ff ff33 	bl	80028f4 <__NVIC_GetPriorityGrouping>
 8002a8e:	4601      	mov	r1, r0
                    handle->irq_priority, handle->irq_subpriority));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7f5b      	ldrb	r3, [r3, #29]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002a94:	461a      	mov	r2, r3
                    handle->irq_priority, handle->irq_subpriority));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	7f9b      	ldrb	r3, [r3, #30]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8002a9a:	4608      	mov	r0, r1
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f7ff ff9a 	bl	80029d8 <NVIC_EncodePriority>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	b263      	sxtb	r3, r4
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	4611      	mov	r1, r2
 8002aac:	f7ff ff6a 	bl	8002984 <__NVIC_SetPriority>
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
#endif
  if (true == handle->enable_at_init)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00b      	beq.n	8002ad2 <PIN_INTERRUPT_Init+0x96>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	7f1b      	ldrb	r3, [r3, #28]
 8002abe:	b25b      	sxtb	r3, r3
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff41 	bl	8002948 <__NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	7f1b      	ldrb	r3, [r3, #28]
 8002aca:	b25b      	sxtb	r3, r3
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff1f 	bl	8002910 <__NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd90      	pop	{r4, r7, pc}

08002adc <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aea:	60da      	str	r2, [r3, #12]
}
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop

08002af8 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7b5b      	ldrb	r3, [r3, #13]
 8002b04:	f083 0301 	eor.w	r3, r3, #1
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00f      	beq.n	8002b2e <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7b1b      	ldrb	r3, [r3, #12]
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f7fe fa3b 	bl	8000f94 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff ffda 	bl	8002adc <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3b04      	subs	r3, #4
 8002b48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3b04      	subs	r3, #4
 8002b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f023 0201 	bic.w	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	3b04      	subs	r3, #4
 8002b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002b68:	4a0c      	ldr	r2, [pc, #48]	; (8002b9c <pxPortInitialiseStack+0x64>)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3b14      	subs	r3, #20
 8002b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	3b04      	subs	r3, #4
 8002b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f06f 0202 	mvn.w	r2, #2
 8002b86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3b20      	subs	r3, #32
 8002b8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	08002ba1 	.word	0x08002ba1

08002ba0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <prvTaskExitError+0x4c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb2:	d009      	beq.n	8002bc8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bb4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002bb8:	f383 8811 	msr	BASEPRI, r3
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	e7fe      	b.n	8002bc6 <prvTaskExitError+0x26>
 8002bc8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002bda:	bf00      	nop
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0fc      	beq.n	8002bdc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	1ffe891c 	.word	0x1ffe891c

08002bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002bf0:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <pxCurrentTCBConst2>)
 8002bf2:	6819      	ldr	r1, [r3, #0]
 8002bf4:	6808      	ldr	r0, [r1, #0]
 8002bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bfa:	f380 8809 	msr	PSP, r0
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f04f 0000 	mov.w	r0, #0
 8002c06:	f380 8811 	msr	BASEPRI, r0
 8002c0a:	4770      	bx	lr
 8002c0c:	f3af 8000 	nop.w

08002c10 <pxCurrentTCBConst2>:
 8002c10:	1ffe89e0 	.word	0x1ffe89e0
 8002c14:	f3af 8000 	nop.w
 8002c18:	f3af 8000 	nop.w
 8002c1c:	f3af 8000 	nop.w

08002c20 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002c20:	4808      	ldr	r0, [pc, #32]	; (8002c44 <prvPortStartFirstTask+0x24>)
 8002c22:	6800      	ldr	r0, [r0, #0]
 8002c24:	6800      	ldr	r0, [r0, #0]
 8002c26:	f380 8808 	msr	MSP, r0
 8002c2a:	f04f 0000 	mov.w	r0, #0
 8002c2e:	f380 8814 	msr	CONTROL, r0
 8002c32:	b662      	cpsie	i
 8002c34:	b661      	cpsie	f
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	f3bf 8f6f 	isb	sy
 8002c3e:	df00      	svc	0
 8002c40:	bf00      	nop
 8002c42:	0000      	.short	0x0000
 8002c44:	e000ed08 	.word	0xe000ed08

08002c48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c4e:	4b44      	ldr	r3, [pc, #272]	; (8002d60 <xPortStartScheduler+0x118>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a44      	ldr	r2, [pc, #272]	; (8002d64 <xPortStartScheduler+0x11c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d109      	bne.n	8002c6c <xPortStartScheduler+0x24>
 8002c58:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	e7fe      	b.n	8002c6a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c6c:	4b3c      	ldr	r3, [pc, #240]	; (8002d60 <xPortStartScheduler+0x118>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a3d      	ldr	r2, [pc, #244]	; (8002d68 <xPortStartScheduler+0x120>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d109      	bne.n	8002c8a <xPortStartScheduler+0x42>
 8002c76:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002c7a:	f383 8811 	msr	BASEPRI, r3
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e7fe      	b.n	8002c88 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c8a:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <xPortStartScheduler+0x124>)
 8002c8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	22ff      	movs	r2, #255	; 0xff
 8002c9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f023 0303 	bic.w	r3, r3, #3
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4b30      	ldr	r3, [pc, #192]	; (8002d70 <xPortStartScheduler+0x128>)
 8002cb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002cb2:	4b30      	ldr	r3, [pc, #192]	; (8002d74 <xPortStartScheduler+0x12c>)
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cb8:	e009      	b.n	8002cce <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002cba:	4b2e      	ldr	r3, [pc, #184]	; (8002d74 <xPortStartScheduler+0x12c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	4a2c      	ldr	r2, [pc, #176]	; (8002d74 <xPortStartScheduler+0x12c>)
 8002cc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	70fb      	strb	r3, [r7, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	b25b      	sxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	dbef      	blt.n	8002cba <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8002cda:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <xPortStartScheduler+0x12c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f1c3 0307 	rsb	r3, r3, #7
 8002ce2:	2b06      	cmp	r3, #6
 8002ce4:	d009      	beq.n	8002cfa <xPortStartScheduler+0xb2>
 8002ce6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	e7fe      	b.n	8002cf8 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002cfa:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <xPortStartScheduler+0x12c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	4a1c      	ldr	r2, [pc, #112]	; (8002d74 <xPortStartScheduler+0x12c>)
 8002d02:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <xPortStartScheduler+0x12c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d0c:	4a19      	ldr	r2, [pc, #100]	; (8002d74 <xPortStartScheduler+0x12c>)
 8002d0e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002d18:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <xPortStartScheduler+0x130>)
 8002d1a:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <xPortStartScheduler+0x130>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f443 037c 	orr.w	r3, r3, #16515072	; 0xfc0000
 8002d22:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002d24:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <xPortStartScheduler+0x130>)
 8002d26:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <xPortStartScheduler+0x130>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f043 437c 	orr.w	r3, r3, #4227858432	; 0xfc000000
 8002d2e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002d30:	f000 f8d6 	bl	8002ee0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <xPortStartScheduler+0x134>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002d3a:	f000 f8f3 	bl	8002f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002d3e:	4a10      	ldr	r2, [pc, #64]	; (8002d80 <xPortStartScheduler+0x138>)
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <xPortStartScheduler+0x138>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002d48:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002d4a:	f7ff ff69 	bl	8002c20 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002d4e:	f001 fc4f 	bl	80045f0 <vTaskSwitchContext>
	prvTaskExitError();
 8002d52:	f7ff ff25 	bl	8002ba0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	e000ed00 	.word	0xe000ed00
 8002d64:	410fc271 	.word	0x410fc271
 8002d68:	410fc270 	.word	0x410fc270
 8002d6c:	e000e400 	.word	0xe000e400
 8002d70:	1ffe89d8 	.word	0x1ffe89d8
 8002d74:	1ffe89dc 	.word	0x1ffe89dc
 8002d78:	e000ed20 	.word	0xe000ed20
 8002d7c:	1ffe891c 	.word	0x1ffe891c
 8002d80:	e000ef34 	.word	0xe000ef34

08002d84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <vPortEnterCritical+0x54>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3301      	adds	r3, #1
 8002da2:	4a0d      	ldr	r2, [pc, #52]	; (8002dd8 <vPortEnterCritical+0x54>)
 8002da4:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <vPortEnterCritical+0x54>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d10e      	bne.n	8002dcc <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002dae:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <vPortEnterCritical+0x58>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d009      	beq.n	8002dcc <vPortEnterCritical+0x48>
 8002db8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	e7fe      	b.n	8002dca <vPortEnterCritical+0x46>
	}
}
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	1ffe891c 	.word	0x1ffe891c
 8002ddc:	e000ed04 	.word	0xe000ed04

08002de0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <vPortExitCritical+0x48>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d109      	bne.n	8002e02 <vPortExitCritical+0x22>
 8002dee:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	607b      	str	r3, [r7, #4]
 8002e00:	e7fe      	b.n	8002e00 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <vPortExitCritical+0x48>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <vPortExitCritical+0x48>)
 8002e0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <vPortExitCritical+0x48>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d104      	bne.n	8002e1e <vPortExitCritical+0x3e>
 8002e14:	2300      	movs	r3, #0
 8002e16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	1ffe891c 	.word	0x1ffe891c
 8002e2c:	00000000 	.word	0x00000000

08002e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002e30:	f3ef 8009 	mrs	r0, PSP
 8002e34:	f3bf 8f6f 	isb	sy
 8002e38:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <pxCurrentTCBConst>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	f01e 0f10 	tst.w	lr, #16
 8002e40:	bf08      	it	eq
 8002e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e4a:	6010      	str	r0, [r2, #0]
 8002e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002e50:	f04f 00fc 	mov.w	r0, #252	; 0xfc
 8002e54:	f380 8811 	msr	BASEPRI, r0
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f001 fbc6 	bl	80045f0 <vTaskSwitchContext>
 8002e64:	f04f 0000 	mov.w	r0, #0
 8002e68:	f380 8811 	msr	BASEPRI, r0
 8002e6c:	bc09      	pop	{r0, r3}
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	6808      	ldr	r0, [r1, #0]
 8002e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e76:	f01e 0f10 	tst.w	lr, #16
 8002e7a:	bf08      	it	eq
 8002e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e80:	f380 8809 	msr	PSP, r0
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	f3af 8000 	nop.w

08002e90 <pxCurrentTCBConst>:
 8002e90:	1ffe89e0 	.word	0x1ffe89e0
 8002e94:	f3af 8000 	nop.w
 8002e98:	f3af 8000 	nop.w
 8002e9c:	f3af 8000 	nop.w

08002ea0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ea6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002eb8:	f001 fae0 	bl	800447c <xTaskIncrementTick>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ec2:	4b06      	ldr	r3, [pc, #24]	; (8002edc <SysTick_Handler+0x3c>)
 8002ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	e000ed04 	.word	0xe000ed04

08002ee0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <vPortSetupTimerInterrupt+0x30>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <vPortSetupTimerInterrupt+0x34>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ef0:	4a09      	ldr	r2, [pc, #36]	; (8002f18 <vPortSetupTimerInterrupt+0x38>)
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <vPortSetupTimerInterrupt+0x3c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	490a      	ldr	r1, [pc, #40]	; (8002f20 <vPortSetupTimerInterrupt+0x40>)
 8002ef8:	fba1 1303 	umull	r1, r3, r1, r3
 8002efc:	099b      	lsrs	r3, r3, #6
 8002efe:	3b01      	subs	r3, #1
 8002f00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f02:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <vPortSetupTimerInterrupt+0x30>)
 8002f04:	2207      	movs	r2, #7
 8002f06:	601a      	str	r2, [r3, #0]
}
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	e000e010 	.word	0xe000e010
 8002f14:	e000e018 	.word	0xe000e018
 8002f18:	e000e014 	.word	0xe000e014
 8002f1c:	2003ffc0 	.word	0x2003ffc0
 8002f20:	10624dd3 	.word	0x10624dd3

08002f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002f34 <vPortEnableVFP+0x10>
 8002f28:	6801      	ldr	r1, [r0, #0]
 8002f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002f2e:	6001      	str	r1, [r0, #0]
 8002f30:	4770      	bx	lr
 8002f32:	0000      	.short	0x0000
 8002f34:	e000ed88 	.word	0xe000ed88

08002f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002f3e:	f3ef 8305 	mrs	r3, IPSR
 8002f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2b0f      	cmp	r3, #15
 8002f48:	d913      	bls.n	8002f72 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002f4a:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <vPortValidateInterruptPriority+0x68>)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002f54:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <vPortValidateInterruptPriority+0x6c>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	7afa      	ldrb	r2, [r7, #11]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d209      	bcs.n	8002f72 <vPortValidateInterruptPriority+0x3a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f5e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	607b      	str	r3, [r7, #4]
 8002f70:	e7fe      	b.n	8002f70 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <vPortValidateInterruptPriority+0x70>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <vPortValidateInterruptPriority+0x74>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d909      	bls.n	8002f96 <vPortValidateInterruptPriority+0x5e>
 8002f82:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	e7fe      	b.n	8002f94 <vPortValidateInterruptPriority+0x5c>
	}
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000e3f0 	.word	0xe000e3f0
 8002fa4:	1ffe89d8 	.word	0x1ffe89d8
 8002fa8:	e000ed0c 	.word	0xe000ed0c
 8002fac:	1ffe89dc 	.word	0x1ffe89dc

08002fb0 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8002fb8:	f001 f9a4 	bl	8004304 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f003 fb63 	bl	8006688 <malloc>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002fc6:	f001 f9ab 	bl	8004320 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8002fca:	68fb      	ldr	r3, [r7, #12]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
	if( pv )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d006      	beq.n	8002ff0 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8002fe2:	f001 f98f 	bl	8004304 <vTaskSuspendAll>
		{
			free( pv );
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f003 fb56 	bl	8006698 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8002fec:	f001 f998 	bl	8004320 <xTaskResumeAll>
	}
}
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop

08002ff8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f103 0208 	add.w	r2, r3, #8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f103 0208 	add.w	r2, r3, #8
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f103 0208 	add.w	r2, r3, #8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop

08003038 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	601a      	str	r2, [r3, #0]
}
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop

08003098 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d103      	bne.n	80030b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	e00c      	b.n	80030d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3308      	adds	r3, #8
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	e002      	b.n	80030c6 <vListInsert+0x2e>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d9f6      	bls.n	80030c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	601a      	str	r2, [r3, #0]
}
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6892      	ldr	r2, [r2, #8]
 800311e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6852      	ldr	r2, [r2, #4]
 8003128:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	429a      	cmp	r2, r3
 8003132:	d103      	bne.n	800313c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	1e5a      	subs	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003170:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	e7fe      	b.n	8003182 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003184:	f7ff fdfe 	bl	8002d84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003190:	68f9      	ldr	r1, [r7, #12]
 8003192:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	441a      	add	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	3b01      	subs	r3, #1
 80031b6:	68f9      	ldr	r1, [r7, #12]
 80031b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	441a      	add	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	22ff      	movs	r2, #255	; 0xff
 80031c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	22ff      	movs	r2, #255	; 0xff
 80031d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d114      	bne.n	8003204 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d01a      	beq.n	8003218 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3310      	adds	r3, #16
 80031e6:	4618      	mov	r0, r3
 80031e8:	f001 faa8 	bl	800473c <xTaskRemoveFromEventList>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d012      	beq.n	8003218 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <xQueueGenericReset+0xcc>)
 80031f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	e009      	b.n	8003218 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	3310      	adds	r3, #16
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fef5 	bl	8002ff8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3324      	adds	r3, #36	; 0x24
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fef0 	bl	8002ff8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003218:	f7ff fde2 	bl	8002de0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800321c:	2301      	movs	r3, #1
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	e000ed04 	.word	0xe000ed04

0800322c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b08b      	sub	sp, #44	; 0x2c
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d109      	bne.n	8003254 <xQueueGenericCreate+0x28>
 8003240:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	e7fe      	b.n	8003252 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	e004      	b.n	800326a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	fb02 f303 	mul.w	r3, r2, r3
 8003268:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3354      	adds	r3, #84	; 0x54
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fe9e 	bl	8002fb0 <pvPortMalloc>
 8003274:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	3354      	adds	r3, #84	; 0x54
 8003284:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003286:	79fc      	ldrb	r4, [r7, #7]
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4623      	mov	r3, r4
 8003294:	f000 f806 	bl	80032a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003298:	69bb      	ldr	r3, [r7, #24]
	}
 800329a:	4618      	mov	r0, r3
 800329c:	3724      	adds	r7, #36	; 0x24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd90      	pop	{r4, r7, pc}
 80032a2:	bf00      	nop

080032a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d103      	bne.n	80032c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e002      	b.n	80032c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032d2:	69b8      	ldr	r0, [r7, #24]
 80032d4:	2101      	movs	r1, #1
 80032d6:	f7ff ff41 	bl	800315c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	2200      	movs	r2, #0
 80032e6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop

080032f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08e      	sub	sp, #56	; 0x38
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80032fe:	2300      	movs	r3, #0
 8003300:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <xQueueGenericSend+0x30>
 800330c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
 800331e:	e7fe      	b.n	800331e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <xQueueGenericSend+0x3e>
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <xQueueGenericSend+0x42>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <xQueueGenericSend+0x44>
 8003332:	2300      	movs	r3, #0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d109      	bne.n	800334c <xQueueGenericSend+0x5c>
 8003338:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	623b      	str	r3, [r7, #32]
 800334a:	e7fe      	b.n	800334a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d103      	bne.n	800335a <xQueueGenericSend+0x6a>
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <xQueueGenericSend+0x6e>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <xQueueGenericSend+0x70>
 800335e:	2300      	movs	r3, #0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d109      	bne.n	8003378 <xQueueGenericSend+0x88>
 8003364:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	e7fe      	b.n	8003376 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003378:	f001 fb88 	bl	8004a8c <xTaskGetSchedulerState>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <xQueueGenericSend+0x98>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <xQueueGenericSend+0x9c>
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <xQueueGenericSend+0x9e>
 800338c:	2300      	movs	r3, #0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <xQueueGenericSend+0xb6>
 8003392:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	e7fe      	b.n	80033a4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033a6:	f7ff fced 	bl	8002d84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d302      	bcc.n	80033bc <xQueueGenericSend+0xcc>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d148      	bne.n	800344e <xQueueGenericSend+0x15e>
			{
				traceQUEUE_SEND( pxQueue );

				#if ( configUSE_QUEUE_SETS == 1 )
				{
				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c

					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	f000 fbf4 	bl	8003bb4 <prvCopyDataToQueue>
 80033cc:	62b8      	str	r0, [r7, #40]	; 0x28

					if( pxQueue->pxQueueSetContainer != NULL )
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d017      	beq.n	8003406 <xQueueGenericSend+0x116>
					{
						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d104      	bne.n	80033e6 <xQueueGenericSend+0xf6>
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <xQueueGenericSend+0xf6>
 80033e2:	bf00      	nop
 80033e4:	e02f      	b.n	8003446 <xQueueGenericSend+0x156>
							/* Do not notify the queue set as an existing item
							was overwritten in the queue so the number of items
							in the queue has not changed. */
							mtCOVERAGE_TEST_MARKER();
						}
						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 80033e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033e8:	6839      	ldr	r1, [r7, #0]
 80033ea:	f000 fd61 	bl	8003eb0 <prvNotifyQueueSetContainer>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d028      	beq.n	8003446 <xQueueGenericSend+0x156>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
 80033f4:	4b4c      	ldr	r3, [pc, #304]	; (8003528 <xQueueGenericSend+0x238>)
 80033f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	e01f      	b.n	8003446 <xQueueGenericSend+0x156>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	2b00      	cmp	r3, #0
 800340c:	d010      	beq.n	8003430 <xQueueGenericSend+0x140>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	3324      	adds	r3, #36	; 0x24
 8003412:	4618      	mov	r0, r3
 8003414:	f001 f992 	bl	800473c <xTaskRemoveFromEventList>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d013      	beq.n	8003446 <xQueueGenericSend+0x156>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
 800341e:	4b42      	ldr	r3, [pc, #264]	; (8003528 <xQueueGenericSend+0x238>)
 8003420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	e00a      	b.n	8003446 <xQueueGenericSend+0x156>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	2b00      	cmp	r3, #0
 8003434:	d007      	beq.n	8003446 <xQueueGenericSend+0x156>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
 8003436:	4b3c      	ldr	r3, [pc, #240]	; (8003528 <xQueueGenericSend+0x238>)
 8003438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003446:	f7ff fccb 	bl	8002de0 <vPortExitCritical>
				return pdPASS;
 800344a:	2301      	movs	r3, #1
 800344c:	e067      	b.n	800351e <xQueueGenericSend+0x22e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d103      	bne.n	800345c <xQueueGenericSend+0x16c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003454:	f7ff fcc4 	bl	8002de0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003458:	2300      	movs	r3, #0
 800345a:	e060      	b.n	800351e <xQueueGenericSend+0x22e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800345c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <xQueueGenericSend+0x180>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003462:	f107 0310 	add.w	r3, r7, #16
 8003466:	4618      	mov	r0, r3
 8003468:	f001 f9cc 	bl	8004804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800346c:	2301      	movs	r3, #1
 800346e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003470:	f7ff fcb6 	bl	8002de0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003474:	f000 ff46 	bl	8004304 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003478:	f7ff fc84 	bl	8002d84 <vPortEnterCritical>
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003482:	b2db      	uxtb	r3, r3
 8003484:	b25b      	sxtb	r3, r3
 8003486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348a:	d103      	bne.n	8003494 <xQueueGenericSend+0x1a4>
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800349a:	b2db      	uxtb	r3, r3
 800349c:	b25b      	sxtb	r3, r3
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d103      	bne.n	80034ac <xQueueGenericSend+0x1bc>
 80034a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034ac:	f7ff fc98 	bl	8002de0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034b0:	f107 0210 	add.w	r2, r7, #16
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	f001 f9b9 	bl	8004830 <xTaskCheckForTimeOut>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d124      	bne.n	800350e <xQueueGenericSend+0x21e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034c6:	f000 fc7d 	bl	8003dc4 <prvIsQueueFull>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d018      	beq.n	8003502 <xQueueGenericSend+0x212>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	f103 0210 	add.w	r2, r3, #16
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	f001 f8e2 	bl	80046a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034e2:	f000 fbf9 	bl	8003cd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80034e6:	f000 ff1b 	bl	8004320 <xTaskResumeAll>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d115      	bne.n	800351c <xQueueGenericSend+0x22c>
				{
					portYIELD_WITHIN_API();
 80034f0:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <xQueueGenericSend+0x238>)
 80034f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	e00c      	b.n	800351c <xQueueGenericSend+0x22c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003502:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003504:	f000 fbe8 	bl	8003cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003508:	f000 ff0a 	bl	8004320 <xTaskResumeAll>
 800350c:	e74b      	b.n	80033a6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800350e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003510:	f000 fbe2 	bl	8003cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003514:	f000 ff04 	bl	8004320 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <xQueueGenericSend+0x22e>
		}
	} /*lint -restore */
 800351c:	e743      	b.n	80033a6 <xQueueGenericSend+0xb6>
}
 800351e:	4618      	mov	r0, r3
 8003520:	3738      	adds	r7, #56	; 0x38
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	e000ed04 	.word	0xe000ed04

0800352c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08e      	sub	sp, #56	; 0x38
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	2b00      	cmp	r3, #0
 8003542:	d109      	bne.n	8003558 <xQueueGenericSendFromISR+0x2c>
 8003544:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
 8003556:	e7fe      	b.n	8003556 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <xQueueGenericSendFromISR+0x3a>
 800355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <xQueueGenericSendFromISR+0x3e>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <xQueueGenericSendFromISR+0x40>
 800356a:	2300      	movs	r3, #0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d109      	bne.n	8003584 <xQueueGenericSendFromISR+0x58>
 8003570:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	623b      	str	r3, [r7, #32]
 8003582:	e7fe      	b.n	8003582 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d103      	bne.n	8003592 <xQueueGenericSendFromISR+0x66>
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <xQueueGenericSendFromISR+0x6a>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <xQueueGenericSendFromISR+0x6c>
 8003596:	2300      	movs	r3, #0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <xQueueGenericSendFromISR+0x84>
 800359c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e7fe      	b.n	80035ae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035b0:	f7ff fcc2 	bl	8002f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035b4:	f3ef 8211 	mrs	r2, BASEPRI
 80035b8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	61ba      	str	r2, [r7, #24]
 80035ca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d8:	429a      	cmp	r2, r3
 80035da:	d302      	bcc.n	80035e2 <xQueueGenericSendFromISR+0xb6>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d13e      	bne.n	8003660 <xQueueGenericSendFromISR+0x134>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	f000 fadf 	bl	8003bb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80035f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80035fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fe:	d124      	bne.n	800364a <xQueueGenericSendFromISR+0x11e>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8003600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00d      	beq.n	8003624 <xQueueGenericSendFromISR+0xf8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 8003608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800360a:	6839      	ldr	r1, [r7, #0]
 800360c:	f000 fc50 	bl	8003eb0 <prvNotifyQueueSetContainer>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d021      	beq.n	800365a <xQueueGenericSendFromISR+0x12e>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01e      	beq.n	800365a <xQueueGenericSendFromISR+0x12e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e01a      	b.n	800365a <xQueueGenericSendFromISR+0x12e>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	2b00      	cmp	r3, #0
 800362a:	d016      	beq.n	800365a <xQueueGenericSendFromISR+0x12e>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	3324      	adds	r3, #36	; 0x24
 8003630:	4618      	mov	r0, r3
 8003632:	f001 f883 	bl	800473c <xTaskRemoveFromEventList>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00e      	beq.n	800365a <xQueueGenericSendFromISR+0x12e>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <xQueueGenericSendFromISR+0x12e>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e007      	b.n	800365a <xQueueGenericSendFromISR+0x12e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800364a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800364e:	3301      	adds	r3, #1
 8003650:	b2db      	uxtb	r3, r3
 8003652:	b2da      	uxtb	r2, r3
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800365a:	2301      	movs	r3, #1
 800365c:	637b      	str	r3, [r7, #52]	; 0x34
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
 800365e:	e001      	b.n	8003664 <xQueueGenericSendFromISR+0x138>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003660:	2300      	movs	r3, #0
 8003662:	637b      	str	r3, [r7, #52]	; 0x34
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003670:	4618      	mov	r0, r3
 8003672:	3738      	adds	r7, #56	; 0x38
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08e      	sub	sp, #56	; 0x38
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <xQueueGiveFromISR+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800368c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	623b      	str	r3, [r7, #32]
 800369e:	e7fe      	b.n	800369e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80036a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d009      	beq.n	80036bc <xQueueGiveFromISR+0x44>
 80036a8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	e7fe      	b.n	80036ba <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d103      	bne.n	80036cc <xQueueGiveFromISR+0x54>
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <xQueueGiveFromISR+0x58>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <xQueueGiveFromISR+0x5a>
 80036d0:	2300      	movs	r3, #0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <xQueueGiveFromISR+0x72>
 80036d6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	61bb      	str	r3, [r7, #24]
 80036e8:	e7fe      	b.n	80036e8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036ea:	f7ff fc25 	bl	8002f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036ee:	f3ef 8211 	mrs	r2, BASEPRI
 80036f2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	617a      	str	r2, [r7, #20]
 8003704:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003706:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	429a      	cmp	r2, r3
 8003718:	d93d      	bls.n	8003796 <xQueueGiveFromISR+0x11e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800372c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d124      	bne.n	8003780 <xQueueGiveFromISR+0x108>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 8003736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00d      	beq.n	800375a <xQueueGiveFromISR+0xe2>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 800373e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003740:	2100      	movs	r1, #0
 8003742:	f000 fbb5 	bl	8003eb0 <prvNotifyQueueSetContainer>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d021      	beq.n	8003790 <xQueueGiveFromISR+0x118>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01e      	beq.n	8003790 <xQueueGiveFromISR+0x118>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2201      	movs	r2, #1
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	e01a      	b.n	8003790 <xQueueGiveFromISR+0x118>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	2b00      	cmp	r3, #0
 8003760:	d016      	beq.n	8003790 <xQueueGiveFromISR+0x118>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	3324      	adds	r3, #36	; 0x24
 8003766:	4618      	mov	r0, r3
 8003768:	f000 ffe8 	bl	800473c <xTaskRemoveFromEventList>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00e      	beq.n	8003790 <xQueueGiveFromISR+0x118>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00b      	beq.n	8003790 <xQueueGiveFromISR+0x118>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e007      	b.n	8003790 <xQueueGiveFromISR+0x118>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003784:	3301      	adds	r3, #1
 8003786:	b2db      	uxtb	r3, r3
 8003788:	b2da      	uxtb	r2, r3
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003790:	2301      	movs	r3, #1
 8003792:	637b      	str	r3, [r7, #52]	; 0x34
 8003794:	e001      	b.n	800379a <xQueueGiveFromISR+0x122>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003796:	2300      	movs	r3, #0
 8003798:	637b      	str	r3, [r7, #52]	; 0x34
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3738      	adds	r7, #56	; 0x38
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop

080037b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08c      	sub	sp, #48	; 0x30
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80037bc:	2300      	movs	r3, #0
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <xQueueReceive+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037ca:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	623b      	str	r3, [r7, #32]
 80037dc:	e7fe      	b.n	80037dc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d103      	bne.n	80037ec <xQueueReceive+0x3c>
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <xQueueReceive+0x40>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <xQueueReceive+0x42>
 80037f0:	2300      	movs	r3, #0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <xQueueReceive+0x5a>
 80037f6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	e7fe      	b.n	8003808 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800380a:	f001 f93f 	bl	8004a8c <xTaskGetSchedulerState>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d102      	bne.n	800381a <xQueueReceive+0x6a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <xQueueReceive+0x6e>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <xQueueReceive+0x70>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d109      	bne.n	8003838 <xQueueReceive+0x88>
 8003824:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	e7fe      	b.n	8003836 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003838:	f7ff faa4 	bl	8002d84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01f      	beq.n	8003888 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	f000 fa1e 	bl	8003c8c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	1e5a      	subs	r2, r3, #1
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00f      	beq.n	8003880 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	3310      	adds	r3, #16
 8003864:	4618      	mov	r0, r3
 8003866:	f000 ff69 	bl	800473c <xTaskRemoveFromEventList>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d007      	beq.n	8003880 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003870:	4b3e      	ldr	r3, [pc, #248]	; (800396c <xQueueReceive+0x1bc>)
 8003872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003880:	f7ff faae 	bl	8002de0 <vPortExitCritical>
				return pdPASS;
 8003884:	2301      	movs	r3, #1
 8003886:	e06d      	b.n	8003964 <xQueueReceive+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800388e:	f7ff faa7 	bl	8002de0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003892:	2300      	movs	r3, #0
 8003894:	e066      	b.n	8003964 <xQueueReceive+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d106      	bne.n	80038aa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800389c:	f107 0310 	add.w	r3, r7, #16
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 ffaf 	bl	8004804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038a6:	2301      	movs	r3, #1
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038aa:	f7ff fa99 	bl	8002de0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038ae:	f000 fd29 	bl	8004304 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038b2:	f7ff fa67 	bl	8002d84 <vPortEnterCritical>
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	b25b      	sxtb	r3, r3
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d103      	bne.n	80038ce <xQueueReceive+0x11e>
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	b25b      	sxtb	r3, r3
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d103      	bne.n	80038e6 <xQueueReceive+0x136>
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038e6:	f7ff fa7b 	bl	8002de0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038ea:	f107 0210 	add.w	r2, r7, #16
 80038ee:	1d3b      	adds	r3, r7, #4
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	f000 ff9c 	bl	8004830 <xTaskCheckForTimeOut>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d124      	bne.n	8003948 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003900:	f000 fa4a 	bl	8003d98 <prvIsQueueEmpty>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d018      	beq.n	800393c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4610      	mov	r0, r2
 8003914:	4619      	mov	r1, r3
 8003916:	f000 fec5 	bl	80046a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800391a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800391c:	f000 f9dc 	bl	8003cd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003920:	f000 fcfe 	bl	8004320 <xTaskResumeAll>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d11b      	bne.n	8003962 <xQueueReceive+0x1b2>
				{
					portYIELD_WITHIN_API();
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <xQueueReceive+0x1bc>)
 800392c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	e012      	b.n	8003962 <xQueueReceive+0x1b2>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800393c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800393e:	f000 f9cb 	bl	8003cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003942:	f000 fced 	bl	8004320 <xTaskResumeAll>
 8003946:	e777      	b.n	8003838 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800394a:	f000 f9c5 	bl	8003cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800394e:	f000 fce7 	bl	8004320 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003954:	f000 fa20 	bl	8003d98 <prvIsQueueEmpty>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <xQueueReceive+0x1b2>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <xQueueReceive+0x1b4>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
 8003962:	e769      	b.n	8003838 <xQueueReceive+0x88>
}
 8003964:	4618      	mov	r0, r3
 8003966:	3730      	adds	r7, #48	; 0x30
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	e000ed04 	.word	0xe000ed04

08003970 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08e      	sub	sp, #56	; 0x38
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800397a:	2300      	movs	r3, #0
 800397c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003982:	2300      	movs	r3, #0
 8003984:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d109      	bne.n	80039a0 <xQueueSemaphoreTake+0x30>
 800398c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	623b      	str	r3, [r7, #32]
 800399e:	e7fe      	b.n	800399e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d009      	beq.n	80039bc <xQueueSemaphoreTake+0x4c>
 80039a8:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	e7fe      	b.n	80039ba <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039bc:	f001 f866 	bl	8004a8c <xTaskGetSchedulerState>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <xQueueSemaphoreTake+0x5c>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <xQueueSemaphoreTake+0x60>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <xQueueSemaphoreTake+0x62>
 80039d0:	2300      	movs	r3, #0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <xQueueSemaphoreTake+0x7a>
 80039d6:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	e7fe      	b.n	80039e8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039ea:	f7ff f9cb 	bl	8002d84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d024      	beq.n	8003a44 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	1e5a      	subs	r2, r3, #1
 80039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a00:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d104      	bne.n	8003a14 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003a0a:	f001 f9ff 	bl	8004e0c <pvTaskIncrementMutexHeldCount>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a12:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00f      	beq.n	8003a3c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	3310      	adds	r3, #16
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fe8b 	bl	800473c <xTaskRemoveFromEventList>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d007      	beq.n	8003a3c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a2c:	4b54      	ldr	r3, [pc, #336]	; (8003b80 <xQueueSemaphoreTake+0x210>)
 8003a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a3c:	f7ff f9d0 	bl	8002de0 <vPortExitCritical>
				return pdPASS;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e099      	b.n	8003b78 <xQueueSemaphoreTake+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d110      	bne.n	8003a6c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d009      	beq.n	8003a64 <xQueueSemaphoreTake+0xf4>
 8003a50:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	e7fe      	b.n	8003a62 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003a64:	f7ff f9bc 	bl	8002de0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e085      	b.n	8003b78 <xQueueSemaphoreTake+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a72:	f107 030c 	add.w	r3, r7, #12
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fec4 	bl	8004804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a80:	f7ff f9ae 	bl	8002de0 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a84:	f000 fc3e 	bl	8004304 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a88:	f7ff f97c 	bl	8002d84 <vPortEnterCritical>
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	b25b      	sxtb	r3, r3
 8003a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9a:	d103      	bne.n	8003aa4 <xQueueSemaphoreTake+0x134>
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	b25b      	sxtb	r3, r3
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab2:	d103      	bne.n	8003abc <xQueueSemaphoreTake+0x14c>
 8003ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003abc:	f7ff f990 	bl	8002de0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ac0:	f107 020c 	add.w	r2, r7, #12
 8003ac4:	463b      	mov	r3, r7
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f000 feb1 	bl	8004830 <xTaskCheckForTimeOut>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d132      	bne.n	8003b3a <xQueueSemaphoreTake+0x1ca>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ad4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ad6:	f000 f95f 	bl	8003d98 <prvIsQueueEmpty>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d026      	beq.n	8003b2e <xQueueSemaphoreTake+0x1be>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <xQueueSemaphoreTake+0x18c>
					{
						taskENTER_CRITICAL();
 8003ae8:	f7ff f94c 	bl	8002d84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 ffe9 	bl	8004ac8 <xTaskPriorityInherit>
 8003af6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003af8:	f7ff f972 	bl	8002de0 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afe:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	f000 fdcc 	bl	80046a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b0e:	f000 f8e3 	bl	8003cd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b12:	f000 fc05 	bl	8004320 <xTaskResumeAll>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d12c      	bne.n	8003b76 <xQueueSemaphoreTake+0x206>
				{
					portYIELD_WITHIN_API();
 8003b1c:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <xQueueSemaphoreTake+0x210>)
 8003b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	f3bf 8f6f 	isb	sy
 8003b2c:	e023      	b.n	8003b76 <xQueueSemaphoreTake+0x206>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003b2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b30:	f000 f8d2 	bl	8003cd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b34:	f000 fbf4 	bl	8004320 <xTaskResumeAll>
 8003b38:	e757      	b.n	80039ea <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003b3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b3c:	f000 f8cc 	bl	8003cd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b40:	f000 fbee 	bl	8004320 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b46:	f000 f927 	bl	8003d98 <prvIsQueueEmpty>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d012      	beq.n	8003b76 <xQueueSemaphoreTake+0x206>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00d      	beq.n	8003b72 <xQueueSemaphoreTake+0x202>
					{
						taskENTER_CRITICAL();
 8003b56:	f7ff f915 	bl	8002d84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003b5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b5c:	f000 f812 	bl	8003b84 <prvGetDisinheritPriorityAfterTimeout>
 8003b60:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	4618      	mov	r0, r3
 8003b68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b6a:	f001 f8b5 	bl	8004cd8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003b6e:	f7ff f937 	bl	8002de0 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e000      	b.n	8003b78 <xQueueSemaphoreTake+0x208>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
 8003b76:	e738      	b.n	80039ea <xQueueSemaphoreTake+0x7a>
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3738      	adds	r7, #56	; 0x38
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	e000ed04 	.word	0xe000ed04

08003b84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d006      	beq.n	8003ba2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1c3 0305 	rsb	r3, r3, #5
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	e001      	b.n	8003ba6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
	}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d14f      	bne.n	8003c7a <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fff4 	bl	8004bcc <xTaskPriorityDisinherit>
 8003be4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	e045      	b.n	8003c7a <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d11a      	bne.n	8003c2a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	461a      	mov	r2, r3
 8003c02:	f002 fd51 	bl	80066a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	441a      	add	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d32c      	bcc.n	8003c7a <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	605a      	str	r2, [r3, #4]
 8003c28:	e027      	b.n	8003c7a <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	4610      	mov	r0, r2
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	461a      	mov	r2, r3
 8003c38:	f002 fd36 	bl	80066a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	425b      	negs	r3, r3
 8003c46:	441a      	add	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d207      	bcs.n	8003c68 <prvCopyDataToQueue+0xb4>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	425b      	negs	r3, r3
 8003c62:	441a      	add	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d105      	bne.n	8003c7a <prvCopyDataToQueue+0xc6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c82:	697b      	ldr	r3, [r7, #20]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d019      	beq.n	8003cd2 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	441a      	add	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d303      	bcc.n	8003cc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	6838      	ldr	r0, [r7, #0]
 8003cca:	4611      	mov	r1, r2
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f002 fceb 	bl	80066a8 <memcpy>
	}
}
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ce0:	f7ff f850 	bl	8002d84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cec:	e021      	b.n	8003d32 <prvUnlockQueue+0x5a>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	f000 f8d9 	bl	8003eb0 <prvNotifyQueueSetContainer>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d012      	beq.n	8003d2a <prvUnlockQueue+0x52>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8003d04:	f000 fe04 	bl	8004910 <vTaskMissedYield>
 8003d08:	e00f      	b.n	8003d2a <prvUnlockQueue+0x52>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <prvUnlockQueue+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3324      	adds	r3, #36	; 0x24
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fd10 	bl	800473c <xTaskRemoveFromEventList>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <prvUnlockQueue+0x52>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8003d22:	f000 fdf5 	bl	8004910 <vTaskMissedYield>
 8003d26:	e000      	b.n	8003d2a <prvUnlockQueue+0x52>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
 8003d28:	e007      	b.n	8003d3a <prvUnlockQueue+0x62>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	dcd9      	bgt.n	8003cee <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	22ff      	movs	r2, #255	; 0xff
 8003d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003d42:	f7ff f84d 	bl	8002de0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d46:	f7ff f81d 	bl	8002d84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d52:	e013      	b.n	8003d7c <prvUnlockQueue+0xa4>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00e      	beq.n	8003d7a <prvUnlockQueue+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3310      	adds	r3, #16
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fceb 	bl	800473c <xTaskRemoveFromEventList>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 8003d6c:	f000 fdd0 	bl	8004910 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d70:	7bbb      	ldrb	r3, [r7, #14]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	73bb      	strb	r3, [r7, #14]
 8003d78:	e000      	b.n	8003d7c <prvUnlockQueue+0xa4>
			}
			else
			{
				break;
 8003d7a:	e003      	b.n	8003d84 <prvUnlockQueue+0xac>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	dce7      	bgt.n	8003d54 <prvUnlockQueue+0x7c>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	22ff      	movs	r2, #255	; 0xff
 8003d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d8c:	f7ff f828 	bl	8002de0 <vPortExitCritical>
}
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop

08003d98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003da0:	f7fe fff0 	bl	8002d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d102      	bne.n	8003db2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003dac:	2301      	movs	r3, #1
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	e001      	b.n	8003db6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003db6:	f7ff f813 	bl	8002de0 <vPortExitCritical>

	return xReturn;
 8003dba:	68fb      	ldr	r3, [r7, #12]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dcc:	f7fe ffda 	bl	8002d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d102      	bne.n	8003de2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e001      	b.n	8003de6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003de6:	f7fe fffb 	bl	8002de0 <vPortExitCritical>

	return xReturn;
 8003dea:	68fb      	ldr	r3, [r7, #12]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	e014      	b.n	8003e2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e04:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <vQueueAddToRegistry+0x4c>)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10b      	bne.n	8003e28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e10:	490b      	ldr	r1, [pc, #44]	; (8003e40 <vQueueAddToRegistry+0x4c>)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e1a:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <vQueueAddToRegistry+0x4c>)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e26:	e005      	b.n	8003e34 <vQueueAddToRegistry+0x40>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b07      	cmp	r3, #7
 8003e32:	d9e7      	bls.n	8003e04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	1ffe8b58 	.word	0x1ffe8b58

08003e44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e54:	f7fe ff96 	bl	8002d84 <vPortEnterCritical>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	b25b      	sxtb	r3, r3
 8003e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e66:	d103      	bne.n	8003e70 <vQueueWaitForMessageRestricted+0x2c>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	b25b      	sxtb	r3, r3
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7e:	d103      	bne.n	8003e88 <vQueueWaitForMessageRestricted+0x44>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e88:	f7fe ffaa 	bl	8002de0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d106      	bne.n	8003ea2 <vQueueWaitForMessageRestricted+0x5e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	3324      	adds	r3, #36	; 0x24
 8003e98:	4618      	mov	r0, r3
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	f000 fc23 	bl	80046e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ea2:	6978      	ldr	r0, [r7, #20]
 8003ea4:	f7ff ff18 	bl	8003cd8 <prvUnlockQueue>
	}
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop

08003eb0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ebe:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <prvNotifyQueueSetContainer+0x2e>
 8003eca:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	e7fe      	b.n	8003edc <prvNotifyQueueSetContainer+0x2c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d309      	bcc.n	8003efe <prvNotifyQueueSetContainer+0x4e>
 8003eea:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	e7fe      	b.n	8003efc <prvNotifyQueueSetContainer+0x4c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d226      	bcs.n	8003f58 <prvNotifyQueueSetContainer+0xa8>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f10:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 8003f12:	1d3b      	adds	r3, r7, #4
 8003f14:	69b8      	ldr	r0, [r7, #24]
 8003f16:	4619      	mov	r1, r3
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	f7ff fe4b 	bl	8003bb4 <prvCopyDataToQueue>
 8003f1e:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 8003f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f28:	d10e      	bne.n	8003f48 <prvNotifyQueueSetContainer+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d012      	beq.n	8003f58 <prvNotifyQueueSetContainer+0xa8>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	3324      	adds	r3, #36	; 0x24
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fc00 	bl	800473c <xTaskRemoveFromEventList>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <prvNotifyQueueSetContainer+0xa8>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 8003f42:	2301      	movs	r3, #1
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	e007      	b.n	8003f58 <prvNotifyQueueSetContainer+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f56:	e7ff      	b.n	8003f58 <prvNotifyQueueSetContainer+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f58:	69fb      	ldr	r3, [r7, #28]
	}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3720      	adds	r7, #32
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop

08003f64 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08c      	sub	sp, #48	; 0x30
 8003f68:	af04      	add	r7, sp, #16
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff f819 	bl	8002fb0 <pvPortMalloc>
 8003f7e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00e      	beq.n	8003fa4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f86:	2070      	movs	r0, #112	; 0x70
 8003f88:	f7ff f812 	bl	8002fb0 <pvPortMalloc>
 8003f8c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
 8003f9a:	e005      	b.n	8003fa8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f9c:	6978      	ldr	r0, [r7, #20]
 8003f9e:	f7ff f819 	bl	8002fd4 <vPortFree>
 8003fa2:	e001      	b.n	8003fa8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d013      	beq.n	8003fd6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	9302      	str	r3, [sp, #8]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	9303      	str	r3, [sp, #12]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	f000 f80f 	bl	8003fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fca:	69f8      	ldr	r0, [r7, #28]
 8003fcc:	f000 f8ae 	bl	800412c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	e002      	b.n	8003fdc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003fdc:	69bb      	ldr	r3, [r7, #24]
	}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3720      	adds	r7, #32
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop

08003fe8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4610      	mov	r0, r2
 8004000:	21a5      	movs	r1, #165	; 0xa5
 8004002:	461a      	mov	r2, r3
 8004004:	f002 fb5b 	bl	80066be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004012:	3b01      	subs	r3, #1
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	f023 0307 	bic.w	r3, r3, #7
 8004020:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	2b00      	cmp	r3, #0
 800402a:	d009      	beq.n	8004040 <prvInitialiseNewTask+0x58>
 800402c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e7fe      	b.n	800403e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01e      	beq.n	8004084 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	e013      	b.n	8004074 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4413      	add	r3, r2
 8004052:	7819      	ldrb	r1, [r3, #0]
 8004054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	4413      	add	r3, r2
 800405a:	3330      	adds	r3, #48	; 0x30
 800405c:	460a      	mov	r2, r1
 800405e:	711a      	strb	r2, [r3, #4]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	4413      	add	r3, r2
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d100      	bne.n	800406e <prvInitialiseNewTask+0x86>
			{
				break;
 800406c:	e005      	b.n	800407a <prvInitialiseNewTask+0x92>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	3301      	adds	r3, #1
 8004072:	61fb      	str	r3, [r7, #28]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b0f      	cmp	r3, #15
 8004078:	d9e8      	bls.n	800404c <prvInitialiseNewTask+0x64>
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004082:	e003      	b.n	800408c <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408e:	2b04      	cmp	r3, #4
 8004090:	d901      	bls.n	8004096 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004092:	2304      	movs	r3, #4
 8004094:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800409a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	2200      	movs	r2, #0
 80040a6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	3304      	adds	r3, #4
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe ffc3 	bl	8003038 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	3318      	adds	r3, #24
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fe ffbe 	bl	8003038 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	f1c3 0205 	rsb	r2, r3, #5
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 80040d2:	2300      	movs	r3, #0
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	e009      	b.n	80040ec <prvInitialiseNewTask+0x104>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 80040d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3314      	adds	r3, #20
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	2200      	movs	r2, #0
 80040e4:	605a      	str	r2, [r3, #4]
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	3301      	adds	r3, #1
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d9f2      	bls.n	80040d8 <prvInitialiseNewTask+0xf0>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	2200      	movs	r2, #0
 80040f6:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	2200      	movs	r2, #0
 8004104:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004108:	69b8      	ldr	r0, [r7, #24]
 800410a:	68f9      	ldr	r1, [r7, #12]
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	f7fe fd13 	bl	8002b38 <pxPortInitialiseStack>
 8004112:	4602      	mov	r2, r0
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004122:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004124:	3720      	adds	r7, #32
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop

0800412c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004134:	f7fe fe26 	bl	8002d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004138:	4b2d      	ldr	r3, [pc, #180]	; (80041f0 <prvAddNewTaskToReadyList+0xc4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3301      	adds	r3, #1
 800413e:	4a2c      	ldr	r2, [pc, #176]	; (80041f0 <prvAddNewTaskToReadyList+0xc4>)
 8004140:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004142:	4b2c      	ldr	r3, [pc, #176]	; (80041f4 <prvAddNewTaskToReadyList+0xc8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800414a:	4a2a      	ldr	r2, [pc, #168]	; (80041f4 <prvAddNewTaskToReadyList+0xc8>)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004150:	4b27      	ldr	r3, [pc, #156]	; (80041f0 <prvAddNewTaskToReadyList+0xc4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d110      	bne.n	800417a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004158:	f000 fbfe 	bl	8004958 <prvInitialiseTaskLists>
 800415c:	e00d      	b.n	800417a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800415e:	4b26      	ldr	r3, [pc, #152]	; (80041f8 <prvAddNewTaskToReadyList+0xcc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004166:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <prvAddNewTaskToReadyList+0xc8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	429a      	cmp	r2, r3
 8004172:	d802      	bhi.n	800417a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004174:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <prvAddNewTaskToReadyList+0xc8>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800417a:	4b20      	ldr	r3, [pc, #128]	; (80041fc <prvAddNewTaskToReadyList+0xd0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3301      	adds	r3, #1
 8004180:	4a1e      	ldr	r2, [pc, #120]	; (80041fc <prvAddNewTaskToReadyList+0xd0>)
 8004182:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004184:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <prvAddNewTaskToReadyList+0xd0>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	461a      	mov	r2, r3
 8004192:	2301      	movs	r3, #1
 8004194:	fa03 f202 	lsl.w	r2, r3, r2
 8004198:	4b19      	ldr	r3, [pc, #100]	; (8004200 <prvAddNewTaskToReadyList+0xd4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4313      	orrs	r3, r2
 800419e:	4a18      	ldr	r2, [pc, #96]	; (8004200 <prvAddNewTaskToReadyList+0xd4>)
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4a15      	ldr	r2, [pc, #84]	; (8004204 <prvAddNewTaskToReadyList+0xd8>)
 80041b0:	441a      	add	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3304      	adds	r3, #4
 80041b6:	4610      	mov	r0, r2
 80041b8:	4619      	mov	r1, r3
 80041ba:	f7fe ff49 	bl	8003050 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041be:	f7fe fe0f 	bl	8002de0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041c2:	4b0d      	ldr	r3, [pc, #52]	; (80041f8 <prvAddNewTaskToReadyList+0xcc>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00e      	beq.n	80041e8 <prvAddNewTaskToReadyList+0xbc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041ca:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <prvAddNewTaskToReadyList+0xc8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d207      	bcs.n	80041e8 <prvAddNewTaskToReadyList+0xbc>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <prvAddNewTaskToReadyList+0xdc>)
 80041da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	1ffe8ab8 	.word	0x1ffe8ab8
 80041f4:	1ffe89e0 	.word	0x1ffe89e0
 80041f8:	1ffe8ac4 	.word	0x1ffe8ac4
 80041fc:	1ffe8ad4 	.word	0x1ffe8ad4
 8004200:	1ffe8ac0 	.word	0x1ffe8ac0
 8004204:	1ffe89e4 	.word	0x1ffe89e4
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d016      	beq.n	800424c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800421e:	4b12      	ldr	r3, [pc, #72]	; (8004268 <vTaskDelay+0x5c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <vTaskDelay+0x2e>
 8004226:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	e7fe      	b.n	8004238 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800423a:	f000 f863 	bl	8004304 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	2100      	movs	r1, #0
 8004242:	f000 fdf7 	bl	8004e34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004246:	f000 f86b 	bl	8004320 <xTaskResumeAll>
 800424a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d107      	bne.n	8004262 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <vTaskDelay+0x60>)
 8004254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	1ffe8ae0 	.word	0x1ffe8ae0
 800426c:	e000ed04 	.word	0xe000ed04

08004270 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004276:	2300      	movs	r3, #0
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	4b1c      	ldr	r3, [pc, #112]	; (80042ec <vTaskStartScheduler+0x7c>)
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	481c      	ldr	r0, [pc, #112]	; (80042f0 <vTaskStartScheduler+0x80>)
 8004280:	491c      	ldr	r1, [pc, #112]	; (80042f4 <vTaskStartScheduler+0x84>)
 8004282:	2282      	movs	r2, #130	; 0x82
 8004284:	2300      	movs	r3, #0
 8004286:	f7ff fe6d 	bl	8003f64 <xTaskCreate>
 800428a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d102      	bne.n	8004298 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004292:	f000 fe39 	bl	8004f08 <xTimerCreateTimerTask>
 8004296:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d115      	bne.n	80042ca <vTaskStartScheduler+0x5a>
 800429e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <vTaskStartScheduler+0x88>)
 80042b2:	f04f 32ff 	mov.w	r2, #4294967295
 80042b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042b8:	4b10      	ldr	r3, [pc, #64]	; (80042fc <vTaskStartScheduler+0x8c>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <vTaskStartScheduler+0x90>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042c4:	f7fe fcc0 	bl	8002c48 <xPortStartScheduler>
 80042c8:	e00d      	b.n	80042e6 <vTaskStartScheduler+0x76>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d109      	bne.n	80042e6 <vTaskStartScheduler+0x76>
 80042d2:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	e7fe      	b.n	80042e4 <vTaskStartScheduler+0x74>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	1ffe8adc 	.word	0x1ffe8adc
 80042f0:	08004929 	.word	0x08004929
 80042f4:	080069a0 	.word	0x080069a0
 80042f8:	1ffe8ad8 	.word	0x1ffe8ad8
 80042fc:	1ffe8ac4 	.word	0x1ffe8ac4
 8004300:	1ffe8abc 	.word	0x1ffe8abc

08004304 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004308:	4b04      	ldr	r3, [pc, #16]	; (800431c <vTaskSuspendAll+0x18>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3301      	adds	r3, #1
 800430e:	4a03      	ldr	r2, [pc, #12]	; (800431c <vTaskSuspendAll+0x18>)
 8004310:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	1ffe8ae0 	.word	0x1ffe8ae0

08004320 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800432a:	2300      	movs	r3, #0
 800432c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800432e:	4b42      	ldr	r3, [pc, #264]	; (8004438 <xTaskResumeAll+0x118>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <xTaskResumeAll+0x2a>
 8004336:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	e7fe      	b.n	8004348 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800434a:	f7fe fd1b 	bl	8002d84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800434e:	4b3a      	ldr	r3, [pc, #232]	; (8004438 <xTaskResumeAll+0x118>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3b01      	subs	r3, #1
 8004354:	4a38      	ldr	r2, [pc, #224]	; (8004438 <xTaskResumeAll+0x118>)
 8004356:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004358:	4b37      	ldr	r3, [pc, #220]	; (8004438 <xTaskResumeAll+0x118>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d163      	bne.n	8004428 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004360:	4b36      	ldr	r3, [pc, #216]	; (800443c <xTaskResumeAll+0x11c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d05f      	beq.n	8004428 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004368:	e030      	b.n	80043cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800436a:	4b35      	ldr	r3, [pc, #212]	; (8004440 <xTaskResumeAll+0x120>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3318      	adds	r3, #24
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe fec6 	bl	8003108 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3304      	adds	r3, #4
 8004380:	4618      	mov	r0, r3
 8004382:	f7fe fec1 	bl	8003108 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	461a      	mov	r2, r3
 800438c:	2301      	movs	r3, #1
 800438e:	fa03 f202 	lsl.w	r2, r3, r2
 8004392:	4b2c      	ldr	r3, [pc, #176]	; (8004444 <xTaskResumeAll+0x124>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4313      	orrs	r3, r2
 8004398:	4a2a      	ldr	r2, [pc, #168]	; (8004444 <xTaskResumeAll+0x124>)
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4a27      	ldr	r2, [pc, #156]	; (8004448 <xTaskResumeAll+0x128>)
 80043aa:	441a      	add	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4610      	mov	r0, r2
 80043b2:	4619      	mov	r1, r3
 80043b4:	f7fe fe4c 	bl	8003050 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043bc:	4b23      	ldr	r3, [pc, #140]	; (800444c <xTaskResumeAll+0x12c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d302      	bcc.n	80043cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80043c6:	4b22      	ldr	r3, [pc, #136]	; (8004450 <xTaskResumeAll+0x130>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043cc:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <xTaskResumeAll+0x120>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1ca      	bne.n	800436a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043da:	f000 fb37 	bl	8004a4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <xTaskResumeAll+0x134>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d010      	beq.n	800440c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043ea:	f000 f847 	bl	800447c <xTaskIncrementTick>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80043f4:	4b16      	ldr	r3, [pc, #88]	; (8004450 <xTaskResumeAll+0x130>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f1      	bne.n	80043ea <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <xTaskResumeAll+0x134>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <xTaskResumeAll+0x130>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d009      	beq.n	8004428 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004414:	2301      	movs	r3, #1
 8004416:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <xTaskResumeAll+0x138>)
 800441a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004428:	f7fe fcda 	bl	8002de0 <vPortExitCritical>

	return xAlreadyYielded;
 800442c:	68bb      	ldr	r3, [r7, #8]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	1ffe8ae0 	.word	0x1ffe8ae0
 800443c:	1ffe8ab8 	.word	0x1ffe8ab8
 8004440:	1ffe8a78 	.word	0x1ffe8a78
 8004444:	1ffe8ac0 	.word	0x1ffe8ac0
 8004448:	1ffe89e4 	.word	0x1ffe89e4
 800444c:	1ffe89e0 	.word	0x1ffe89e0
 8004450:	1ffe8acc 	.word	0x1ffe8acc
 8004454:	1ffe8ac8 	.word	0x1ffe8ac8
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004462:	4b05      	ldr	r3, [pc, #20]	; (8004478 <xTaskGetTickCount+0x1c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004468:	687b      	ldr	r3, [r7, #4]
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	1ffe8abc 	.word	0x1ffe8abc

0800447c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004486:	4b4f      	ldr	r3, [pc, #316]	; (80045c4 <xTaskIncrementTick+0x148>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	f040 8089 	bne.w	80045a2 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004490:	4b4d      	ldr	r3, [pc, #308]	; (80045c8 <xTaskIncrementTick+0x14c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3301      	adds	r3, #1
 8004496:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004498:	4a4b      	ldr	r2, [pc, #300]	; (80045c8 <xTaskIncrementTick+0x14c>)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d11f      	bne.n	80044e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80044a4:	4b49      	ldr	r3, [pc, #292]	; (80045cc <xTaskIncrementTick+0x150>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <xTaskIncrementTick+0x46>
 80044ae:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	e7fe      	b.n	80044c0 <xTaskIncrementTick+0x44>
 80044c2:	4b42      	ldr	r3, [pc, #264]	; (80045cc <xTaskIncrementTick+0x150>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	4b41      	ldr	r3, [pc, #260]	; (80045d0 <xTaskIncrementTick+0x154>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a3f      	ldr	r2, [pc, #252]	; (80045cc <xTaskIncrementTick+0x150>)
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4a3f      	ldr	r2, [pc, #252]	; (80045d0 <xTaskIncrementTick+0x154>)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b3f      	ldr	r3, [pc, #252]	; (80045d4 <xTaskIncrementTick+0x158>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3301      	adds	r3, #1
 80044dc:	4a3d      	ldr	r2, [pc, #244]	; (80045d4 <xTaskIncrementTick+0x158>)
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	f000 fab4 	bl	8004a4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044e4:	4b3c      	ldr	r3, [pc, #240]	; (80045d8 <xTaskIncrementTick+0x15c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d34a      	bcc.n	8004584 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044ee:	4b37      	ldr	r3, [pc, #220]	; (80045cc <xTaskIncrementTick+0x150>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d104      	bne.n	8004502 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044f8:	4b37      	ldr	r3, [pc, #220]	; (80045d8 <xTaskIncrementTick+0x15c>)
 80044fa:	f04f 32ff 	mov.w	r2, #4294967295
 80044fe:	601a      	str	r2, [r3, #0]
					break;
 8004500:	e040      	b.n	8004584 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004502:	4b32      	ldr	r3, [pc, #200]	; (80045cc <xTaskIncrementTick+0x150>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	429a      	cmp	r2, r3
 8004518:	d203      	bcs.n	8004522 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800451a:	4a2f      	ldr	r2, [pc, #188]	; (80045d8 <xTaskIncrementTick+0x15c>)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004520:	e030      	b.n	8004584 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	3304      	adds	r3, #4
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe fdee 	bl	8003108 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	2b00      	cmp	r3, #0
 8004532:	d004      	beq.n	800453e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	3318      	adds	r3, #24
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe fde5 	bl	8003108 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	461a      	mov	r2, r3
 8004544:	2301      	movs	r3, #1
 8004546:	fa03 f202 	lsl.w	r2, r3, r2
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <xTaskIncrementTick+0x160>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4313      	orrs	r3, r2
 8004550:	4a22      	ldr	r2, [pc, #136]	; (80045dc <xTaskIncrementTick+0x160>)
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4a1f      	ldr	r2, [pc, #124]	; (80045e0 <xTaskIncrementTick+0x164>)
 8004562:	441a      	add	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	3304      	adds	r3, #4
 8004568:	4610      	mov	r0, r2
 800456a:	4619      	mov	r1, r3
 800456c:	f7fe fd70 	bl	8003050 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004574:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <xTaskIncrementTick+0x168>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	429a      	cmp	r2, r3
 800457c:	d301      	bcc.n	8004582 <xTaskIncrementTick+0x106>
						{
							xSwitchRequired = pdTRUE;
 800457e:	2301      	movs	r3, #1
 8004580:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
 8004582:	e7b4      	b.n	80044ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004584:	4b17      	ldr	r3, [pc, #92]	; (80045e4 <xTaskIncrementTick+0x168>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458a:	4915      	ldr	r1, [pc, #84]	; (80045e0 <xTaskIncrementTick+0x164>)
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d901      	bls.n	80045a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800459c:	2301      	movs	r3, #1
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e004      	b.n	80045ac <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045a2:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <xTaskIncrementTick+0x16c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3301      	adds	r3, #1
 80045a8:	4a0f      	ldr	r2, [pc, #60]	; (80045e8 <xTaskIncrementTick+0x16c>)
 80045aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045ac:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <xTaskIncrementTick+0x170>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80045b4:	2301      	movs	r3, #1
 80045b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80045b8:	697b      	ldr	r3, [r7, #20]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	1ffe8ae0 	.word	0x1ffe8ae0
 80045c8:	1ffe8abc 	.word	0x1ffe8abc
 80045cc:	1ffe8a70 	.word	0x1ffe8a70
 80045d0:	1ffe8a74 	.word	0x1ffe8a74
 80045d4:	1ffe8ad0 	.word	0x1ffe8ad0
 80045d8:	1ffe8ad8 	.word	0x1ffe8ad8
 80045dc:	1ffe8ac0 	.word	0x1ffe8ac0
 80045e0:	1ffe89e4 	.word	0x1ffe89e4
 80045e4:	1ffe89e0 	.word	0x1ffe89e0
 80045e8:	1ffe8ac8 	.word	0x1ffe8ac8
 80045ec:	1ffe8acc 	.word	0x1ffe8acc

080045f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045f6:	4b26      	ldr	r3, [pc, #152]	; (8004690 <vTaskSwitchContext+0xa0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045fe:	4b25      	ldr	r3, [pc, #148]	; (8004694 <vTaskSwitchContext+0xa4>)
 8004600:	2201      	movs	r2, #1
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	e03e      	b.n	8004684 <vTaskSwitchContext+0x94>
	}
	else
	{
		xYieldPending = pdFALSE;
 8004606:	4b23      	ldr	r3, [pc, #140]	; (8004694 <vTaskSwitchContext+0xa4>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800460c:	4b22      	ldr	r3, [pc, #136]	; (8004698 <vTaskSwitchContext+0xa8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60fb      	str	r3, [r7, #12]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	fab3 f383 	clz	r3, r3
 8004618:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800461a:	7afb      	ldrb	r3, [r7, #11]
 800461c:	f1c3 031f 	rsb	r3, r3, #31
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	491e      	ldr	r1, [pc, #120]	; (800469c <vTaskSwitchContext+0xac>)
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <vTaskSwitchContext+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004636:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	607b      	str	r3, [r7, #4]
 8004648:	e7fe      	b.n	8004648 <vTaskSwitchContext+0x58>
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4a11      	ldr	r2, [pc, #68]	; (800469c <vTaskSwitchContext+0xac>)
 8004656:	4413      	add	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	605a      	str	r2, [r3, #4]
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	3308      	adds	r3, #8
 800466c:	429a      	cmp	r2, r3
 800466e:	d104      	bne.n	800467a <vTaskSwitchContext+0x8a>
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a07      	ldr	r2, [pc, #28]	; (80046a0 <vTaskSwitchContext+0xb0>)
 8004682:	6013      	str	r3, [r2, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	1ffe8ae0 	.word	0x1ffe8ae0
 8004694:	1ffe8acc 	.word	0x1ffe8acc
 8004698:	1ffe8ac0 	.word	0x1ffe8ac0
 800469c:	1ffe89e4 	.word	0x1ffe89e4
 80046a0:	1ffe89e0 	.word	0x1ffe89e0

080046a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d109      	bne.n	80046c8 <vTaskPlaceOnEventList+0x24>
 80046b4:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	e7fe      	b.n	80046c6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046c8:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <vTaskPlaceOnEventList+0x40>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3318      	adds	r3, #24
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4619      	mov	r1, r3
 80046d2:	f7fe fce1 	bl	8003098 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046d6:	6838      	ldr	r0, [r7, #0]
 80046d8:	2101      	movs	r1, #1
 80046da:	f000 fbab 	bl	8004e34 <prvAddCurrentTaskToDelayedList>
}
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	1ffe89e0 	.word	0x1ffe89e0

080046e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <vTaskPlaceOnEventListRestricted+0x26>
 80046fa:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	e7fe      	b.n	800470c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800470e:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <vTaskPlaceOnEventListRestricted+0x50>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3318      	adds	r3, #24
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	4619      	mov	r1, r3
 8004718:	f7fe fc9a 	bl	8003050 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004722:	f04f 33ff 	mov.w	r3, #4294967295
 8004726:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004728:	68b8      	ldr	r0, [r7, #8]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	f000 fb82 	bl	8004e34 <prvAddCurrentTaskToDelayedList>
	}
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	1ffe89e0 	.word	0x1ffe89e0

0800473c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <xTaskRemoveFromEventList+0x2a>
 8004752:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e7fe      	b.n	8004764 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	3318      	adds	r3, #24
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe fccc 	bl	8003108 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004770:	4b1e      	ldr	r3, [pc, #120]	; (80047ec <xTaskRemoveFromEventList+0xb0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d11e      	bne.n	80047b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	3304      	adds	r3, #4
 800477c:	4618      	mov	r0, r3
 800477e:	f7fe fcc3 	bl	8003108 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	461a      	mov	r2, r3
 8004788:	2301      	movs	r3, #1
 800478a:	fa03 f202 	lsl.w	r2, r3, r2
 800478e:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <xTaskRemoveFromEventList+0xb4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4313      	orrs	r3, r2
 8004794:	4a16      	ldr	r2, [pc, #88]	; (80047f0 <xTaskRemoveFromEventList+0xb4>)
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <xTaskRemoveFromEventList+0xb8>)
 80047a6:	441a      	add	r2, r3
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4610      	mov	r0, r2
 80047ae:	4619      	mov	r1, r3
 80047b0:	f7fe fc4e 	bl	8003050 <vListInsertEnd>
 80047b4:	e005      	b.n	80047c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	3318      	adds	r3, #24
 80047ba:	480f      	ldr	r0, [pc, #60]	; (80047f8 <xTaskRemoveFromEventList+0xbc>)
 80047bc:	4619      	mov	r1, r3
 80047be:	f7fe fc47 	bl	8003050 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c6:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <xTaskRemoveFromEventList+0xc0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d905      	bls.n	80047dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047d0:	2301      	movs	r3, #1
 80047d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047d4:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <xTaskRemoveFromEventList+0xc4>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	e001      	b.n	80047e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047e0:	697b      	ldr	r3, [r7, #20]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	1ffe8ae0 	.word	0x1ffe8ae0
 80047f0:	1ffe8ac0 	.word	0x1ffe8ac0
 80047f4:	1ffe89e4 	.word	0x1ffe89e4
 80047f8:	1ffe8a78 	.word	0x1ffe8a78
 80047fc:	1ffe89e0 	.word	0x1ffe89e0
 8004800:	1ffe8acc 	.word	0x1ffe8acc

08004804 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800480c:	4b06      	ldr	r3, [pc, #24]	; (8004828 <vTaskInternalSetTimeOutState+0x24>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004814:	4b05      	ldr	r3, [pc, #20]	; (800482c <vTaskInternalSetTimeOutState+0x28>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	605a      	str	r2, [r3, #4]
}
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	1ffe8ad0 	.word	0x1ffe8ad0
 800482c:	1ffe8abc 	.word	0x1ffe8abc

08004830 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <xTaskCheckForTimeOut+0x24>
 8004840:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	e7fe      	b.n	8004852 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <xTaskCheckForTimeOut+0x3e>
 800485a:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	e7fe      	b.n	800486c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800486e:	f7fe fa89 	bl	8002d84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004872:	4b24      	ldr	r3, [pc, #144]	; (8004904 <xTaskCheckForTimeOut+0xd4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8004882:	4b21      	ldr	r3, [pc, #132]	; (8004908 <xTaskCheckForTimeOut+0xd8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800488a:	2b00      	cmp	r3, #0
 800488c:	d007      	beq.n	800489e <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800488e:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <xTaskCheckForTimeOut+0xd8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
				xReturn = pdTRUE;
 8004898:	2301      	movs	r3, #1
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	e02b      	b.n	80048f6 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a6:	d102      	bne.n	80048ae <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048a8:	2300      	movs	r3, #0
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	e023      	b.n	80048f6 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4b16      	ldr	r3, [pc, #88]	; (800490c <xTaskCheckForTimeOut+0xdc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d007      	beq.n	80048ca <xTaskCheckForTimeOut+0x9a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d802      	bhi.n	80048ca <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048c4:	2301      	movs	r3, #1
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	e015      	b.n	80048f6 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d90b      	bls.n	80048ec <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	1ad2      	subs	r2, r2, r3
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff ff8f 	bl	8004804 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	e004      	b.n	80048f6 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048f2:	2301      	movs	r3, #1
 80048f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048f6:	f7fe fa73 	bl	8002de0 <vPortExitCritical>

	return xReturn;
 80048fa:	69fb      	ldr	r3, [r7, #28]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3720      	adds	r7, #32
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	1ffe8abc 	.word	0x1ffe8abc
 8004908:	1ffe89e0 	.word	0x1ffe89e0
 800490c:	1ffe8ad0 	.word	0x1ffe8ad0

08004910 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004914:	4b03      	ldr	r3, [pc, #12]	; (8004924 <vTaskMissedYield+0x14>)
 8004916:	2201      	movs	r2, #1
 8004918:	601a      	str	r2, [r3, #0]
}
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	1ffe8acc 	.word	0x1ffe8acc

08004928 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004930:	f000 f850 	bl	80049d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <prvIdleTask+0x28>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d907      	bls.n	800494c <prvIdleTask+0x24>
			{
				taskYIELD();
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <prvIdleTask+0x2c>)
 800493e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	f3bf 8f6f 	isb	sy
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 800494c:	e7f0      	b.n	8004930 <prvIdleTask+0x8>
 800494e:	bf00      	nop
 8004950:	1ffe89e4 	.word	0x1ffe89e4
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800495e:	2300      	movs	r3, #0
 8004960:	607b      	str	r3, [r7, #4]
 8004962:	e00c      	b.n	800497e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4a11      	ldr	r2, [pc, #68]	; (80049b4 <prvInitialiseTaskLists+0x5c>)
 8004970:	4413      	add	r3, r2
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fb40 	bl	8002ff8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3301      	adds	r3, #1
 800497c:	607b      	str	r3, [r7, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b04      	cmp	r3, #4
 8004982:	d9ef      	bls.n	8004964 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8004984:	480c      	ldr	r0, [pc, #48]	; (80049b8 <prvInitialiseTaskLists+0x60>)
 8004986:	f7fe fb37 	bl	8002ff8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800498a:	480c      	ldr	r0, [pc, #48]	; (80049bc <prvInitialiseTaskLists+0x64>)
 800498c:	f7fe fb34 	bl	8002ff8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004990:	480b      	ldr	r0, [pc, #44]	; (80049c0 <prvInitialiseTaskLists+0x68>)
 8004992:	f7fe fb31 	bl	8002ff8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004996:	480b      	ldr	r0, [pc, #44]	; (80049c4 <prvInitialiseTaskLists+0x6c>)
 8004998:	f7fe fb2e 	bl	8002ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800499c:	480a      	ldr	r0, [pc, #40]	; (80049c8 <prvInitialiseTaskLists+0x70>)
 800499e:	f7fe fb2b 	bl	8002ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049a2:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <prvInitialiseTaskLists+0x74>)
 80049a4:	4a04      	ldr	r2, [pc, #16]	; (80049b8 <prvInitialiseTaskLists+0x60>)
 80049a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049a8:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <prvInitialiseTaskLists+0x78>)
 80049aa:	4a04      	ldr	r2, [pc, #16]	; (80049bc <prvInitialiseTaskLists+0x64>)
 80049ac:	601a      	str	r2, [r3, #0]
}
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	1ffe89e4 	.word	0x1ffe89e4
 80049b8:	1ffe8a48 	.word	0x1ffe8a48
 80049bc:	1ffe8a5c 	.word	0x1ffe8a5c
 80049c0:	1ffe8a78 	.word	0x1ffe8a78
 80049c4:	1ffe8a8c 	.word	0x1ffe8a8c
 80049c8:	1ffe8aa4 	.word	0x1ffe8aa4
 80049cc:	1ffe8a70 	.word	0x1ffe8a70
 80049d0:	1ffe8a74 	.word	0x1ffe8a74

080049d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049da:	e019      	b.n	8004a10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049dc:	f7fe f9d2 	bl	8002d84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e0:	4b0f      	ldr	r3, [pc, #60]	; (8004a20 <prvCheckTasksWaitingTermination+0x4c>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fe fb8b 	bl	8003108 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <prvCheckTasksWaitingTermination+0x50>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <prvCheckTasksWaitingTermination+0x50>)
 80049fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <prvCheckTasksWaitingTermination+0x54>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <prvCheckTasksWaitingTermination+0x54>)
 8004a04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a06:	f7fe f9eb 	bl	8002de0 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f80e 	bl	8004a2c <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <prvCheckTasksWaitingTermination+0x54>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1e1      	bne.n	80049dc <prvCheckTasksWaitingTermination+0x8>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	1ffe8a8c 	.word	0x1ffe8a8c
 8004a24:	1ffe8ab8 	.word	0x1ffe8ab8
 8004a28:	1ffe8aa0 	.word	0x1ffe8aa0

08004a2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe facb 	bl	8002fd4 <vPortFree>
			vPortFree( pxTCB );
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fe fac8 	bl	8002fd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop

08004a4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a52:	4b0c      	ldr	r3, [pc, #48]	; (8004a84 <prvResetNextTaskUnblockTime+0x38>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d104      	bne.n	8004a66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <prvResetNextTaskUnblockTime+0x3c>)
 8004a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	e008      	b.n	8004a78 <prvResetNextTaskUnblockTime+0x2c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a66:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <prvResetNextTaskUnblockTime+0x38>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	4a04      	ldr	r2, [pc, #16]	; (8004a88 <prvResetNextTaskUnblockTime+0x3c>)
 8004a76:	6013      	str	r3, [r2, #0]
	}
}
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	1ffe8a70 	.word	0x1ffe8a70
 8004a88:	1ffe8ad8 	.word	0x1ffe8ad8

08004a8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <xTaskGetSchedulerState+0x34>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	e008      	b.n	8004ab2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aa0:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <xTaskGetSchedulerState+0x38>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d102      	bne.n	8004aae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	607b      	str	r3, [r7, #4]
 8004aac:	e001      	b.n	8004ab2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ab2:	687b      	ldr	r3, [r7, #4]
	}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	1ffe8ac4 	.word	0x1ffe8ac4
 8004ac4:	1ffe8ae0 	.word	0x1ffe8ae0

08004ac8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d06b      	beq.n	8004bb6 <xTaskPriorityInherit+0xee>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae2:	4b37      	ldr	r3, [pc, #220]	; (8004bc0 <xTaskPriorityInherit+0xf8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d25b      	bcs.n	8004ba4 <xTaskPriorityInherit+0xdc>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	db06      	blt.n	8004b02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af4:	4b32      	ldr	r3, [pc, #200]	; (8004bc0 <xTaskPriorityInherit+0xf8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	f1c3 0205 	rsb	r2, r3, #5
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6959      	ldr	r1, [r3, #20]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4a2c      	ldr	r2, [pc, #176]	; (8004bc4 <xTaskPriorityInherit+0xfc>)
 8004b14:	4413      	add	r3, r2
 8004b16:	4299      	cmp	r1, r3
 8004b18:	d13c      	bne.n	8004b94 <xTaskPriorityInherit+0xcc>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe faf2 	bl	8003108 <uxListRemove>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d115      	bne.n	8004b56 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2e:	4925      	ldr	r1, [pc, #148]	; (8004bc4 <xTaskPriorityInherit+0xfc>)
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <xTaskPriorityInherit+0x8e>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	461a      	mov	r2, r3
 8004b46:	2301      	movs	r3, #1
 8004b48:	4093      	lsls	r3, r2
 8004b4a:	43da      	mvns	r2, r3
 8004b4c:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <xTaskPriorityInherit+0x100>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4013      	ands	r3, r2
 8004b52:	4a1d      	ldr	r2, [pc, #116]	; (8004bc8 <xTaskPriorityInherit+0x100>)
 8004b54:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b56:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <xTaskPriorityInherit+0xf8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	461a      	mov	r2, r3
 8004b66:	2301      	movs	r3, #1
 8004b68:	fa03 f202 	lsl.w	r2, r3, r2
 8004b6c:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <xTaskPriorityInherit+0x100>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	4a15      	ldr	r2, [pc, #84]	; (8004bc8 <xTaskPriorityInherit+0x100>)
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4a10      	ldr	r2, [pc, #64]	; (8004bc4 <xTaskPriorityInherit+0xfc>)
 8004b84:	441a      	add	r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	f7fe fa5f 	bl	8003050 <vListInsertEnd>
 8004b92:	e004      	b.n	8004b9e <xTaskPriorityInherit+0xd6>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004b94:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <xTaskPriorityInherit+0xf8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	e008      	b.n	8004bb6 <xTaskPriorityInherit+0xee>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ba8:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <xTaskPriorityInherit+0xf8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d201      	bcs.n	8004bb6 <xTaskPriorityInherit+0xee>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
	}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	1ffe89e0 	.word	0x1ffe89e0
 8004bc4:	1ffe89e4 	.word	0x1ffe89e4
 8004bc8:	1ffe8ac0 	.word	0x1ffe8ac0

08004bcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d06e      	beq.n	8004cc0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004be2:	4b3a      	ldr	r3, [pc, #232]	; (8004ccc <xTaskPriorityDisinherit+0x100>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d009      	beq.n	8004c00 <xTaskPriorityDisinherit+0x34>
 8004bec:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	e7fe      	b.n	8004bfe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <xTaskPriorityDisinherit+0x50>
 8004c08:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	e7fe      	b.n	8004c1a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c20:	1e5a      	subs	r2, r3, #1
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d046      	beq.n	8004cc0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d142      	bne.n	8004cc0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fa62 	bl	8003108 <uxListRemove>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d115      	bne.n	8004c76 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4e:	4920      	ldr	r1, [pc, #128]	; (8004cd0 <xTaskPriorityDisinherit+0x104>)
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <xTaskPriorityDisinherit+0xaa>
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	461a      	mov	r2, r3
 8004c66:	2301      	movs	r3, #1
 8004c68:	4093      	lsls	r3, r2
 8004c6a:	43da      	mvns	r2, r3
 8004c6c:	4b19      	ldr	r3, [pc, #100]	; (8004cd4 <xTaskPriorityDisinherit+0x108>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4013      	ands	r3, r2
 8004c72:	4a18      	ldr	r2, [pc, #96]	; (8004cd4 <xTaskPriorityDisinherit+0x108>)
 8004c74:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	f1c3 0205 	rsb	r2, r3, #5
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2301      	movs	r3, #1
 8004c92:	fa03 f202 	lsl.w	r2, r3, r2
 8004c96:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <xTaskPriorityDisinherit+0x108>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	4a0d      	ldr	r2, [pc, #52]	; (8004cd4 <xTaskPriorityDisinherit+0x108>)
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <xTaskPriorityDisinherit+0x104>)
 8004cae:	441a      	add	r2, r3
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f7fe f9ca 	bl	8003050 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cc0:	697b      	ldr	r3, [r7, #20]
	}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	1ffe89e0 	.word	0x1ffe89e0
 8004cd0:	1ffe89e4 	.word	0x1ffe89e4
 8004cd4:	1ffe8ac0 	.word	0x1ffe8ac0

08004cd8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8083 	beq.w	8004df8 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d109      	bne.n	8004d0e <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004cfa:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	e7fe      	b.n	8004d0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d202      	bcs.n	8004d1e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	e002      	b.n	8004d24 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d064      	beq.n	8004df8 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d15f      	bne.n	8004df8 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004d38:	4b31      	ldr	r3, [pc, #196]	; (8004e00 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d109      	bne.n	8004d56 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8004d42:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	e7fe      	b.n	8004d54 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	db04      	blt.n	8004d74 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	f1c3 0205 	rsb	r2, r3, #5
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	6959      	ldr	r1, [r3, #20]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4a20      	ldr	r2, [pc, #128]	; (8004e04 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004d84:	4413      	add	r3, r2
 8004d86:	4299      	cmp	r1, r3
 8004d88:	d136      	bne.n	8004df8 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fe f9ba 	bl	8003108 <uxListRemove>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d115      	bne.n	8004dc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9e:	4919      	ldr	r1, [pc, #100]	; (8004e04 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	461a      	mov	r2, r3
 8004db6:	2301      	movs	r3, #1
 8004db8:	4093      	lsls	r3, r2
 8004dba:	43da      	mvns	r2, r3
 8004dbc:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	4a11      	ldr	r2, [pc, #68]	; (8004e08 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004dc4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	461a      	mov	r2, r3
 8004dcc:	2301      	movs	r3, #1
 8004dce:	fa03 f202 	lsl.w	r2, r3, r2
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	4a0b      	ldr	r2, [pc, #44]	; (8004e08 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de0:	4613      	mov	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4a06      	ldr	r2, [pc, #24]	; (8004e04 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004dea:	441a      	add	r2, r3
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	3304      	adds	r3, #4
 8004df0:	4610      	mov	r0, r2
 8004df2:	4619      	mov	r1, r3
 8004df4:	f7fe f92c 	bl	8003050 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	1ffe89e0 	.word	0x1ffe89e0
 8004e04:	1ffe89e4 	.word	0x1ffe89e4
 8004e08:	1ffe8ac0 	.word	0x1ffe8ac0

08004e0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e1e:	3201      	adds	r2, #1
 8004e20:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004e22:	4b03      	ldr	r3, [pc, #12]	; (8004e30 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e24:	681b      	ldr	r3, [r3, #0]
	}
 8004e26:	4618      	mov	r0, r3
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	1ffe89e0 	.word	0x1ffe89e0

08004e34 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e3e:	4b2b      	ldr	r3, [pc, #172]	; (8004eec <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8004e44:	4b2a      	ldr	r3, [pc, #168]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e4e:	4b28      	ldr	r3, [pc, #160]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3304      	adds	r3, #4
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fe f957 	bl	8003108 <uxListRemove>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10b      	bne.n	8004e78 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e60:	4b23      	ldr	r3, [pc, #140]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	461a      	mov	r2, r3
 8004e68:	2301      	movs	r3, #1
 8004e6a:	4093      	lsls	r3, r2
 8004e6c:	43da      	mvns	r2, r3
 8004e6e:	4b21      	ldr	r3, [pc, #132]	; (8004ef4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4013      	ands	r3, r2
 8004e74:	4a1f      	ldr	r2, [pc, #124]	; (8004ef4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e76:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7e:	d10a      	bne.n	8004e96 <prvAddCurrentTaskToDelayedList+0x62>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d007      	beq.n	8004e96 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e86:	4b1a      	ldr	r3, [pc, #104]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	481a      	ldr	r0, [pc, #104]	; (8004ef8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e8e:	4619      	mov	r1, r3
 8004e90:	f7fe f8de 	bl	8003050 <vListInsertEnd>
 8004e94:	e026      	b.n	8004ee4 <prvAddCurrentTaskToDelayedList+0xb0>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e9e:	4b14      	ldr	r3, [pc, #80]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d209      	bcs.n	8004ec2 <prvAddCurrentTaskToDelayedList+0x8e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eae:	4b13      	ldr	r3, [pc, #76]	; (8004efc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4610      	mov	r0, r2
 8004eba:	4619      	mov	r1, r3
 8004ebc:	f7fe f8ec 	bl	8003098 <vListInsert>
 8004ec0:	e010      	b.n	8004ee4 <prvAddCurrentTaskToDelayedList+0xb0>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ec2:	4b0f      	ldr	r3, [pc, #60]	; (8004f00 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4610      	mov	r0, r2
 8004ece:	4619      	mov	r1, r3
 8004ed0:	f7fe f8e2 	bl	8003098 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ed4:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xd0>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d202      	bcs.n	8004ee4 <prvAddCurrentTaskToDelayedList+0xb0>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8004ede:	4a09      	ldr	r2, [pc, #36]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xd0>)
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	1ffe8abc 	.word	0x1ffe8abc
 8004ef0:	1ffe89e0 	.word	0x1ffe89e0
 8004ef4:	1ffe8ac0 	.word	0x1ffe8ac0
 8004ef8:	1ffe8aa4 	.word	0x1ffe8aa4
 8004efc:	1ffe8a74 	.word	0x1ffe8a74
 8004f00:	1ffe8a70 	.word	0x1ffe8a70
 8004f04:	1ffe8ad8 	.word	0x1ffe8ad8

08004f08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f12:	f000 faf3 	bl	80054fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f16:	4b11      	ldr	r3, [pc, #68]	; (8004f5c <xTimerCreateTimerTask+0x54>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004f1e:	2302      	movs	r3, #2
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <xTimerCreateTimerTask+0x58>)
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	480f      	ldr	r0, [pc, #60]	; (8004f64 <xTimerCreateTimerTask+0x5c>)
 8004f28:	490f      	ldr	r1, [pc, #60]	; (8004f68 <xTimerCreateTimerTask+0x60>)
 8004f2a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f7ff f818 	bl	8003f64 <xTaskCreate>
 8004f34:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d109      	bne.n	8004f50 <xTimerCreateTimerTask+0x48>
 8004f3c:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	e7fe      	b.n	8004f4e <xTimerCreateTimerTask+0x46>
	return xReturn;
 8004f50:	687b      	ldr	r3, [r7, #4]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	1ffe8b14 	.word	0x1ffe8b14
 8004f60:	1ffe8b18 	.word	0x1ffe8b18
 8004f64:	080050a9 	.word	0x080050a9
 8004f68:	080069b8 	.word	0x080069b8

08004f6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08a      	sub	sp, #40	; 0x28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d109      	bne.n	8004f98 <xTimerGenericCommand+0x2c>
 8004f84:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	623b      	str	r3, [r7, #32]
 8004f96:	e7fe      	b.n	8004f96 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f98:	4b1c      	ldr	r3, [pc, #112]	; (800500c <xTimerGenericCommand+0xa0>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d030      	beq.n	8005002 <xTimerGenericCommand+0x96>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b05      	cmp	r3, #5
 8004fb0:	dc1c      	bgt.n	8004fec <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004fb2:	f7ff fd6b 	bl	8004a8c <xTaskGetSchedulerState>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d10b      	bne.n	8004fd4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004fbc:	4b13      	ldr	r3, [pc, #76]	; (800500c <xTimerGenericCommand+0xa0>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	f107 0310 	add.w	r3, r7, #16
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f7fe f990 	bl	80032f0 <xQueueGenericSend>
 8004fd0:	6278      	str	r0, [r7, #36]	; 0x24
 8004fd2:	e016      	b.n	8005002 <xTimerGenericCommand+0x96>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fd4:	4b0d      	ldr	r3, [pc, #52]	; (800500c <xTimerGenericCommand+0xa0>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	f107 0310 	add.w	r3, r7, #16
 8004fdc:	4610      	mov	r0, r2
 8004fde:	4619      	mov	r1, r3
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f7fe f984 	bl	80032f0 <xQueueGenericSend>
 8004fe8:	6278      	str	r0, [r7, #36]	; 0x24
 8004fea:	e00a      	b.n	8005002 <xTimerGenericCommand+0x96>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fec:	4b07      	ldr	r3, [pc, #28]	; (800500c <xTimerGenericCommand+0xa0>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	f107 0310 	add.w	r3, r7, #16
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f7fe fa96 	bl	800352c <xQueueGenericSendFromISR>
 8005000:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005004:	4618      	mov	r0, r3
 8005006:	3728      	adds	r7, #40	; 0x28
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	1ffe8b14 	.word	0x1ffe8b14

08005010 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af02      	add	r7, sp, #8
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800501a:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <prvProcessExpiredTimer+0x94>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	3304      	adds	r3, #4
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe f86d 	bl	8003108 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d022      	beq.n	8005082 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	699a      	ldr	r2, [r3, #24]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4413      	add	r3, r2
 8005044:	6978      	ldr	r0, [r7, #20]
 8005046:	4619      	mov	r1, r3
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f000 f8d0 	bl	80051f0 <prvInsertTimerInActiveList>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d01e      	beq.n	8005094 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005056:	2300      	movs	r3, #0
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	6978      	ldr	r0, [r7, #20]
 800505c:	2100      	movs	r1, #0
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	2300      	movs	r3, #0
 8005062:	f7ff ff83 	bl	8004f6c <xTimerGenericCommand>
 8005066:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d112      	bne.n	8005094 <prvProcessExpiredTimer+0x84>
 800506e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	e7fe      	b.n	8005080 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005088:	f023 0301 	bic.w	r3, r3, #1
 800508c:	b2da      	uxtb	r2, r3
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	6978      	ldr	r0, [r7, #20]
 800509a:	4798      	blx	r3
}
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	1ffe8b0c 	.word	0x1ffe8b0c

080050a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050b0:	f107 0308 	add.w	r3, r7, #8
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 f857 	bl	8005168 <prvGetNextExpireTime>
 80050ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	4619      	mov	r1, r3
 80050c2:	f000 f803 	bl	80050cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050c6:	f000 f8d5 	bl	8005274 <prvProcessReceivedCommands>
	}
 80050ca:	e7f1      	b.n	80050b0 <prvTimerTask+0x8>

080050cc <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050d6:	f7ff f915 	bl	8004304 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050da:	f107 0308 	add.w	r3, r7, #8
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f866 	bl	80051b0 <prvSampleTimeNow>
 80050e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d131      	bne.n	8005150 <prvProcessTimerOrBlockTask+0x84>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <prvProcessTimerOrBlockTask+0x3c>
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d806      	bhi.n	8005108 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050fa:	f7ff f911 	bl	8004320 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	68f9      	ldr	r1, [r7, #12]
 8005102:	f7ff ff85 	bl	8005010 <prvProcessExpiredTimer>
 8005106:	e025      	b.n	8005154 <prvProcessTimerOrBlockTask+0x88>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d008      	beq.n	8005120 <prvProcessTimerOrBlockTask+0x54>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800510e:	4b13      	ldr	r3, [pc, #76]	; (800515c <prvProcessTimerOrBlockTask+0x90>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <prvProcessTimerOrBlockTask+0x50>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <prvProcessTimerOrBlockTask+0x52>
 800511c:	2300      	movs	r3, #0
 800511e:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005120:	4b0f      	ldr	r3, [pc, #60]	; (8005160 <prvProcessTimerOrBlockTask+0x94>)
 8005122:	6819      	ldr	r1, [r3, #0]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	4608      	mov	r0, r1
 800512c:	4619      	mov	r1, r3
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	f7fe fe88 	bl	8003e44 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8005134:	f7ff f8f4 	bl	8004320 <xTaskResumeAll>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10a      	bne.n	8005154 <prvProcessTimerOrBlockTask+0x88>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
 800513e:	4b09      	ldr	r3, [pc, #36]	; (8005164 <prvProcessTimerOrBlockTask+0x98>)
 8005140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	e001      	b.n	8005154 <prvProcessTimerOrBlockTask+0x88>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8005150:	f7ff f8e6 	bl	8004320 <xTaskResumeAll>
		}
	}
}
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	1ffe8b10 	.word	0x1ffe8b10
 8005160:	1ffe8b14 	.word	0x1ffe8b14
 8005164:	e000ed04 	.word	0xe000ed04

08005168 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005170:	4b0e      	ldr	r3, [pc, #56]	; (80051ac <prvGetNextExpireTime+0x44>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <prvGetNextExpireTime+0x16>
 800517a:	2201      	movs	r2, #1
 800517c:	e000      	b.n	8005180 <prvGetNextExpireTime+0x18>
 800517e:	2200      	movs	r2, #0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d105      	bne.n	8005198 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800518c:	4b07      	ldr	r3, [pc, #28]	; (80051ac <prvGetNextExpireTime+0x44>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e001      	b.n	800519c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800519c:	68fb      	ldr	r3, [r7, #12]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	1ffe8b0c 	.word	0x1ffe8b0c

080051b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051b8:	f7ff f950 	bl	800445c <xTaskGetTickCount>
 80051bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80051be:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <prvSampleTimeNow+0x3c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d205      	bcs.n	80051d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80051c8:	f000 f936 	bl	8005438 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e002      	b.n	80051da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051da:	4a04      	ldr	r2, [pc, #16]	; (80051ec <prvSampleTimeNow+0x3c>)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051e0:	68fb      	ldr	r3, [r7, #12]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	1ffe8b1c 	.word	0x1ffe8b1c

080051f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d812      	bhi.n	800523c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	1ad2      	subs	r2, r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	429a      	cmp	r2, r3
 8005222:	d302      	bcc.n	800522a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005224:	2301      	movs	r3, #1
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	e01b      	b.n	8005262 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800522a:	4b10      	ldr	r3, [pc, #64]	; (800526c <prvInsertTimerInActiveList+0x7c>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3304      	adds	r3, #4
 8005232:	4610      	mov	r0, r2
 8005234:	4619      	mov	r1, r3
 8005236:	f7fd ff2f 	bl	8003098 <vListInsert>
 800523a:	e012      	b.n	8005262 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	429a      	cmp	r2, r3
 8005242:	d206      	bcs.n	8005252 <prvInsertTimerInActiveList+0x62>
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d302      	bcc.n	8005252 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800524c:	2301      	movs	r3, #1
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	e007      	b.n	8005262 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005252:	4b07      	ldr	r3, [pc, #28]	; (8005270 <prvInsertTimerInActiveList+0x80>)
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3304      	adds	r3, #4
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	f7fd ff1b 	bl	8003098 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005262:	697b      	ldr	r3, [r7, #20]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	1ffe8b10 	.word	0x1ffe8b10
 8005270:	1ffe8b0c 	.word	0x1ffe8b0c

08005274 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08e      	sub	sp, #56	; 0x38
 8005278:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800527a:	e0cb      	b.n	8005414 <prvProcessReceivedCommands+0x1a0>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	da18      	bge.n	80052b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005282:	1d3b      	adds	r3, r7, #4
 8005284:	3304      	adds	r3, #4
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <prvProcessReceivedCommands+0x2e>
 800528e:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	e7fe      	b.n	80052a0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052a8:	6851      	ldr	r1, [r2, #4]
 80052aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ac:	6892      	ldr	r2, [r2, #8]
 80052ae:	4608      	mov	r0, r1
 80052b0:	4611      	mov	r1, r2
 80052b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f2c0 80ac 	blt.w	8005414 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d004      	beq.n	80052d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	3304      	adds	r3, #4
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fd ff1b 	bl	8003108 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052d2:	463b      	mov	r3, r7
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff ff6b 	bl	80051b0 <prvSampleTimeNow>
 80052da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b09      	cmp	r3, #9
 80052e0:	f200 8097 	bhi.w	8005412 <prvProcessReceivedCommands+0x19e>
 80052e4:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <prvProcessReceivedCommands+0x78>)
 80052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ea:	bf00      	nop
 80052ec:	08005315 	.word	0x08005315
 80052f0:	08005315 	.word	0x08005315
 80052f4:	08005315 	.word	0x08005315
 80052f8:	0800538b 	.word	0x0800538b
 80052fc:	0800539f 	.word	0x0800539f
 8005300:	080053e9 	.word	0x080053e9
 8005304:	08005315 	.word	0x08005315
 8005308:	08005315 	.word	0x08005315
 800530c:	0800538b 	.word	0x0800538b
 8005310:	0800539f 	.word	0x0800539f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	b2da      	uxtb	r2, r3
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	441a      	add	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005332:	4611      	mov	r1, r2
 8005334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005336:	f7ff ff5b 	bl	80051f0 <prvInsertTimerInActiveList>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d023      	beq.n	8005388 <prvProcessReceivedCommands+0x114>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005346:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b00      	cmp	r3, #0
 8005354:	d018      	beq.n	8005388 <prvProcessReceivedCommands+0x114>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	441a      	add	r2, r3
 800535e:	2300      	movs	r3, #0
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005364:	2100      	movs	r1, #0
 8005366:	2300      	movs	r3, #0
 8005368:	f7ff fe00 	bl	8004f6c <xTimerGenericCommand>
 800536c:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d109      	bne.n	8005388 <prvProcessReceivedCommands+0x114>
 8005374:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	e7fe      	b.n	8005386 <prvProcessReceivedCommands+0x112>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8005388:	e044      	b.n	8005414 <prvProcessReceivedCommands+0x1a0>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	b2da      	uxtb	r2, r3
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800539c:	e03a      	b.n	8005414 <prvProcessReceivedCommands+0x1a0>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d109      	bne.n	80053d2 <prvProcessReceivedCommands+0x15e>
 80053be:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	e7fe      	b.n	80053d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	4413      	add	r3, r2
 80053da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053dc:	4619      	mov	r1, r3
 80053de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	f7ff ff05 	bl	80051f0 <prvInsertTimerInActiveList>
					break;
 80053e6:	e015      	b.n	8005414 <prvProcessReceivedCommands+0x1a0>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d103      	bne.n	80053fe <prvProcessReceivedCommands+0x18a>
						{
							vPortFree( pxTimer );
 80053f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053f8:	f7fd fdec 	bl	8002fd4 <vPortFree>
 80053fc:	e008      	b.n	8005410 <prvProcessReceivedCommands+0x19c>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005404:	f023 0301 	bic.w	r3, r3, #1
 8005408:	b2da      	uxtb	r2, r3
 800540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005410:	e000      	b.n	8005414 <prvProcessReceivedCommands+0x1a0>

				default	:
					/* Don't expect to get here. */
					break;
 8005412:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005414:	4b07      	ldr	r3, [pc, #28]	; (8005434 <prvProcessReceivedCommands+0x1c0>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	1d3b      	adds	r3, r7, #4
 800541a:	4610      	mov	r0, r2
 800541c:	4619      	mov	r1, r3
 800541e:	2200      	movs	r2, #0
 8005420:	f7fe f9c6 	bl	80037b0 <xQueueReceive>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	f47f af28 	bne.w	800527c <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
 800542c:	3730      	adds	r7, #48	; 0x30
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	1ffe8b14 	.word	0x1ffe8b14

08005438 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800543e:	e047      	b.n	80054d0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005440:	4b2c      	ldr	r3, [pc, #176]	; (80054f4 <prvSwitchTimerLists+0xbc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544a:	4b2a      	ldr	r3, [pc, #168]	; (80054f4 <prvSwitchTimerLists+0xbc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	3304      	adds	r3, #4
 8005458:	4618      	mov	r0, r3
 800545a:	f7fd fe55 	bl	8003108 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	6938      	ldr	r0, [r7, #16]
 8005464:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d02d      	beq.n	80054d0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	699a      	ldr	r2, [r3, #24]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	4413      	add	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	429a      	cmp	r2, r3
 8005484:	d90e      	bls.n	80054a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005492:	4b18      	ldr	r3, [pc, #96]	; (80054f4 <prvSwitchTimerLists+0xbc>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3304      	adds	r3, #4
 800549a:	4610      	mov	r0, r2
 800549c:	4619      	mov	r1, r3
 800549e:	f7fd fdfb 	bl	8003098 <vListInsert>
 80054a2:	e015      	b.n	80054d0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054a4:	2300      	movs	r3, #0
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	6938      	ldr	r0, [r7, #16]
 80054aa:	2100      	movs	r1, #0
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	2300      	movs	r3, #0
 80054b0:	f7ff fd5c 	bl	8004f6c <xTimerGenericCommand>
 80054b4:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d109      	bne.n	80054d0 <prvSwitchTimerLists+0x98>
 80054bc:	f04f 03fc 	mov.w	r3, #252	; 0xfc
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	e7fe      	b.n	80054ce <prvSwitchTimerLists+0x96>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054d0:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <prvSwitchTimerLists+0xbc>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1b2      	bne.n	8005440 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <prvSwitchTimerLists+0xbc>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80054e0:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <prvSwitchTimerLists+0xc0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a03      	ldr	r2, [pc, #12]	; (80054f4 <prvSwitchTimerLists+0xbc>)
 80054e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054e8:	4a03      	ldr	r2, [pc, #12]	; (80054f8 <prvSwitchTimerLists+0xc0>)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6013      	str	r3, [r2, #0]
}
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	1ffe8b0c 	.word	0x1ffe8b0c
 80054f8:	1ffe8b10 	.word	0x1ffe8b10

080054fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005500:	f7fd fc40 	bl	8002d84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005504:	4b12      	ldr	r3, [pc, #72]	; (8005550 <prvCheckForValidListAndQueue+0x54>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d11d      	bne.n	8005548 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800550c:	4811      	ldr	r0, [pc, #68]	; (8005554 <prvCheckForValidListAndQueue+0x58>)
 800550e:	f7fd fd73 	bl	8002ff8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005512:	4811      	ldr	r0, [pc, #68]	; (8005558 <prvCheckForValidListAndQueue+0x5c>)
 8005514:	f7fd fd70 	bl	8002ff8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005518:	4b10      	ldr	r3, [pc, #64]	; (800555c <prvCheckForValidListAndQueue+0x60>)
 800551a:	4a0e      	ldr	r2, [pc, #56]	; (8005554 <prvCheckForValidListAndQueue+0x58>)
 800551c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800551e:	4b10      	ldr	r3, [pc, #64]	; (8005560 <prvCheckForValidListAndQueue+0x64>)
 8005520:	4a0d      	ldr	r2, [pc, #52]	; (8005558 <prvCheckForValidListAndQueue+0x5c>)
 8005522:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005524:	2005      	movs	r0, #5
 8005526:	2110      	movs	r1, #16
 8005528:	2200      	movs	r2, #0
 800552a:	f7fd fe7f 	bl	800322c <xQueueGenericCreate>
 800552e:	4602      	mov	r2, r0
 8005530:	4b07      	ldr	r3, [pc, #28]	; (8005550 <prvCheckForValidListAndQueue+0x54>)
 8005532:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <prvCheckForValidListAndQueue+0x54>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800553c:	4b04      	ldr	r3, [pc, #16]	; (8005550 <prvCheckForValidListAndQueue+0x54>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	4908      	ldr	r1, [pc, #32]	; (8005564 <prvCheckForValidListAndQueue+0x68>)
 8005544:	f7fe fc56 	bl	8003df4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005548:	f7fd fc4a 	bl	8002de0 <vPortExitCritical>
}
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	1ffe8b14 	.word	0x1ffe8b14
 8005554:	1ffe8ae4 	.word	0x1ffe8ae4
 8005558:	1ffe8af8 	.word	0x1ffe8af8
 800555c:	1ffe8b0c 	.word	0x1ffe8b0c
 8005560:	1ffe8b10 	.word	0x1ffe8b10
 8005564:	080069c0 	.word	0x080069c0

08005568 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6819      	ldr	r1, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	7c1a      	ldrb	r2, [r3, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	4608      	mov	r0, r1
 800557e:	4611      	mov	r1, r2
 8005580:	461a      	mov	r2, r3
 8005582:	f7fa ff53 	bl	800042c <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6819      	ldr	r1, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	7c1a      	ldrb	r2, [r3, #16]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	7c5b      	ldrb	r3, [r3, #17]
 8005592:	4608      	mov	r0, r1
 8005594:	4611      	mov	r1, r2
 8005596:	461a      	mov	r2, r3
 8005598:	f7fb fdec 	bl	8001174 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop

080055a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <__NVIC_SetPriorityGrouping+0x44>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055c4:	4013      	ands	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80055d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80055da:	4a04      	ldr	r2, [pc, #16]	; (80055ec <__NVIC_SetPriorityGrouping+0x44>)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	60d3      	str	r3, [r2, #12]
}
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	e000ed00 	.word	0xe000ed00

080055f0 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 80055f6:	2001      	movs	r0, #1
 80055f8:	f7ff ffd6 	bl	80055a8 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80055fc:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80055fe:	4b21      	ldr	r3, [pc, #132]	; (8005684 <SystemCoreSetup+0x94>)
 8005600:	4a21      	ldr	r2, [pc, #132]	; (8005688 <SystemCoreSetup+0x98>)
 8005602:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005604:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8005608:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800560a:	4a1e      	ldr	r2, [pc, #120]	; (8005684 <SystemCoreSetup+0x94>)
 800560c:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <SystemCoreSetup+0x94>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005616:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800561a:	4b1c      	ldr	r3, [pc, #112]	; (800568c <SystemCoreSetup+0x9c>)
 800561c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005620:	3314      	adds	r3, #20
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f023 030f 	bic.w	r3, r3, #15
 800562c:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f043 0304 	orr.w	r3, r3, #4
 8005634:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8005636:	4b15      	ldr	r3, [pc, #84]	; (800568c <SystemCoreSetup+0x9c>)
 8005638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800563c:	3314      	adds	r3, #20
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8005642:	4a10      	ldr	r2, [pc, #64]	; (8005684 <SystemCoreSetup+0x94>)
 8005644:	4b0f      	ldr	r3, [pc, #60]	; (8005684 <SystemCoreSetup+0x94>)
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	f023 0310 	bic.w	r3, r3, #16
 800564c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 800564e:	4a0d      	ldr	r2, [pc, #52]	; (8005684 <SystemCoreSetup+0x94>)
 8005650:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <SystemCoreSetup+0x94>)
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	f023 0308 	bic.w	r3, r3, #8
 8005658:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800565a:	4a0a      	ldr	r2, [pc, #40]	; (8005684 <SystemCoreSetup+0x94>)
 800565c:	4b09      	ldr	r3, [pc, #36]	; (8005684 <SystemCoreSetup+0x94>)
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005664:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8005666:	4a07      	ldr	r2, [pc, #28]	; (8005684 <SystemCoreSetup+0x94>)
 8005668:	4b06      	ldr	r3, [pc, #24]	; (8005684 <SystemCoreSetup+0x94>)
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005670:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8005672:	4a04      	ldr	r2, [pc, #16]	; (8005684 <SystemCoreSetup+0x94>)
 8005674:	4b03      	ldr	r3, [pc, #12]	; (8005684 <SystemCoreSetup+0x94>)
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800567c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	e000ed00 	.word	0xe000ed00
 8005688:	08000000 	.word	0x08000000
 800568c:	58001000 	.word	0x58001000

08005690 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8005698:	2300      	movs	r3, #0
 800569a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	701a      	strb	r2, [r3, #0]

  return (status);
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 80056b4:	4b02      	ldr	r3, [pc, #8]	; (80056c0 <OSCHP_GetFrequency+0x10>)
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	00b71b00 	.word	0x00b71b00

080056c4 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80056c4:	b5b0      	push	{r4, r5, r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80056ca:	4b12      	ldr	r3, [pc, #72]	; (8005714 <SystemCoreClockSetup+0x50>)
 80056cc:	1d3c      	adds	r4, r7, #4
 80056ce:	461d      	mov	r5, r3
 80056d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80056d8:	1d3b      	adds	r3, r7, #4
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fa ffa0 	bl	8000620 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80056e0:	2000      	movs	r0, #0
 80056e2:	f7fb f8bf 	bl	8000864 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80056e6:	2000      	movs	r0, #0
 80056e8:	f7fb f874 	bl	80007d4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80056ec:	2004      	movs	r0, #4
 80056ee:	f7fb f945 	bl	800097c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 80056f2:	2001      	movs	r0, #1
 80056f4:	2120      	movs	r1, #32
 80056f6:	f7fb f9cd 	bl	8000a94 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80056fa:	2000      	movs	r0, #0
 80056fc:	f7fb f87e 	bl	80007fc <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8005700:	2001      	movs	r0, #1
 8005702:	f7fb f963 	bl	80009cc <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8005706:	2001      	movs	r0, #1
 8005708:	f7fb f94c 	bl	80009a4 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bdb0      	pop	{r4, r5, r7, pc}
 8005712:	bf00      	nop
 8005714:	08006a2c 	.word	0x08006a2c

08005718 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	460b      	mov	r3, r1
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
 8005726:	7afb      	ldrb	r3, [r7, #11]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	409a      	lsls	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	605a      	str	r2, [r3, #4]
}
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop

0800573c <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	fa22 f303 	lsr.w	r3, r2, r3
 8005752:	f003 0301 	and.w	r3, r3, #1
}
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop

08005764 <BUS_IO_Init>:
* @param handle_ptr Pointer pointing to APP data structure.
* @return BUS_IO_STATUS_t BUS_IO APP status.
*/

BUS_IO_STATUS_t BUS_IO_Init(BUS_IO_t *const handle_ptr)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	7c5b      	ldrb	r3, [r3, #17]
 8005770:	f083 0301 	eor.w	r3, r3, #1
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d020      	beq.n	80057bc <BUS_IO_Init+0x58>
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800577a:	2300      	movs	r3, #0
 800577c:	73fb      	strb	r3, [r7, #15]
 800577e:	e015      	b.n	80057ac <BUS_IO_Init+0x48>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4413      	add	r3, r2
 800578a:	6819      	ldr	r1, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	4413      	add	r3, r2
 8005796:	791a      	ldrb	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3304      	adds	r3, #4
 800579c:	4608      	mov	r0, r1
 800579e:	4611      	mov	r1, r2
 80057a0:	461a      	mov	r2, r3
 80057a2:	f7fa fe43 	bl	800042c <XMC_GPIO_Init>
  XMC_ASSERT("BUS_IO_Init: handle_ptr null pointer", handle_ptr != NULL);

  if ((bool)false == handle_ptr->initialized)
  {
    /* Iterate the list of pins initializing the pin according to the gpio_config */
    for (i = 0U; i < handle_ptr->number_of_pins; i++)
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	3301      	adds	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	7c1b      	ldrb	r3, [r3, #16]
 80057b0:	7bfa      	ldrb	r2, [r7, #15]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d3e4      	bcc.n	8005780 <BUS_IO_Init+0x1c>
    {
      /* Initializes input / output characteristics */
      XMC_GPIO_Init(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin, &handle_ptr->gpio_config);
    }
    handle_ptr->initialized = (bool)true;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	745a      	strb	r2, [r3, #17]
  }
  return (BUS_IO_STATUS_OK);
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop

080057c8 <BUS_IO_Read>:
  }
}

/* Function to read the bus pins state */
uint16_t BUS_IO_Read(BUS_IO_t *const handle_ptr)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint16_t count = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	81bb      	strh	r3, [r7, #12]

  XMC_ASSERT("BUS_IO_Read: handle_ptr null pointer", handle_ptr != NULL);

  /* Iterate the list of pins reading the pin state and packing the result according the pin position in the list, from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 80057d4:	2300      	movs	r3, #0
 80057d6:	73fb      	strb	r3, [r7, #15]
 80057d8:	e01a      	b.n	8005810 <BUS_IO_Read+0x48>
  {
    /* Reading a bus pin's state */
    count |= (uint16_t)(XMC_GPIO_GetInput(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin) << i);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	7bfb      	ldrb	r3, [r7, #15]
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	4413      	add	r3, r2
 80057e4:	6819      	ldr	r1, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	4413      	add	r3, r2
 80057f0:	791b      	ldrb	r3, [r3, #4]
 80057f2:	4608      	mov	r0, r1
 80057f4:	4619      	mov	r1, r3
 80057f6:	f7ff ffa1 	bl	800573c <XMC_GPIO_GetInput>
 80057fa:	4602      	mov	r2, r0
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	b29a      	uxth	r2, r3
 8005804:	89bb      	ldrh	r3, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	81bb      	strh	r3, [r7, #12]
  uint16_t count = 0U;

  XMC_ASSERT("BUS_IO_Read: handle_ptr null pointer", handle_ptr != NULL);

  /* Iterate the list of pins reading the pin state and packing the result according the pin position in the list, from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	3301      	adds	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	7c1b      	ldrb	r3, [r3, #16]
 8005814:	7bfa      	ldrb	r2, [r7, #15]
 8005816:	429a      	cmp	r2, r3
 8005818:	d3df      	bcc.n	80057da <BUS_IO_Read+0x12>
  {
    /* Reading a bus pin's state */
    count |= (uint16_t)(XMC_GPIO_GetInput(handle_ptr->pin_array[i].gpio_port, handle_ptr->pin_array[i].gpio_pin) << i);
  }
  return(count);
 800581a:	89bb      	ldrh	r3, [r7, #12]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <BUS_IO_Write>:

/* Function to set the pins bus state */
void BUS_IO_Write(BUS_IO_t *const handle_ptr, const uint16_t data)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  const BUS_IO_PORT_PIN_t *bus_io_port_pin;

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60bb      	str	r3, [r7, #8]
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]
 800583a:	e023      	b.n	8005884 <BUS_IO_Write+0x60>
  {
    if (data & (uint16_t)((uint16_t)1 << i))
 800583c:	7bfb      	ldrb	r3, [r7, #15]
 800583e:	2201      	movs	r2, #1
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	b29a      	uxth	r2, r3
 8005846:	887b      	ldrh	r3, [r7, #2]
 8005848:	4013      	ands	r3, r2
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <BUS_IO_Write+0x40>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_HIGH);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	791b      	ldrb	r3, [r3, #4]
 8005858:	4610      	mov	r0, r2
 800585a:	4619      	mov	r1, r3
 800585c:	2201      	movs	r2, #1
 800585e:	f7ff ff5b 	bl	8005718 <XMC_GPIO_SetOutputLevel>
 8005862:	e009      	b.n	8005878 <BUS_IO_Write+0x54>
    }
    else
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	791b      	ldrb	r3, [r3, #4]
 800586c:	4610      	mov	r0, r2
 800586e:	4619      	mov	r1, r3
 8005870:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005874:	f7ff ff50 	bl	8005718 <XMC_GPIO_SetOutputLevel>
    }
   bus_io_port_pin++;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	3308      	adds	r3, #8
 800587c:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("BUS_IO_Write: handle_ptr null pointer", handle_ptr != NULL);

  bus_io_port_pin = handle_ptr->pin_array;
  /* Iterate the list of pins setting the pin state according the pin position in the list, , from LSB to MSB */
  for (i = 0U; i < handle_ptr->number_of_pins; i++)
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	3301      	adds	r3, #1
 8005882:	73fb      	strb	r3, [r7, #15]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	7c1b      	ldrb	r3, [r3, #16]
 8005888:	7bfa      	ldrb	r2, [r7, #15]
 800588a:	429a      	cmp	r2, r3
 800588c:	d3d6      	bcc.n	800583c <BUS_IO_Write+0x18>
    {
      XMC_GPIO_SetOutputLevel(bus_io_port_pin->gpio_port, bus_io_port_pin->gpio_pin, XMC_GPIO_OUTPUT_LEVEL_LOW);
    }
   bus_io_port_pin++;
  }
}
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800589a:	2300      	movs	r3, #0
 800589c:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 800589e:	4841      	ldr	r0, [pc, #260]	; (80059a4 <DAVE_Init+0x110>)
 80058a0:	f7ff fef6 	bl	8005690 <CLOCK_XMC4_Init>
 80058a4:	4603      	mov	r3, r0
 80058a6:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d104      	bne.n	80058b8 <DAVE_Init+0x24>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_0 */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_0); 
 80058ae:	483e      	ldr	r0, [pc, #248]	; (80059a8 <DAVE_Init+0x114>)
 80058b0:	f7fc f8de 	bl	8001a70 <SPI_MASTER_Init>
 80058b4:	4603      	mov	r3, r0
 80058b6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance TLE94112_ENABLE */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&TLE94112_ENABLE); 
 80058be:	483b      	ldr	r0, [pc, #236]	; (80059ac <DAVE_Init+0x118>)
 80058c0:	f7ff fe52 	bl	8005568 <DIGITAL_IO_Init>
 80058c4:	4603      	mov	r3, r0
 80058c6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80058c8:	79fb      	ldrb	r3, [r7, #7]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance TLE94112_CS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&TLE94112_CS); 
 80058ce:	4838      	ldr	r0, [pc, #224]	; (80059b0 <DAVE_Init+0x11c>)
 80058d0:	f7ff fe4a 	bl	8005568 <DIGITAL_IO_Init>
 80058d4:	4603      	mov	r3, r0
 80058d6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d104      	bne.n	80058e8 <DAVE_Init+0x54>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance ROTATE_INTERRUPT */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&ROTATE_INTERRUPT); 
 80058de:	4835      	ldr	r0, [pc, #212]	; (80059b4 <DAVE_Init+0x120>)
 80058e0:	f7fd f8ac 	bl	8002a3c <PIN_INTERRUPT_Init>
 80058e4:	4603      	mov	r3, r0
 80058e6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d104      	bne.n	80058f8 <DAVE_Init+0x64>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance DIRECTION_INTERRUPT */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&DIRECTION_INTERRUPT); 
 80058ee:	4832      	ldr	r0, [pc, #200]	; (80059b8 <DAVE_Init+0x124>)
 80058f0:	f7fd f8a4 	bl	8002a3c <PIN_INTERRUPT_Init>
 80058f4:	4603      	mov	r3, r0
 80058f6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80058f8:	79fb      	ldrb	r3, [r7, #7]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <DAVE_Init+0x74>
  {
	 /**  Initialization of PWM APP instance PWM_CLAMP */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_CLAMP); 
 80058fe:	482f      	ldr	r0, [pc, #188]	; (80059bc <DAVE_Init+0x128>)
 8005900:	f7fc ffba 	bl	8002878 <PWM_Init>
 8005904:	4603      	mov	r3, r0
 8005906:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005908:	79fb      	ldrb	r3, [r7, #7]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d104      	bne.n	8005918 <DAVE_Init+0x84>
  {
	 /**  Initialization of PWM APP instance PWM_LIFT */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_LIFT); 
 800590e:	482c      	ldr	r0, [pc, #176]	; (80059c0 <DAVE_Init+0x12c>)
 8005910:	f7fc ffb2 	bl	8002878 <PWM_Init>
 8005914:	4603      	mov	r3, r0
 8005916:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d104      	bne.n	8005928 <DAVE_Init+0x94>
  {
	 /**  Initialization of PWM APP instance PWM_ROTATE */
	 init_status = (DAVE_STATUS_t)PWM_Init(&PWM_ROTATE); 
 800591e:	4829      	ldr	r0, [pc, #164]	; (80059c4 <DAVE_Init+0x130>)
 8005920:	f7fc ffaa 	bl	8002878 <PWM_Init>
 8005924:	4603      	mov	r3, r0
 8005926:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <DAVE_Init+0xa4>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance CLAMP_INTERRUPT */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&CLAMP_INTERRUPT); 
 800592e:	4826      	ldr	r0, [pc, #152]	; (80059c8 <DAVE_Init+0x134>)
 8005930:	f7fd f884 	bl	8002a3c <PIN_INTERRUPT_Init>
 8005934:	4603      	mov	r3, r0
 8005936:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d104      	bne.n	8005948 <DAVE_Init+0xb4>
  {
	 /**  Initialization of BUS_IO APP instance DIRECTION_BUS_IO */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&DIRECTION_BUS_IO); 
 800593e:	4823      	ldr	r0, [pc, #140]	; (80059cc <DAVE_Init+0x138>)
 8005940:	f7ff ff10 	bl	8005764 <BUS_IO_Init>
 8005944:	4603      	mov	r3, r0
 8005946:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d104      	bne.n	8005958 <DAVE_Init+0xc4>
  {
	 /**  Initialization of BUS_IO APP instance CLAMP_BUS_IO */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&CLAMP_BUS_IO); 
 800594e:	4820      	ldr	r0, [pc, #128]	; (80059d0 <DAVE_Init+0x13c>)
 8005950:	f7ff ff08 	bl	8005764 <BUS_IO_Init>
 8005954:	4603      	mov	r3, r0
 8005956:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d104      	bne.n	8005968 <DAVE_Init+0xd4>
  {
	 /**  Initialization of BUS_IO APP instance LED_BUS_IO */
	 init_status = (DAVE_STATUS_t)BUS_IO_Init(&LED_BUS_IO); 
 800595e:	481d      	ldr	r0, [pc, #116]	; (80059d4 <DAVE_Init+0x140>)
 8005960:	f7ff ff00 	bl	8005764 <BUS_IO_Init>
 8005964:	4603      	mov	r3, r0
 8005966:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d104      	bne.n	8005978 <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0); 
 800596e:	481a      	ldr	r0, [pc, #104]	; (80059d8 <DAVE_Init+0x144>)
 8005970:	f7ff fdfa 	bl	8005568 <DIGITAL_IO_Init>
 8005974:	4603      	mov	r3, r0
 8005976:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d104      	bne.n	8005988 <DAVE_Init+0xf4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MOTOR_HIGH */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MOTOR_HIGH); 
 800597e:	4817      	ldr	r0, [pc, #92]	; (80059dc <DAVE_Init+0x148>)
 8005980:	f7ff fdf2 	bl	8005568 <DIGITAL_IO_Init>
 8005984:	4603      	mov	r3, r0
 8005986:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8005988:	79fb      	ldrb	r3, [r7, #7]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d104      	bne.n	8005998 <DAVE_Init+0x104>
  {
	 /**  Initialization of DIGITAL_IO APP instance MOTOR_LOW */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MOTOR_LOW); 
 800598e:	4814      	ldr	r0, [pc, #80]	; (80059e0 <DAVE_Init+0x14c>)
 8005990:	f7ff fdea 	bl	8005568 <DIGITAL_IO_Init>
 8005994:	4603      	mov	r3, r0
 8005996:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8005998:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	1ffe8b20 	.word	0x1ffe8b20
 80059a8:	1ffe8844 	.word	0x1ffe8844
 80059ac:	080069c8 	.word	0x080069c8
 80059b0:	080069dc 	.word	0x080069dc
 80059b4:	08006934 	.word	0x08006934
 80059b8:	08006958 	.word	0x08006958
 80059bc:	1ffe8850 	.word	0x1ffe8850
 80059c0:	1ffe8884 	.word	0x1ffe8884
 80059c4:	1ffe88b8 	.word	0x1ffe88b8
 80059c8:	0800697c 	.word	0x0800697c
 80059cc:	1ffe8920 	.word	0x1ffe8920
 80059d0:	1ffe8934 	.word	0x1ffe8934
 80059d4:	1ffe8948 	.word	0x1ffe8948
 80059d8:	080069f0 	.word	0x080069f0
 80059dc:	08006a04 	.word	0x08006a04
 80059e0:	08006a18 	.word	0x08006a18

080059e4 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	2201      	movs	r2, #1
 80059f4:	409a      	lsls	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	605a      	str	r2, [r3, #4]
}
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005a16:	409a      	lsls	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	605a      	str	r2, [r3, #4]
}
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop

08005a28 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3e:	f003 0301 	and.w	r3, r3, #1
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop

08005a50 <XMC_SPI_CH_SetBitOrderLsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderMsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderLsbFirst(XMC_USIC_CH_t *const channel)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  channel->SCTR &= (uint32_t)~USIC_CH_SCTR_SDIR_Msk;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5c:	f023 0201 	bic.w	r2, r3, #1
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop

08005a70 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	7c1b      	ldrb	r3, [r3, #16]
 8005a80:	4610      	mov	r0, r2
 8005a82:	4619      	mov	r1, r3
 8005a84:	f7ff ffae 	bl	80059e4 <XMC_GPIO_SetOutputHigh>
}
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop

08005a90 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	7c1b      	ldrb	r3, [r3, #16]
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	f7ff ffae 	bl	8005a04 <XMC_GPIO_SetOutputLow>
}
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop

08005ab0 <PIN_INTERRUPT_GetPinValue>:
*   return (1);
* }
*  @endcode
*/
__STATIC_INLINE uint32_t PIN_INTERRUPT_GetPinValue(const PIN_INTERRUPT_t *const handle)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_GetPinValue: Handler null pointer", handle != NULL);
  return (XMC_GPIO_GetInput(handle->port, handle->pin));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f7ff ffaf 	bl	8005a28 <XMC_GPIO_GetInput>
 8005aca:	4603      	mov	r3, r0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <FORWARD_Task>:
SemaphoreHandle_t ROTATE_interruptSemaphore;
SemaphoreHandle_t DIRECTION_interruptSemaphore;
SemaphoreHandle_t CLAMP_interruptSemaphore;


void FORWARD_Task(void *p){
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(FORWARD_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8005adc:	4b33      	ldr	r3, [pc, #204]	; (8005bac <FORWARD_Task+0xd8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8005ae6:	f7fd ff43 	bl	8003970 <xQueueSemaphoreTake>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d15c      	bne.n	8005baa <FORWARD_Task+0xd6>

			pin_status = PIN_INTERRUPT_GetPinValue(&DIRECTION_INTERRUPT);
 8005af0:	482f      	ldr	r0, [pc, #188]	; (8005bb0 <FORWARD_Task+0xdc>)
 8005af2:	f7ff ffdd 	bl	8005ab0 <PIN_INTERRUPT_GetPinValue>
 8005af6:	4602      	mov	r2, r0
 8005af8:	4b2e      	ldr	r3, [pc, #184]	; (8005bb4 <FORWARD_Task+0xe0>)
 8005afa:	601a      	str	r2, [r3, #0]
			if(pin_status==1){
 8005afc:	4b2d      	ldr	r3, [pc, #180]	; (8005bb4 <FORWARD_Task+0xe0>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d129      	bne.n	8005b58 <FORWARD_Task+0x84>
				//FORWARD
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x99);
 8005b04:	482c      	ldr	r0, [pc, #176]	; (8005bb8 <FORWARD_Task+0xe4>)
 8005b06:	2101      	movs	r1, #1
 8005b08:	2299      	movs	r2, #153	; 0x99
 8005b0a:	f7fa fbc7 	bl	800029c <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 8005b0e:	2314      	movs	r3, #20
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fe fb7b 	bl	800420c <vTaskDelay>

					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x99);
 8005b16:	4828      	ldr	r0, [pc, #160]	; (8005bb8 <FORWARD_Task+0xe4>)
 8005b18:	2102      	movs	r1, #2
 8005b1a:	2299      	movs	r2, #153	; 0x99
 8005b1c:	f7fa fbbe 	bl	800029c <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 8005b20:	2314      	movs	r3, #20
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe fb72 	bl	800420c <vTaskDelay>

					  TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x99);
 8005b28:	4823      	ldr	r0, [pc, #140]	; (8005bb8 <FORWARD_Task+0xe4>)
 8005b2a:	2103      	movs	r1, #3
 8005b2c:	2299      	movs	r2, #153	; 0x99
 8005b2e:	f7fa fbb5 	bl	800029c <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 8005b32:	2314      	movs	r3, #20
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fe fb69 	bl	800420c <vTaskDelay>

					 DIGITAL_IO_SetOutputHigh(&MOTOR_HIGH);
 8005b3a:	4820      	ldr	r0, [pc, #128]	; (8005bbc <FORWARD_Task+0xe8>)
 8005b3c:	f7ff ff98 	bl	8005a70 <DIGITAL_IO_SetOutputHigh>
					  vTaskDelay( xDelay );
 8005b40:	2314      	movs	r3, #20
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fb62 	bl	800420c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_LOW);
 8005b48:	481d      	ldr	r0, [pc, #116]	; (8005bc0 <FORWARD_Task+0xec>)
 8005b4a:	f7ff ffa1 	bl	8005a90 <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 8005b4e:	2314      	movs	r3, #20
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fe fb5b 	bl	800420c <vTaskDelay>
 8005b56:	e028      	b.n	8005baa <FORWARD_Task+0xd6>

			}

			else{
				//stop
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x00);
 8005b58:	4817      	ldr	r0, [pc, #92]	; (8005bb8 <FORWARD_Task+0xe4>)
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f7fa fb9d 	bl	800029c <TLE94112EL_SetHBRegdata>

				  vTaskDelay( xDelay );
 8005b62:	2314      	movs	r3, #20
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fe fb51 	bl	800420c <vTaskDelay>

					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x00);
 8005b6a:	4813      	ldr	r0, [pc, #76]	; (8005bb8 <FORWARD_Task+0xe4>)
 8005b6c:	2102      	movs	r1, #2
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f7fa fb94 	bl	800029c <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 8005b74:	2314      	movs	r3, #20
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fe fb48 	bl	800420c <vTaskDelay>

				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x00);
 8005b7c:	480e      	ldr	r0, [pc, #56]	; (8005bb8 <FORWARD_Task+0xe4>)
 8005b7e:	2103      	movs	r1, #3
 8005b80:	2200      	movs	r2, #0
 8005b82:	f7fa fb8b 	bl	800029c <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 8005b86:	2314      	movs	r3, #20
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fe fb3f 	bl	800420c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_HIGH);
 8005b8e:	480b      	ldr	r0, [pc, #44]	; (8005bbc <FORWARD_Task+0xe8>)
 8005b90:	f7ff ff7e 	bl	8005a90 <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 8005b94:	2314      	movs	r3, #20
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe fb38 	bl	800420c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_LOW);
 8005b9c:	4808      	ldr	r0, [pc, #32]	; (8005bc0 <FORWARD_Task+0xec>)
 8005b9e:	f7ff ff77 	bl	8005a90 <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 8005ba2:	2314      	movs	r3, #20
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe fb31 	bl	800420c <vTaskDelay>
			}
		}
	}
 8005baa:	e797      	b.n	8005adc <FORWARD_Task+0x8>
 8005bac:	1ffe8bc8 	.word	0x1ffe8bc8
 8005bb0:	08006958 	.word	0x08006958
 8005bb4:	1ffe8bb8 	.word	0x1ffe8bb8
 8005bb8:	08006a80 	.word	0x08006a80
 8005bbc:	08006a04 	.word	0x08006a04
 8005bc0:	08006a18 	.word	0x08006a18

08005bc4 <BACKWARD_Task>:
}

void BACKWARD_Task(void *p){
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(BACKWARD_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8005bcc:	4b33      	ldr	r3, [pc, #204]	; (8005c9c <BACKWARD_Task+0xd8>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f04f 31ff 	mov.w	r1, #4294967295
 8005bd6:	f7fd fecb 	bl	8003970 <xQueueSemaphoreTake>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d15c      	bne.n	8005c9a <BACKWARD_Task+0xd6>

			pin_status = PIN_INTERRUPT_GetPinValue(&DIRECTION_INTERRUPT);
 8005be0:	482f      	ldr	r0, [pc, #188]	; (8005ca0 <BACKWARD_Task+0xdc>)
 8005be2:	f7ff ff65 	bl	8005ab0 <PIN_INTERRUPT_GetPinValue>
 8005be6:	4602      	mov	r2, r0
 8005be8:	4b2e      	ldr	r3, [pc, #184]	; (8005ca4 <BACKWARD_Task+0xe0>)
 8005bea:	601a      	str	r2, [r3, #0]
			if(pin_status==1){
 8005bec:	4b2d      	ldr	r3, [pc, #180]	; (8005ca4 <BACKWARD_Task+0xe0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d129      	bne.n	8005c48 <BACKWARD_Task+0x84>
				//BACKWARD
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x66);
 8005bf4:	482c      	ldr	r0, [pc, #176]	; (8005ca8 <BACKWARD_Task+0xe4>)
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	2266      	movs	r2, #102	; 0x66
 8005bfa:	f7fa fb4f 	bl	800029c <TLE94112EL_SetHBRegdata>

				  vTaskDelay( xDelay );
 8005bfe:	2314      	movs	r3, #20
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fe fb03 	bl	800420c <vTaskDelay>
					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x66);
 8005c06:	4828      	ldr	r0, [pc, #160]	; (8005ca8 <BACKWARD_Task+0xe4>)
 8005c08:	2102      	movs	r1, #2
 8005c0a:	2266      	movs	r2, #102	; 0x66
 8005c0c:	f7fa fb46 	bl	800029c <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 8005c10:	2314      	movs	r3, #20
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fe fafa 	bl	800420c <vTaskDelay>
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x66);
 8005c18:	4823      	ldr	r0, [pc, #140]	; (8005ca8 <BACKWARD_Task+0xe4>)
 8005c1a:	2103      	movs	r1, #3
 8005c1c:	2266      	movs	r2, #102	; 0x66
 8005c1e:	f7fa fb3d 	bl	800029c <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 8005c22:	2314      	movs	r3, #20
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe faf1 	bl	800420c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_HIGH);
 8005c2a:	4820      	ldr	r0, [pc, #128]	; (8005cac <BACKWARD_Task+0xe8>)
 8005c2c:	f7ff ff30 	bl	8005a90 <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 8005c30:	2314      	movs	r3, #20
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fe faea 	bl	800420c <vTaskDelay>

					 DIGITAL_IO_SetOutputHigh(&MOTOR_LOW);
 8005c38:	481d      	ldr	r0, [pc, #116]	; (8005cb0 <BACKWARD_Task+0xec>)
 8005c3a:	f7ff ff19 	bl	8005a70 <DIGITAL_IO_SetOutputHigh>
					  vTaskDelay( xDelay );
 8005c3e:	2314      	movs	r3, #20
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe fae3 	bl	800420c <vTaskDelay>
 8005c46:	e028      	b.n	8005c9a <BACKWARD_Task+0xd6>
			}

			else{
				//stop
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x00);
 8005c48:	4817      	ldr	r0, [pc, #92]	; (8005ca8 <BACKWARD_Task+0xe4>)
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f7fa fb25 	bl	800029c <TLE94112EL_SetHBRegdata>

				  vTaskDelay( xDelay );
 8005c52:	2314      	movs	r3, #20
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fe fad9 	bl	800420c <vTaskDelay>
					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x00);
 8005c5a:	4813      	ldr	r0, [pc, #76]	; (8005ca8 <BACKWARD_Task+0xe4>)
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f7fa fb1c 	bl	800029c <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 8005c64:	2314      	movs	r3, #20
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fe fad0 	bl	800420c <vTaskDelay>
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x00);
 8005c6c:	480e      	ldr	r0, [pc, #56]	; (8005ca8 <BACKWARD_Task+0xe4>)
 8005c6e:	2103      	movs	r1, #3
 8005c70:	2200      	movs	r2, #0
 8005c72:	f7fa fb13 	bl	800029c <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 8005c76:	2314      	movs	r3, #20
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fe fac7 	bl	800420c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_HIGH);
 8005c7e:	480b      	ldr	r0, [pc, #44]	; (8005cac <BACKWARD_Task+0xe8>)
 8005c80:	f7ff ff06 	bl	8005a90 <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 8005c84:	2314      	movs	r3, #20
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe fac0 	bl	800420c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_LOW);
 8005c8c:	4808      	ldr	r0, [pc, #32]	; (8005cb0 <BACKWARD_Task+0xec>)
 8005c8e:	f7ff feff 	bl	8005a90 <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 8005c92:	2314      	movs	r3, #20
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fe fab9 	bl	800420c <vTaskDelay>

			}
		}
	}
 8005c9a:	e797      	b.n	8005bcc <BACKWARD_Task+0x8>
 8005c9c:	1ffe8b98 	.word	0x1ffe8b98
 8005ca0:	08006958 	.word	0x08006958
 8005ca4:	1ffe8bb8 	.word	0x1ffe8bb8
 8005ca8:	08006a80 	.word	0x08006a80
 8005cac:	08006a04 	.word	0x08006a04
 8005cb0:	08006a18 	.word	0x08006a18

08005cb4 <LEFT_Task>:
}

void LEFT_Task(void *p){
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(LEFT_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8005cbc:	4b33      	ldr	r3, [pc, #204]	; (8005d8c <LEFT_Task+0xd8>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8005cc6:	f7fd fe53 	bl	8003970 <xQueueSemaphoreTake>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d15c      	bne.n	8005d8a <LEFT_Task+0xd6>

			pin_status = PIN_INTERRUPT_GetPinValue(&DIRECTION_INTERRUPT);
 8005cd0:	482f      	ldr	r0, [pc, #188]	; (8005d90 <LEFT_Task+0xdc>)
 8005cd2:	f7ff feed 	bl	8005ab0 <PIN_INTERRUPT_GetPinValue>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	4b2e      	ldr	r3, [pc, #184]	; (8005d94 <LEFT_Task+0xe0>)
 8005cda:	601a      	str	r2, [r3, #0]
			if(pin_status==1){
 8005cdc:	4b2d      	ldr	r3, [pc, #180]	; (8005d94 <LEFT_Task+0xe0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d129      	bne.n	8005d38 <LEFT_Task+0x84>
				//LEFT
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x66);
 8005ce4:	482c      	ldr	r0, [pc, #176]	; (8005d98 <LEFT_Task+0xe4>)
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	2266      	movs	r2, #102	; 0x66
 8005cea:	f7fa fad7 	bl	800029c <TLE94112EL_SetHBRegdata>

				  vTaskDelay( xDelay );
 8005cee:	2314      	movs	r3, #20
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fe fa8b 	bl	800420c <vTaskDelay>
					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x99);
 8005cf6:	4828      	ldr	r0, [pc, #160]	; (8005d98 <LEFT_Task+0xe4>)
 8005cf8:	2102      	movs	r1, #2
 8005cfa:	2299      	movs	r2, #153	; 0x99
 8005cfc:	f7fa face 	bl	800029c <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 8005d00:	2314      	movs	r3, #20
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fe fa82 	bl	800420c <vTaskDelay>
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x99);
 8005d08:	4823      	ldr	r0, [pc, #140]	; (8005d98 <LEFT_Task+0xe4>)
 8005d0a:	2103      	movs	r1, #3
 8005d0c:	2299      	movs	r2, #153	; 0x99
 8005d0e:	f7fa fac5 	bl	800029c <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 8005d12:	2314      	movs	r3, #20
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fe fa79 	bl	800420c <vTaskDelay>
					 DIGITAL_IO_SetOutputLow(&MOTOR_HIGH);
 8005d1a:	4820      	ldr	r0, [pc, #128]	; (8005d9c <LEFT_Task+0xe8>)
 8005d1c:	f7ff feb8 	bl	8005a90 <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 8005d20:	2314      	movs	r3, #20
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe fa72 	bl	800420c <vTaskDelay>

					 DIGITAL_IO_SetOutputHigh(&MOTOR_LOW);
 8005d28:	481d      	ldr	r0, [pc, #116]	; (8005da0 <LEFT_Task+0xec>)
 8005d2a:	f7ff fea1 	bl	8005a70 <DIGITAL_IO_SetOutputHigh>
					  vTaskDelay( xDelay );
 8005d2e:	2314      	movs	r3, #20
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fe fa6b 	bl	800420c <vTaskDelay>
 8005d36:	e028      	b.n	8005d8a <LEFT_Task+0xd6>
			}

			else{
				//stop
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x00);
 8005d38:	4817      	ldr	r0, [pc, #92]	; (8005d98 <LEFT_Task+0xe4>)
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f7fa faad 	bl	800029c <TLE94112EL_SetHBRegdata>

				  vTaskDelay( xDelay );
 8005d42:	2314      	movs	r3, #20
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fe fa61 	bl	800420c <vTaskDelay>
					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x00);
 8005d4a:	4813      	ldr	r0, [pc, #76]	; (8005d98 <LEFT_Task+0xe4>)
 8005d4c:	2102      	movs	r1, #2
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f7fa faa4 	bl	800029c <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 8005d54:	2314      	movs	r3, #20
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe fa58 	bl	800420c <vTaskDelay>
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x00);
 8005d5c:	480e      	ldr	r0, [pc, #56]	; (8005d98 <LEFT_Task+0xe4>)
 8005d5e:	2103      	movs	r1, #3
 8005d60:	2200      	movs	r2, #0
 8005d62:	f7fa fa9b 	bl	800029c <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 8005d66:	2314      	movs	r3, #20
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fe fa4f 	bl	800420c <vTaskDelay>
					 DIGITAL_IO_SetOutputLow(&MOTOR_HIGH);
 8005d6e:	480b      	ldr	r0, [pc, #44]	; (8005d9c <LEFT_Task+0xe8>)
 8005d70:	f7ff fe8e 	bl	8005a90 <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 8005d74:	2314      	movs	r3, #20
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe fa48 	bl	800420c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_LOW);
 8005d7c:	4808      	ldr	r0, [pc, #32]	; (8005da0 <LEFT_Task+0xec>)
 8005d7e:	f7ff fe87 	bl	8005a90 <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 8005d82:	2314      	movs	r3, #20
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fe fa41 	bl	800420c <vTaskDelay>
			}
		}
	}
 8005d8a:	e797      	b.n	8005cbc <LEFT_Task+0x8>
 8005d8c:	1ffe8ba4 	.word	0x1ffe8ba4
 8005d90:	08006958 	.word	0x08006958
 8005d94:	1ffe8bb8 	.word	0x1ffe8bb8
 8005d98:	08006a80 	.word	0x08006a80
 8005d9c:	08006a04 	.word	0x08006a04
 8005da0:	08006a18 	.word	0x08006a18

08005da4 <RIGHT_Task>:
}

void RIGHT_Task(void *p){
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(RIGHT_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8005dac:	4b33      	ldr	r3, [pc, #204]	; (8005e7c <RIGHT_Task+0xd8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f04f 31ff 	mov.w	r1, #4294967295
 8005db6:	f7fd fddb 	bl	8003970 <xQueueSemaphoreTake>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d15c      	bne.n	8005e7a <RIGHT_Task+0xd6>

			pin_status = PIN_INTERRUPT_GetPinValue(&DIRECTION_INTERRUPT);
 8005dc0:	482f      	ldr	r0, [pc, #188]	; (8005e80 <RIGHT_Task+0xdc>)
 8005dc2:	f7ff fe75 	bl	8005ab0 <PIN_INTERRUPT_GetPinValue>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	4b2e      	ldr	r3, [pc, #184]	; (8005e84 <RIGHT_Task+0xe0>)
 8005dca:	601a      	str	r2, [r3, #0]
			if(pin_status==1){
 8005dcc:	4b2d      	ldr	r3, [pc, #180]	; (8005e84 <RIGHT_Task+0xe0>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d129      	bne.n	8005e28 <RIGHT_Task+0x84>
				//RIGHT
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x99);
 8005dd4:	482c      	ldr	r0, [pc, #176]	; (8005e88 <RIGHT_Task+0xe4>)
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	2299      	movs	r2, #153	; 0x99
 8005dda:	f7fa fa5f 	bl	800029c <TLE94112EL_SetHBRegdata>

				  vTaskDelay( xDelay );
 8005dde:	2314      	movs	r3, #20
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fe fa13 	bl	800420c <vTaskDelay>
					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x66);
 8005de6:	4828      	ldr	r0, [pc, #160]	; (8005e88 <RIGHT_Task+0xe4>)
 8005de8:	2102      	movs	r1, #2
 8005dea:	2266      	movs	r2, #102	; 0x66
 8005dec:	f7fa fa56 	bl	800029c <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 8005df0:	2314      	movs	r3, #20
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fe fa0a 	bl	800420c <vTaskDelay>
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x66);
 8005df8:	4823      	ldr	r0, [pc, #140]	; (8005e88 <RIGHT_Task+0xe4>)
 8005dfa:	2103      	movs	r1, #3
 8005dfc:	2266      	movs	r2, #102	; 0x66
 8005dfe:	f7fa fa4d 	bl	800029c <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 8005e02:	2314      	movs	r3, #20
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fe fa01 	bl	800420c <vTaskDelay>
					 DIGITAL_IO_SetOutputHigh(&MOTOR_HIGH);
 8005e0a:	4820      	ldr	r0, [pc, #128]	; (8005e8c <RIGHT_Task+0xe8>)
 8005e0c:	f7ff fe30 	bl	8005a70 <DIGITAL_IO_SetOutputHigh>
					  vTaskDelay( xDelay );
 8005e10:	2314      	movs	r3, #20
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe f9fa 	bl	800420c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_LOW);
 8005e18:	481d      	ldr	r0, [pc, #116]	; (8005e90 <RIGHT_Task+0xec>)
 8005e1a:	f7ff fe39 	bl	8005a90 <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 8005e1e:	2314      	movs	r3, #20
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fe f9f3 	bl	800420c <vTaskDelay>
 8005e26:	e028      	b.n	8005e7a <RIGHT_Task+0xd6>
			}

			else{
				//stop
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x01, 0x00);
 8005e28:	4817      	ldr	r0, [pc, #92]	; (8005e88 <RIGHT_Task+0xe4>)
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f7fa fa35 	bl	800029c <TLE94112EL_SetHBRegdata>

				  vTaskDelay( xDelay );
 8005e32:	2314      	movs	r3, #20
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fe f9e9 	bl	800420c <vTaskDelay>
					TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x02, 0x00);
 8005e3a:	4813      	ldr	r0, [pc, #76]	; (8005e88 <RIGHT_Task+0xe4>)
 8005e3c:	2102      	movs	r1, #2
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f7fa fa2c 	bl	800029c <TLE94112EL_SetHBRegdata>
					  vTaskDelay( xDelay );
 8005e44:	2314      	movs	r3, #20
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fe f9e0 	bl	800420c <vTaskDelay>
				TLE94112EL_SetHBRegdata(&TLE94112EL_0, 0x03, 0x00);
 8005e4c:	480e      	ldr	r0, [pc, #56]	; (8005e88 <RIGHT_Task+0xe4>)
 8005e4e:	2103      	movs	r1, #3
 8005e50:	2200      	movs	r2, #0
 8005e52:	f7fa fa23 	bl	800029c <TLE94112EL_SetHBRegdata>
				  vTaskDelay( xDelay );
 8005e56:	2314      	movs	r3, #20
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe f9d7 	bl	800420c <vTaskDelay>
					 DIGITAL_IO_SetOutputLow(&MOTOR_HIGH);
 8005e5e:	480b      	ldr	r0, [pc, #44]	; (8005e8c <RIGHT_Task+0xe8>)
 8005e60:	f7ff fe16 	bl	8005a90 <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 8005e64:	2314      	movs	r3, #20
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe f9d0 	bl	800420c <vTaskDelay>

					 DIGITAL_IO_SetOutputLow(&MOTOR_LOW);
 8005e6c:	4808      	ldr	r0, [pc, #32]	; (8005e90 <RIGHT_Task+0xec>)
 8005e6e:	f7ff fe0f 	bl	8005a90 <DIGITAL_IO_SetOutputLow>
					  vTaskDelay( xDelay );
 8005e72:	2314      	movs	r3, #20
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fe f9c9 	bl	800420c <vTaskDelay>
			}
		}
	}
 8005e7a:	e797      	b.n	8005dac <RIGHT_Task+0x8>
 8005e7c:	1ffe8bb0 	.word	0x1ffe8bb0
 8005e80:	08006958 	.word	0x08006958
 8005e84:	1ffe8bb8 	.word	0x1ffe8bb8
 8005e88:	08006a80 	.word	0x08006a80
 8005e8c:	08006a04 	.word	0x08006a04
 8005e90:	08006a18 	.word	0x08006a18

08005e94 <UP_Task>:
}

void UP_Task(void *p){
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(UP_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8005e9c:	4b1e      	ldr	r3, [pc, #120]	; (8005f18 <UP_Task+0x84>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8005ea6:	f7fd fd63 	bl	8003970 <xQueueSemaphoreTake>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d131      	bne.n	8005f14 <UP_Task+0x80>

	 	  	// sets the duty to 3%.
	    	// LIFT UP
			PWM_SetDutyCycle(&PWM_LIFT,800);
 8005eb0:	481a      	ldr	r0, [pc, #104]	; (8005f1c <UP_Task+0x88>)
 8005eb2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005eb6:	f7fc fd05 	bl	80028c4 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 8005eba:	2314      	movs	r3, #20
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fe f9a5 	bl	800420c <vTaskDelay>
			PWM_SetDutyCycle(&PWM_LIFT,700);
 8005ec2:	4816      	ldr	r0, [pc, #88]	; (8005f1c <UP_Task+0x88>)
 8005ec4:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005ec8:	f7fc fcfc 	bl	80028c4 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 8005ecc:	2314      	movs	r3, #20
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe f99c 	bl	800420c <vTaskDelay>
			PWM_SetDutyCycle(&PWM_LIFT,600);
 8005ed4:	4811      	ldr	r0, [pc, #68]	; (8005f1c <UP_Task+0x88>)
 8005ed6:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005eda:	f7fc fcf3 	bl	80028c4 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 8005ede:	2314      	movs	r3, #20
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fe f993 	bl	800420c <vTaskDelay>
			PWM_SetDutyCycle(&PWM_LIFT,500);
 8005ee6:	480d      	ldr	r0, [pc, #52]	; (8005f1c <UP_Task+0x88>)
 8005ee8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005eec:	f7fc fcea 	bl	80028c4 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 8005ef0:	2314      	movs	r3, #20
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fe f98a 	bl	800420c <vTaskDelay>
			PWM_SetDutyCycle(&PWM_LIFT,400);
 8005ef8:	4808      	ldr	r0, [pc, #32]	; (8005f1c <UP_Task+0x88>)
 8005efa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005efe:	f7fc fce1 	bl	80028c4 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 8005f02:	2314      	movs	r3, #20
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fe f981 	bl	800420c <vTaskDelay>
			PWM_SetDutyCycle(&PWM_LIFT,300);
 8005f0a:	4804      	ldr	r0, [pc, #16]	; (8005f1c <UP_Task+0x88>)
 8005f0c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005f10:	f7fc fcd8 	bl	80028c4 <PWM_SetDutyCycle>

		}
	}
 8005f14:	e7c2      	b.n	8005e9c <UP_Task+0x8>
 8005f16:	bf00      	nop
 8005f18:	1ffe8bc0 	.word	0x1ffe8bc0
 8005f1c:	1ffe8884 	.word	0x1ffe8884

08005f20 <DOWN_Task>:
}

void DOWN_Task(void *p){
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(DOWN_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8005f28:	4b1e      	ldr	r3, [pc, #120]	; (8005fa4 <DOWN_Task+0x84>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8005f32:	f7fd fd1d 	bl	8003970 <xQueueSemaphoreTake>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d131      	bne.n	8005fa0 <DOWN_Task+0x80>

	 	  	// sets the duty to 9 %.
	    	// LIFT DOWN
			PWM_SetDutyCycle(&PWM_LIFT,400);
 8005f3c:	481a      	ldr	r0, [pc, #104]	; (8005fa8 <DOWN_Task+0x88>)
 8005f3e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005f42:	f7fc fcbf 	bl	80028c4 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 8005f46:	2314      	movs	r3, #20
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fe f95f 	bl	800420c <vTaskDelay>
			PWM_SetDutyCycle(&PWM_LIFT,500);
 8005f4e:	4816      	ldr	r0, [pc, #88]	; (8005fa8 <DOWN_Task+0x88>)
 8005f50:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005f54:	f7fc fcb6 	bl	80028c4 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 8005f58:	2314      	movs	r3, #20
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe f956 	bl	800420c <vTaskDelay>
			PWM_SetDutyCycle(&PWM_LIFT,600);
 8005f60:	4811      	ldr	r0, [pc, #68]	; (8005fa8 <DOWN_Task+0x88>)
 8005f62:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005f66:	f7fc fcad 	bl	80028c4 <PWM_SetDutyCycle>
			vTaskDelay( xDelay );
 8005f6a:	2314      	movs	r3, #20
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fe f94d 	bl	800420c <vTaskDelay>
	    	PWM_SetDutyCycle(&PWM_LIFT,700);
 8005f72:	480d      	ldr	r0, [pc, #52]	; (8005fa8 <DOWN_Task+0x88>)
 8005f74:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005f78:	f7fc fca4 	bl	80028c4 <PWM_SetDutyCycle>
	    	vTaskDelay( xDelay );
 8005f7c:	2314      	movs	r3, #20
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe f944 	bl	800420c <vTaskDelay>
	    	PWM_SetDutyCycle(&PWM_LIFT,800);
 8005f84:	4808      	ldr	r0, [pc, #32]	; (8005fa8 <DOWN_Task+0x88>)
 8005f86:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005f8a:	f7fc fc9b 	bl	80028c4 <PWM_SetDutyCycle>
	    	vTaskDelay( xDelay );
 8005f8e:	2314      	movs	r3, #20
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fe f93b 	bl	800420c <vTaskDelay>
	    	PWM_SetDutyCycle(&PWM_LIFT,900);
 8005f96:	4804      	ldr	r0, [pc, #16]	; (8005fa8 <DOWN_Task+0x88>)
 8005f98:	f44f 7161 	mov.w	r1, #900	; 0x384
 8005f9c:	f7fc fc92 	bl	80028c4 <PWM_SetDutyCycle>

		}
	}
 8005fa0:	e7c2      	b.n	8005f28 <DOWN_Task+0x8>
 8005fa2:	bf00      	nop
 8005fa4:	1ffe8b9c 	.word	0x1ffe8b9c
 8005fa8:	1ffe8884 	.word	0x1ffe8884

08005fac <OPEN_Task>:
}

void OPEN_Task(void *p){
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(OPEN_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8005fb4:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <OPEN_Task+0x4c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f04f 31ff 	mov.w	r1, #4294967295
 8005fbe:	f7fd fcd7 	bl	8003970 <xQueueSemaphoreTake>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d115      	bne.n	8005ff4 <OPEN_Task+0x48>

			pin_status = PIN_INTERRUPT_GetPinValue(&CLAMP_INTERRUPT);
 8005fc8:	480c      	ldr	r0, [pc, #48]	; (8005ffc <OPEN_Task+0x50>)
 8005fca:	f7ff fd71 	bl	8005ab0 <PIN_INTERRUPT_GetPinValue>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <OPEN_Task+0x54>)
 8005fd2:	601a      	str	r2, [r3, #0]
		     if(pin_status == 1)
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <OPEN_Task+0x54>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d104      	bne.n	8005fe6 <OPEN_Task+0x3a>
		     {
		 	  	// sets the duty to 2%.
		    	// clamp open
		    	 PWM_SetDutyCycle(&PWM_CLAMP,200);
 8005fdc:	4809      	ldr	r0, [pc, #36]	; (8006004 <OPEN_Task+0x58>)
 8005fde:	21c8      	movs	r1, #200	; 0xc8
 8005fe0:	f7fc fc70 	bl	80028c4 <PWM_SetDutyCycle>
 8005fe4:	e003      	b.n	8005fee <OPEN_Task+0x42>

		     else
		     {
		    	 // sets the channel duty to 0%.
		    	 // clamp maintain
		    	 PWM_SetDutyCycle(&PWM_CLAMP,0);
 8005fe6:	4807      	ldr	r0, [pc, #28]	; (8006004 <OPEN_Task+0x58>)
 8005fe8:	2100      	movs	r1, #0
 8005fea:	f7fc fc6b 	bl	80028c4 <PWM_SetDutyCycle>
		     }

		 	pin_status = 0;
 8005fee:	4b04      	ldr	r3, [pc, #16]	; (8006000 <OPEN_Task+0x54>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]

		}
	}
 8005ff4:	e7de      	b.n	8005fb4 <OPEN_Task+0x8>
 8005ff6:	bf00      	nop
 8005ff8:	1ffe8bac 	.word	0x1ffe8bac
 8005ffc:	0800697c 	.word	0x0800697c
 8006000:	1ffe8bb8 	.word	0x1ffe8bb8
 8006004:	1ffe8850 	.word	0x1ffe8850

08006008 <CLOSE_Task>:
}

void CLOSE_Task(void *p){
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(CLOSE_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8006010:	4b11      	ldr	r3, [pc, #68]	; (8006058 <CLOSE_Task+0x50>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f04f 31ff 	mov.w	r1, #4294967295
 800601a:	f7fd fca9 	bl	8003970 <xQueueSemaphoreTake>
 800601e:	4603      	mov	r3, r0
 8006020:	2b01      	cmp	r3, #1
 8006022:	d117      	bne.n	8006054 <CLOSE_Task+0x4c>

			pin_status = PIN_INTERRUPT_GetPinValue(&CLAMP_INTERRUPT);
 8006024:	480d      	ldr	r0, [pc, #52]	; (800605c <CLOSE_Task+0x54>)
 8006026:	f7ff fd43 	bl	8005ab0 <PIN_INTERRUPT_GetPinValue>
 800602a:	4602      	mov	r2, r0
 800602c:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <CLOSE_Task+0x58>)
 800602e:	601a      	str	r2, [r3, #0]
		     if(pin_status == 1)
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <CLOSE_Task+0x58>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d105      	bne.n	8006044 <CLOSE_Task+0x3c>
		     {
		 	  	// sets the duty to 12%.
		    	// clamp CLOSE
		    	 PWM_SetDutyCycle(&PWM_CLAMP,1200);
 8006038:	480a      	ldr	r0, [pc, #40]	; (8006064 <CLOSE_Task+0x5c>)
 800603a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800603e:	f7fc fc41 	bl	80028c4 <PWM_SetDutyCycle>
 8006042:	e004      	b.n	800604e <CLOSE_Task+0x46>

		     else
		     {
		    	 // sets the channel duty to 10%.
		    	 // clamp maintain
		    	 PWM_SetDutyCycle(&PWM_CLAMP,1000);
 8006044:	4807      	ldr	r0, [pc, #28]	; (8006064 <CLOSE_Task+0x5c>)
 8006046:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800604a:	f7fc fc3b 	bl	80028c4 <PWM_SetDutyCycle>
		     }

		 	pin_status = 0;
 800604e:	4b04      	ldr	r3, [pc, #16]	; (8006060 <CLOSE_Task+0x58>)
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]

		}
	}
 8006054:	e7dc      	b.n	8006010 <CLOSE_Task+0x8>
 8006056:	bf00      	nop
 8006058:	1ffe8bcc 	.word	0x1ffe8bcc
 800605c:	0800697c 	.word	0x0800697c
 8006060:	1ffe8bb8 	.word	0x1ffe8bb8
 8006064:	1ffe8850 	.word	0x1ffe8850

08006068 <ROTATE_Task>:
}

void ROTATE_Task(void *p){
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(ROTATE_interruptSemaphore, portMAX_DELAY) == pdPASS){
 8006070:	4b46      	ldr	r3, [pc, #280]	; (800618c <ROTATE_Task+0x124>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f04f 31ff 	mov.w	r1, #4294967295
 800607a:	f7fd fc79 	bl	8003970 <xQueueSemaphoreTake>
 800607e:	4603      	mov	r3, r0
 8006080:	2b01      	cmp	r3, #1
 8006082:	f040 8081 	bne.w	8006188 <ROTATE_Task+0x120>

			pin_status = PIN_INTERRUPT_GetPinValue(&ROTATE_INTERRUPT);
 8006086:	4842      	ldr	r0, [pc, #264]	; (8006190 <ROTATE_Task+0x128>)
 8006088:	f7ff fd12 	bl	8005ab0 <PIN_INTERRUPT_GetPinValue>
 800608c:	4602      	mov	r2, r0
 800608e:	4b41      	ldr	r3, [pc, #260]	; (8006194 <ROTATE_Task+0x12c>)
 8006090:	601a      	str	r2, [r3, #0]
		     if(pin_status == 1)
 8006092:	4b40      	ldr	r3, [pc, #256]	; (8006194 <ROTATE_Task+0x12c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d13f      	bne.n	800611a <ROTATE_Task+0xb2>
		     {
				 BUS_IO_Write(&LED_BUS_IO, green_led);	//LED INDICATOR
 800609a:	23ff      	movs	r3, #255	; 0xff
 800609c:	483e      	ldr	r0, [pc, #248]	; (8006198 <ROTATE_Task+0x130>)
 800609e:	4619      	mov	r1, r3
 80060a0:	f7ff fbc0 	bl	8005824 <BUS_IO_Write>
				// sets the duty to 3%.
				// Metal
				PWM_SetDutyCycle(&PWM_ROTATE,800);
 80060a4:	483d      	ldr	r0, [pc, #244]	; (800619c <ROTATE_Task+0x134>)
 80060a6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80060aa:	f7fc fc0b 	bl	80028c4 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 80060ae:	2314      	movs	r3, #20
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fe f8ab 	bl	800420c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,700);
 80060b6:	4839      	ldr	r0, [pc, #228]	; (800619c <ROTATE_Task+0x134>)
 80060b8:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80060bc:	f7fc fc02 	bl	80028c4 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 80060c0:	2314      	movs	r3, #20
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fe f8a2 	bl	800420c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,600);
 80060c8:	4834      	ldr	r0, [pc, #208]	; (800619c <ROTATE_Task+0x134>)
 80060ca:	f44f 7116 	mov.w	r1, #600	; 0x258
 80060ce:	f7fc fbf9 	bl	80028c4 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 80060d2:	2314      	movs	r3, #20
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe f899 	bl	800420c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,500);
 80060da:	4830      	ldr	r0, [pc, #192]	; (800619c <ROTATE_Task+0x134>)
 80060dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80060e0:	f7fc fbf0 	bl	80028c4 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 80060e4:	2314      	movs	r3, #20
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fe f890 	bl	800420c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,400);
 80060ec:	482b      	ldr	r0, [pc, #172]	; (800619c <ROTATE_Task+0x134>)
 80060ee:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80060f2:	f7fc fbe7 	bl	80028c4 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 80060f6:	2314      	movs	r3, #20
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe f887 	bl	800420c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,300);
 80060fe:	4827      	ldr	r0, [pc, #156]	; (800619c <ROTATE_Task+0x134>)
 8006100:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006104:	f7fc fbde 	bl	80028c4 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 8006108:	2314      	movs	r3, #20
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe f87e 	bl	800420c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,200);
 8006110:	4822      	ldr	r0, [pc, #136]	; (800619c <ROTATE_Task+0x134>)
 8006112:	21c8      	movs	r1, #200	; 0xc8
 8006114:	f7fc fbd6 	bl	80028c4 <PWM_SetDutyCycle>
 8006118:	e036      	b.n	8006188 <ROTATE_Task+0x120>

		     }

		     else
		     {
		    	 BUS_IO_Write(&LED_BUS_IO, red_led);	//LED INDICATOR
 800611a:	2300      	movs	r3, #0
 800611c:	481e      	ldr	r0, [pc, #120]	; (8006198 <ROTATE_Task+0x130>)
 800611e:	4619      	mov	r1, r3
 8006120:	f7ff fb80 	bl	8005824 <BUS_IO_Write>
				// sets the duty to 10 %.
				// NON-metal
				PWM_SetDutyCycle(&PWM_ROTATE,400);
 8006124:	481d      	ldr	r0, [pc, #116]	; (800619c <ROTATE_Task+0x134>)
 8006126:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800612a:	f7fc fbcb 	bl	80028c4 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 800612e:	2314      	movs	r3, #20
 8006130:	4618      	mov	r0, r3
 8006132:	f7fe f86b 	bl	800420c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,500);
 8006136:	4819      	ldr	r0, [pc, #100]	; (800619c <ROTATE_Task+0x134>)
 8006138:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800613c:	f7fc fbc2 	bl	80028c4 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 8006140:	2314      	movs	r3, #20
 8006142:	4618      	mov	r0, r3
 8006144:	f7fe f862 	bl	800420c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,600);
 8006148:	4814      	ldr	r0, [pc, #80]	; (800619c <ROTATE_Task+0x134>)
 800614a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800614e:	f7fc fbb9 	bl	80028c4 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 8006152:	2314      	movs	r3, #20
 8006154:	4618      	mov	r0, r3
 8006156:	f7fe f859 	bl	800420c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,700);
 800615a:	4810      	ldr	r0, [pc, #64]	; (800619c <ROTATE_Task+0x134>)
 800615c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8006160:	f7fc fbb0 	bl	80028c4 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 8006164:	2314      	movs	r3, #20
 8006166:	4618      	mov	r0, r3
 8006168:	f7fe f850 	bl	800420c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,800);
 800616c:	480b      	ldr	r0, [pc, #44]	; (800619c <ROTATE_Task+0x134>)
 800616e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8006172:	f7fc fba7 	bl	80028c4 <PWM_SetDutyCycle>
				vTaskDelay( xDelay );
 8006176:	2314      	movs	r3, #20
 8006178:	4618      	mov	r0, r3
 800617a:	f7fe f847 	bl	800420c <vTaskDelay>
				PWM_SetDutyCycle(&PWM_ROTATE,900);
 800617e:	4807      	ldr	r0, [pc, #28]	; (800619c <ROTATE_Task+0x134>)
 8006180:	f44f 7161 	mov.w	r1, #900	; 0x384
 8006184:	f7fc fb9e 	bl	80028c4 <PWM_SetDutyCycle>

		     }
		}
	}
 8006188:	e772      	b.n	8006070 <ROTATE_Task+0x8>
 800618a:	bf00      	nop
 800618c:	1ffe8ba0 	.word	0x1ffe8ba0
 8006190:	08006934 	.word	0x08006934
 8006194:	1ffe8bb8 	.word	0x1ffe8bb8
 8006198:	1ffe8948 	.word	0x1ffe8948
 800619c:	1ffe88b8 	.word	0x1ffe88b8

080061a0 <DIRECTION_Task>:
}

void DIRECTION_Task(void *p){
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(DIRECTION_interruptSemaphore, portMAX_DELAY) == pdPASS){
 80061a8:	4b1f      	ldr	r3, [pc, #124]	; (8006228 <DIRECTION_Task+0x88>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f04f 31ff 	mov.w	r1, #4294967295
 80061b2:	f7fd fbdd 	bl	8003970 <xQueueSemaphoreTake>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d133      	bne.n	8006224 <DIRECTION_Task+0x84>

			direction_status = BUS_IO_Read(&DIRECTION_BUS_IO);
 80061bc:	481b      	ldr	r0, [pc, #108]	; (800622c <DIRECTION_Task+0x8c>)
 80061be:	f7ff fb03 	bl	80057c8 <BUS_IO_Read>
 80061c2:	4603      	mov	r3, r0
 80061c4:	461a      	mov	r2, r3
 80061c6:	4b1a      	ldr	r3, [pc, #104]	; (8006230 <DIRECTION_Task+0x90>)
 80061c8:	801a      	strh	r2, [r3, #0]

			switch(direction_status){
 80061ca:	4b19      	ldr	r3, [pc, #100]	; (8006230 <DIRECTION_Task+0x90>)
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d8e9      	bhi.n	80061a8 <DIRECTION_Task+0x8>
 80061d4:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <DIRECTION_Task+0x3c>)
 80061d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061da:	bf00      	nop
 80061dc:	080061ed 	.word	0x080061ed
 80061e0:	080061fb 	.word	0x080061fb
 80061e4:	08006209 	.word	0x08006209
 80061e8:	08006217 	.word	0x08006217

			case 0:
				xSemaphoreGiveFromISR(FORWARD_interruptSemaphore, NULL);
 80061ec:	4b11      	ldr	r3, [pc, #68]	; (8006234 <DIRECTION_Task+0x94>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4618      	mov	r0, r3
 80061f2:	2100      	movs	r1, #0
 80061f4:	f7fd fa40 	bl	8003678 <xQueueGiveFromISR>
				break;
 80061f8:	e014      	b.n	8006224 <DIRECTION_Task+0x84>

			case 1:
				xSemaphoreGiveFromISR(BACKWARD_interruptSemaphore, NULL);
 80061fa:	4b0f      	ldr	r3, [pc, #60]	; (8006238 <DIRECTION_Task+0x98>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	2100      	movs	r1, #0
 8006202:	f7fd fa39 	bl	8003678 <xQueueGiveFromISR>
				break;
 8006206:	e00d      	b.n	8006224 <DIRECTION_Task+0x84>

			case 2:
				xSemaphoreGiveFromISR(LEFT_interruptSemaphore, NULL);
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <DIRECTION_Task+0x9c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4618      	mov	r0, r3
 800620e:	2100      	movs	r1, #0
 8006210:	f7fd fa32 	bl	8003678 <xQueueGiveFromISR>
				break;
 8006214:	e006      	b.n	8006224 <DIRECTION_Task+0x84>

			case 3:
				xSemaphoreGiveFromISR(RIGHT_interruptSemaphore, NULL);
 8006216:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <DIRECTION_Task+0xa0>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	2100      	movs	r1, #0
 800621e:	f7fd fa2b 	bl	8003678 <xQueueGiveFromISR>
				break;
 8006222:	bf00      	nop

			}
		}
	}
 8006224:	e7c0      	b.n	80061a8 <DIRECTION_Task+0x8>
 8006226:	bf00      	nop
 8006228:	1ffe8bb4 	.word	0x1ffe8bb4
 800622c:	1ffe8920 	.word	0x1ffe8920
 8006230:	1ffe8bbc 	.word	0x1ffe8bbc
 8006234:	1ffe8bc8 	.word	0x1ffe8bc8
 8006238:	1ffe8b98 	.word	0x1ffe8b98
 800623c:	1ffe8ba4 	.word	0x1ffe8ba4
 8006240:	1ffe8bb0 	.word	0x1ffe8bb0

08006244 <CLAMP_Task>:
}

void CLAMP_Task(void *p){
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]

	while(1){

		if (xSemaphoreTake(CLAMP_interruptSemaphore, portMAX_DELAY) == pdPASS){
 800624c:	4b1f      	ldr	r3, [pc, #124]	; (80062cc <CLAMP_Task+0x88>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4618      	mov	r0, r3
 8006252:	f04f 31ff 	mov.w	r1, #4294967295
 8006256:	f7fd fb8b 	bl	8003970 <xQueueSemaphoreTake>
 800625a:	4603      	mov	r3, r0
 800625c:	2b01      	cmp	r3, #1
 800625e:	d133      	bne.n	80062c8 <CLAMP_Task+0x84>

			clamp_status = BUS_IO_Read(&CLAMP_BUS_IO);
 8006260:	481b      	ldr	r0, [pc, #108]	; (80062d0 <CLAMP_Task+0x8c>)
 8006262:	f7ff fab1 	bl	80057c8 <BUS_IO_Read>
 8006266:	4603      	mov	r3, r0
 8006268:	461a      	mov	r2, r3
 800626a:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <CLAMP_Task+0x90>)
 800626c:	801a      	strh	r2, [r3, #0]

			switch(clamp_status){
 800626e:	4b19      	ldr	r3, [pc, #100]	; (80062d4 <CLAMP_Task+0x90>)
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b03      	cmp	r3, #3
 8006276:	d8e9      	bhi.n	800624c <CLAMP_Task+0x8>
 8006278:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <CLAMP_Task+0x3c>)
 800627a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627e:	bf00      	nop
 8006280:	08006291 	.word	0x08006291
 8006284:	0800629f 	.word	0x0800629f
 8006288:	080062ad 	.word	0x080062ad
 800628c:	080062bb 	.word	0x080062bb

			case 0:
				xSemaphoreGiveFromISR(UP_interruptSemaphore, NULL);
 8006290:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <CLAMP_Task+0x94>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4618      	mov	r0, r3
 8006296:	2100      	movs	r1, #0
 8006298:	f7fd f9ee 	bl	8003678 <xQueueGiveFromISR>
				break;
 800629c:	e014      	b.n	80062c8 <CLAMP_Task+0x84>

			case 1:
				xSemaphoreGiveFromISR(DOWN_interruptSemaphore, NULL);
 800629e:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <CLAMP_Task+0x98>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	2100      	movs	r1, #0
 80062a6:	f7fd f9e7 	bl	8003678 <xQueueGiveFromISR>
				break;
 80062aa:	e00d      	b.n	80062c8 <CLAMP_Task+0x84>

			case 2:
				xSemaphoreGiveFromISR(OPEN_interruptSemaphore, NULL);
 80062ac:	4b0c      	ldr	r3, [pc, #48]	; (80062e0 <CLAMP_Task+0x9c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4618      	mov	r0, r3
 80062b2:	2100      	movs	r1, #0
 80062b4:	f7fd f9e0 	bl	8003678 <xQueueGiveFromISR>
				break;
 80062b8:	e006      	b.n	80062c8 <CLAMP_Task+0x84>

			case 3:
				xSemaphoreGiveFromISR(CLOSE_interruptSemaphore, NULL);
 80062ba:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <CLAMP_Task+0xa0>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	2100      	movs	r1, #0
 80062c2:	f7fd f9d9 	bl	8003678 <xQueueGiveFromISR>
				break;
 80062c6:	bf00      	nop

			}
		}
	}
 80062c8:	e7c0      	b.n	800624c <CLAMP_Task+0x8>
 80062ca:	bf00      	nop
 80062cc:	1ffe8bc4 	.word	0x1ffe8bc4
 80062d0:	1ffe8934 	.word	0x1ffe8934
 80062d4:	1ffe8ba8 	.word	0x1ffe8ba8
 80062d8:	1ffe8bc0 	.word	0x1ffe8bc0
 80062dc:	1ffe8b9c 	.word	0x1ffe8b9c
 80062e0:	1ffe8bac 	.word	0x1ffe8bac
 80062e4:	1ffe8bcc 	.word	0x1ffe8bcc

080062e8 <main>:
}

int main(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af02      	add	r7, sp, #8
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 80062ee:	f7ff fad1 	bl	8005894 <DAVE_Init>
 80062f2:	4603      	mov	r3, r0
 80062f4:	71fb      	strb	r3, [r7, #7]

  if(status != DAVE_STATUS_SUCCESS)
 80062f6:	79fb      	ldrb	r3, [r7, #7]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d000      	beq.n	80062fe <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 80062fc:	e7fe      	b.n	80062fc <main+0x14>
  }

	// LIFT DOWN
	 PWM_SetDutyCycle(&PWM_LIFT,900);
 80062fe:	486e      	ldr	r0, [pc, #440]	; (80064b8 <main+0x1d0>)
 8006300:	f44f 7161 	mov.w	r1, #900	; 0x384
 8006304:	f7fc fade 	bl	80028c4 <PWM_SetDutyCycle>
	 PWM_SetDutyCycle(&PWM_ROTATE,200);
 8006308:	486c      	ldr	r0, [pc, #432]	; (80064bc <main+0x1d4>)
 800630a:	21c8      	movs	r1, #200	; 0xc8
 800630c:	f7fc fada 	bl	80028c4 <PWM_SetDutyCycle>

	 BUS_IO_Write(&LED_BUS_IO, red_led);	//LED INDICATOR
 8006310:	2300      	movs	r3, #0
 8006312:	486b      	ldr	r0, [pc, #428]	; (80064c0 <main+0x1d8>)
 8006314:	4619      	mov	r1, r3
 8006316:	f7ff fa85 	bl	8005824 <BUS_IO_Write>
	 DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 800631a:	486a      	ldr	r0, [pc, #424]	; (80064c4 <main+0x1dc>)
 800631c:	f7ff fba8 	bl	8005a70 <DIGITAL_IO_SetOutputHigh>


	// ENABLE DC Motor Shield
	TLE94112EL_Enable(&TLE94112EL_0);
 8006320:	4869      	ldr	r0, [pc, #420]	; (80064c8 <main+0x1e0>)
 8006322:	f7f9 ffe7 	bl	80002f4 <TLE94112EL_Enable>

	// Initialize the FreeRTOS
	xTaskCreate(FORWARD_Task, "FORWARD", 200, NULL, tskIDLE_PRIORITY, &FORWARD_Handle);
 8006326:	2300      	movs	r3, #0
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	4b68      	ldr	r3, [pc, #416]	; (80064cc <main+0x1e4>)
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	4868      	ldr	r0, [pc, #416]	; (80064d0 <main+0x1e8>)
 8006330:	4968      	ldr	r1, [pc, #416]	; (80064d4 <main+0x1ec>)
 8006332:	22c8      	movs	r2, #200	; 0xc8
 8006334:	2300      	movs	r3, #0
 8006336:	f7fd fe15 	bl	8003f64 <xTaskCreate>
	xTaskCreate(BACKWARD_Task, "BACKWARD", 200, NULL, tskIDLE_PRIORITY, &BACKWARD_Handle);
 800633a:	2300      	movs	r3, #0
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	4b66      	ldr	r3, [pc, #408]	; (80064d8 <main+0x1f0>)
 8006340:	9301      	str	r3, [sp, #4]
 8006342:	4866      	ldr	r0, [pc, #408]	; (80064dc <main+0x1f4>)
 8006344:	4966      	ldr	r1, [pc, #408]	; (80064e0 <main+0x1f8>)
 8006346:	22c8      	movs	r2, #200	; 0xc8
 8006348:	2300      	movs	r3, #0
 800634a:	f7fd fe0b 	bl	8003f64 <xTaskCreate>
	xTaskCreate(LEFT_Task, "LEFT", 200, NULL, tskIDLE_PRIORITY, &LEFT_Handle);
 800634e:	2300      	movs	r3, #0
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	4b64      	ldr	r3, [pc, #400]	; (80064e4 <main+0x1fc>)
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	4864      	ldr	r0, [pc, #400]	; (80064e8 <main+0x200>)
 8006358:	4964      	ldr	r1, [pc, #400]	; (80064ec <main+0x204>)
 800635a:	22c8      	movs	r2, #200	; 0xc8
 800635c:	2300      	movs	r3, #0
 800635e:	f7fd fe01 	bl	8003f64 <xTaskCreate>
	xTaskCreate(RIGHT_Task, "RIGHT", 200, NULL, tskIDLE_PRIORITY, &RIGHT_Handle);
 8006362:	2300      	movs	r3, #0
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	4b62      	ldr	r3, [pc, #392]	; (80064f0 <main+0x208>)
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	4862      	ldr	r0, [pc, #392]	; (80064f4 <main+0x20c>)
 800636c:	4962      	ldr	r1, [pc, #392]	; (80064f8 <main+0x210>)
 800636e:	22c8      	movs	r2, #200	; 0xc8
 8006370:	2300      	movs	r3, #0
 8006372:	f7fd fdf7 	bl	8003f64 <xTaskCreate>

	xTaskCreate(UP_Task, "UP", 200, NULL, tskIDLE_PRIORITY, &UP_Handle);
 8006376:	2300      	movs	r3, #0
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	4b60      	ldr	r3, [pc, #384]	; (80064fc <main+0x214>)
 800637c:	9301      	str	r3, [sp, #4]
 800637e:	4860      	ldr	r0, [pc, #384]	; (8006500 <main+0x218>)
 8006380:	4960      	ldr	r1, [pc, #384]	; (8006504 <main+0x21c>)
 8006382:	22c8      	movs	r2, #200	; 0xc8
 8006384:	2300      	movs	r3, #0
 8006386:	f7fd fded 	bl	8003f64 <xTaskCreate>
	xTaskCreate(DOWN_Task, "DOWN", 200, NULL, tskIDLE_PRIORITY, &DOWN_Handle);
 800638a:	2300      	movs	r3, #0
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	4b5e      	ldr	r3, [pc, #376]	; (8006508 <main+0x220>)
 8006390:	9301      	str	r3, [sp, #4]
 8006392:	485e      	ldr	r0, [pc, #376]	; (800650c <main+0x224>)
 8006394:	495e      	ldr	r1, [pc, #376]	; (8006510 <main+0x228>)
 8006396:	22c8      	movs	r2, #200	; 0xc8
 8006398:	2300      	movs	r3, #0
 800639a:	f7fd fde3 	bl	8003f64 <xTaskCreate>
	xTaskCreate(OPEN_Task, "OPEN", 200, NULL, tskIDLE_PRIORITY, &OPEN_Handle);
 800639e:	2300      	movs	r3, #0
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	4b5c      	ldr	r3, [pc, #368]	; (8006514 <main+0x22c>)
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	485c      	ldr	r0, [pc, #368]	; (8006518 <main+0x230>)
 80063a8:	495c      	ldr	r1, [pc, #368]	; (800651c <main+0x234>)
 80063aa:	22c8      	movs	r2, #200	; 0xc8
 80063ac:	2300      	movs	r3, #0
 80063ae:	f7fd fdd9 	bl	8003f64 <xTaskCreate>
	xTaskCreate(CLOSE_Task, "CLOSE", 200, NULL, tskIDLE_PRIORITY, &CLOSE_Handle);
 80063b2:	2300      	movs	r3, #0
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	4b5a      	ldr	r3, [pc, #360]	; (8006520 <main+0x238>)
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	485a      	ldr	r0, [pc, #360]	; (8006524 <main+0x23c>)
 80063bc:	495a      	ldr	r1, [pc, #360]	; (8006528 <main+0x240>)
 80063be:	22c8      	movs	r2, #200	; 0xc8
 80063c0:	2300      	movs	r3, #0
 80063c2:	f7fd fdcf 	bl	8003f64 <xTaskCreate>

	xTaskCreate(ROTATE_Task, "ROTATE", 200, NULL, tskIDLE_PRIORITY, &ROTATE_Handle);
 80063c6:	2300      	movs	r3, #0
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	4b58      	ldr	r3, [pc, #352]	; (800652c <main+0x244>)
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	4858      	ldr	r0, [pc, #352]	; (8006530 <main+0x248>)
 80063d0:	4958      	ldr	r1, [pc, #352]	; (8006534 <main+0x24c>)
 80063d2:	22c8      	movs	r2, #200	; 0xc8
 80063d4:	2300      	movs	r3, #0
 80063d6:	f7fd fdc5 	bl	8003f64 <xTaskCreate>
	xTaskCreate(DIRECTION_Task, "DIRECTION", 200, NULL, tskIDLE_PRIORITY, &DIRECTION_Handle);
 80063da:	2300      	movs	r3, #0
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	4b56      	ldr	r3, [pc, #344]	; (8006538 <main+0x250>)
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	4856      	ldr	r0, [pc, #344]	; (800653c <main+0x254>)
 80063e4:	4956      	ldr	r1, [pc, #344]	; (8006540 <main+0x258>)
 80063e6:	22c8      	movs	r2, #200	; 0xc8
 80063e8:	2300      	movs	r3, #0
 80063ea:	f7fd fdbb 	bl	8003f64 <xTaskCreate>
	xTaskCreate(CLAMP_Task, "CLAMP", 200, NULL, tskIDLE_PRIORITY, &CLAMP_Handle);
 80063ee:	2300      	movs	r3, #0
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	4b54      	ldr	r3, [pc, #336]	; (8006544 <main+0x25c>)
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	4854      	ldr	r0, [pc, #336]	; (8006548 <main+0x260>)
 80063f8:	4954      	ldr	r1, [pc, #336]	; (800654c <main+0x264>)
 80063fa:	22c8      	movs	r2, #200	; 0xc8
 80063fc:	2300      	movs	r3, #0
 80063fe:	f7fd fdb1 	bl	8003f64 <xTaskCreate>


	FORWARD_interruptSemaphore = xSemaphoreCreateBinary();
 8006402:	2001      	movs	r0, #1
 8006404:	2100      	movs	r1, #0
 8006406:	2203      	movs	r2, #3
 8006408:	f7fc ff10 	bl	800322c <xQueueGenericCreate>
 800640c:	4602      	mov	r2, r0
 800640e:	4b50      	ldr	r3, [pc, #320]	; (8006550 <main+0x268>)
 8006410:	601a      	str	r2, [r3, #0]
	BACKWARD_interruptSemaphore = xSemaphoreCreateBinary();
 8006412:	2001      	movs	r0, #1
 8006414:	2100      	movs	r1, #0
 8006416:	2203      	movs	r2, #3
 8006418:	f7fc ff08 	bl	800322c <xQueueGenericCreate>
 800641c:	4602      	mov	r2, r0
 800641e:	4b4d      	ldr	r3, [pc, #308]	; (8006554 <main+0x26c>)
 8006420:	601a      	str	r2, [r3, #0]
	LEFT_interruptSemaphore = xSemaphoreCreateBinary();
 8006422:	2001      	movs	r0, #1
 8006424:	2100      	movs	r1, #0
 8006426:	2203      	movs	r2, #3
 8006428:	f7fc ff00 	bl	800322c <xQueueGenericCreate>
 800642c:	4602      	mov	r2, r0
 800642e:	4b4a      	ldr	r3, [pc, #296]	; (8006558 <main+0x270>)
 8006430:	601a      	str	r2, [r3, #0]
	RIGHT_interruptSemaphore = xSemaphoreCreateBinary();
 8006432:	2001      	movs	r0, #1
 8006434:	2100      	movs	r1, #0
 8006436:	2203      	movs	r2, #3
 8006438:	f7fc fef8 	bl	800322c <xQueueGenericCreate>
 800643c:	4602      	mov	r2, r0
 800643e:	4b47      	ldr	r3, [pc, #284]	; (800655c <main+0x274>)
 8006440:	601a      	str	r2, [r3, #0]

	UP_interruptSemaphore = xSemaphoreCreateBinary();
 8006442:	2001      	movs	r0, #1
 8006444:	2100      	movs	r1, #0
 8006446:	2203      	movs	r2, #3
 8006448:	f7fc fef0 	bl	800322c <xQueueGenericCreate>
 800644c:	4602      	mov	r2, r0
 800644e:	4b44      	ldr	r3, [pc, #272]	; (8006560 <main+0x278>)
 8006450:	601a      	str	r2, [r3, #0]
	DOWN_interruptSemaphore = xSemaphoreCreateBinary();
 8006452:	2001      	movs	r0, #1
 8006454:	2100      	movs	r1, #0
 8006456:	2203      	movs	r2, #3
 8006458:	f7fc fee8 	bl	800322c <xQueueGenericCreate>
 800645c:	4602      	mov	r2, r0
 800645e:	4b41      	ldr	r3, [pc, #260]	; (8006564 <main+0x27c>)
 8006460:	601a      	str	r2, [r3, #0]
	OPEN_interruptSemaphore = xSemaphoreCreateBinary();
 8006462:	2001      	movs	r0, #1
 8006464:	2100      	movs	r1, #0
 8006466:	2203      	movs	r2, #3
 8006468:	f7fc fee0 	bl	800322c <xQueueGenericCreate>
 800646c:	4602      	mov	r2, r0
 800646e:	4b3e      	ldr	r3, [pc, #248]	; (8006568 <main+0x280>)
 8006470:	601a      	str	r2, [r3, #0]
	CLOSE_interruptSemaphore = xSemaphoreCreateBinary();
 8006472:	2001      	movs	r0, #1
 8006474:	2100      	movs	r1, #0
 8006476:	2203      	movs	r2, #3
 8006478:	f7fc fed8 	bl	800322c <xQueueGenericCreate>
 800647c:	4602      	mov	r2, r0
 800647e:	4b3b      	ldr	r3, [pc, #236]	; (800656c <main+0x284>)
 8006480:	601a      	str	r2, [r3, #0]

	ROTATE_interruptSemaphore = xSemaphoreCreateBinary();
 8006482:	2001      	movs	r0, #1
 8006484:	2100      	movs	r1, #0
 8006486:	2203      	movs	r2, #3
 8006488:	f7fc fed0 	bl	800322c <xQueueGenericCreate>
 800648c:	4602      	mov	r2, r0
 800648e:	4b38      	ldr	r3, [pc, #224]	; (8006570 <main+0x288>)
 8006490:	601a      	str	r2, [r3, #0]
	DIRECTION_interruptSemaphore = xSemaphoreCreateBinary();
 8006492:	2001      	movs	r0, #1
 8006494:	2100      	movs	r1, #0
 8006496:	2203      	movs	r2, #3
 8006498:	f7fc fec8 	bl	800322c <xQueueGenericCreate>
 800649c:	4602      	mov	r2, r0
 800649e:	4b35      	ldr	r3, [pc, #212]	; (8006574 <main+0x28c>)
 80064a0:	601a      	str	r2, [r3, #0]
	CLAMP_interruptSemaphore = xSemaphoreCreateBinary();
 80064a2:	2001      	movs	r0, #1
 80064a4:	2100      	movs	r1, #0
 80064a6:	2203      	movs	r2, #3
 80064a8:	f7fc fec0 	bl	800322c <xQueueGenericCreate>
 80064ac:	4602      	mov	r2, r0
 80064ae:	4b32      	ldr	r3, [pc, #200]	; (8006578 <main+0x290>)
 80064b0:	601a      	str	r2, [r3, #0]

	vTaskStartScheduler();
 80064b2:	f7fd fedd 	bl	8004270 <vTaskStartScheduler>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {

  }
 80064b6:	e7fe      	b.n	80064b6 <main+0x1ce>
 80064b8:	1ffe8884 	.word	0x1ffe8884
 80064bc:	1ffe88b8 	.word	0x1ffe88b8
 80064c0:	1ffe8948 	.word	0x1ffe8948
 80064c4:	080069f0 	.word	0x080069f0
 80064c8:	08006a80 	.word	0x08006a80
 80064cc:	1ffe8b24 	.word	0x1ffe8b24
 80064d0:	08005ad5 	.word	0x08005ad5
 80064d4:	08006a8c 	.word	0x08006a8c
 80064d8:	1ffe8b28 	.word	0x1ffe8b28
 80064dc:	08005bc5 	.word	0x08005bc5
 80064e0:	08006a94 	.word	0x08006a94
 80064e4:	1ffe8b2c 	.word	0x1ffe8b2c
 80064e8:	08005cb5 	.word	0x08005cb5
 80064ec:	08006aa0 	.word	0x08006aa0
 80064f0:	1ffe8b30 	.word	0x1ffe8b30
 80064f4:	08005da5 	.word	0x08005da5
 80064f8:	08006aa8 	.word	0x08006aa8
 80064fc:	1ffe8b34 	.word	0x1ffe8b34
 8006500:	08005e95 	.word	0x08005e95
 8006504:	08006ab0 	.word	0x08006ab0
 8006508:	1ffe8b38 	.word	0x1ffe8b38
 800650c:	08005f21 	.word	0x08005f21
 8006510:	08006ab4 	.word	0x08006ab4
 8006514:	1ffe8b3c 	.word	0x1ffe8b3c
 8006518:	08005fad 	.word	0x08005fad
 800651c:	08006abc 	.word	0x08006abc
 8006520:	1ffe8b40 	.word	0x1ffe8b40
 8006524:	08006009 	.word	0x08006009
 8006528:	08006ac4 	.word	0x08006ac4
 800652c:	1ffe8b44 	.word	0x1ffe8b44
 8006530:	08006069 	.word	0x08006069
 8006534:	08006acc 	.word	0x08006acc
 8006538:	1ffe8b48 	.word	0x1ffe8b48
 800653c:	080061a1 	.word	0x080061a1
 8006540:	08006ad4 	.word	0x08006ad4
 8006544:	1ffe8b4c 	.word	0x1ffe8b4c
 8006548:	08006245 	.word	0x08006245
 800654c:	08006ae0 	.word	0x08006ae0
 8006550:	1ffe8bc8 	.word	0x1ffe8bc8
 8006554:	1ffe8b98 	.word	0x1ffe8b98
 8006558:	1ffe8ba4 	.word	0x1ffe8ba4
 800655c:	1ffe8bb0 	.word	0x1ffe8bb0
 8006560:	1ffe8bc0 	.word	0x1ffe8bc0
 8006564:	1ffe8b9c 	.word	0x1ffe8b9c
 8006568:	1ffe8bac 	.word	0x1ffe8bac
 800656c:	1ffe8bcc 	.word	0x1ffe8bcc
 8006570:	1ffe8ba0 	.word	0x1ffe8ba0
 8006574:	1ffe8bb4 	.word	0x1ffe8bb4
 8006578:	1ffe8bc4 	.word	0x1ffe8bc4

0800657c <ERU0_2_IRQHandler>:
}

void ROTATE_IRQHandler(void){
 800657c:	b580      	push	{r7, lr}
 800657e:	af00      	add	r7, sp, #0

	xSemaphoreGiveFromISR(ROTATE_interruptSemaphore, NULL);
 8006580:	4b03      	ldr	r3, [pc, #12]	; (8006590 <ERU0_2_IRQHandler+0x14>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	2100      	movs	r1, #0
 8006588:	f7fd f876 	bl	8003678 <xQueueGiveFromISR>
}
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	1ffe8ba0 	.word	0x1ffe8ba0

08006594 <ERU0_3_IRQHandler>:

void DIRECTION_IRQHandler(void){
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0

	xSemaphoreGiveFromISR(DIRECTION_interruptSemaphore, NULL);
 8006598:	4b03      	ldr	r3, [pc, #12]	; (80065a8 <ERU0_3_IRQHandler+0x14>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4618      	mov	r0, r3
 800659e:	2100      	movs	r1, #0
 80065a0:	f7fd f86a 	bl	8003678 <xQueueGiveFromISR>
}
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	1ffe8bb4 	.word	0x1ffe8bb4

080065ac <ERU1_0_IRQHandler>:

void CLAMP_IRQHandler(void){
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0

	xSemaphoreGiveFromISR(CLAMP_interruptSemaphore, NULL);
 80065b0:	4b03      	ldr	r3, [pc, #12]	; (80065c0 <ERU1_0_IRQHandler+0x14>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4618      	mov	r0, r3
 80065b6:	2100      	movs	r1, #0
 80065b8:	f7fd f85e 	bl	8003678 <xQueueGiveFromISR>
}
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	1ffe8bc4 	.word	0x1ffe8bc4

080065c4 <tle94112el_enable>:

static void tle94112el_enable(void)

{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0

  DIGITAL_IO_SetOutputHigh(&TLE94112_ENABLE);
 80065c8:	4801      	ldr	r0, [pc, #4]	; (80065d0 <tle94112el_enable+0xc>)
 80065ca:	f7ff fa51 	bl	8005a70 <DIGITAL_IO_SetOutputHigh>

}
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	080069c8 	.word	0x080069c8

080065d4 <tle94112el_disable>:

static void tle94112el_disable(void)

{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0

  DIGITAL_IO_SetOutputLow(&TLE94112_ENABLE);
 80065d8:	4801      	ldr	r0, [pc, #4]	; (80065e0 <tle94112el_disable+0xc>)
 80065da:	f7ff fa59 	bl	8005a90 <DIGITAL_IO_SetOutputLow>

}
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	080069c8 	.word	0x080069c8

080065e4 <tle94112el_spi_transfer>:

static int32_t tle94112el_spi_transfer(uint8_t *tx_data, uint8_t *rx_data)

{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]

  XMC_SPI_CH_SetBitOrderLsbFirst(SPI_MASTER_0.channel);
 80065ee:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <tle94112el_spi_transfer+0x44>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff fa2c 	bl	8005a50 <XMC_SPI_CH_SetBitOrderLsbFirst>



  DIGITAL_IO_SetOutputLow(&TLE94112_CS);
 80065f8:	480c      	ldr	r0, [pc, #48]	; (800662c <tle94112el_spi_transfer+0x48>)
 80065fa:	f7ff fa49 	bl	8005a90 <DIGITAL_IO_SetOutputLow>



  SPI_MASTER_Transfer(&SPI_MASTER_0, tx_data, rx_data, 2);
 80065fe:	480a      	ldr	r0, [pc, #40]	; (8006628 <tle94112el_spi_transfer+0x44>)
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	2302      	movs	r3, #2
 8006606:	f7fb fad3 	bl	8001bb0 <SPI_MASTER_Transfer>

  while(SPI_MASTER_0.runtime->rx_busy);
 800660a:	bf00      	nop
 800660c:	4b06      	ldr	r3, [pc, #24]	; (8006628 <tle94112el_spi_transfer+0x44>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	7fdb      	ldrb	r3, [r3, #31]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1f9      	bne.n	800660c <tle94112el_spi_transfer+0x28>



  DIGITAL_IO_SetOutputHigh(&TLE94112_CS);
 8006618:	4804      	ldr	r0, [pc, #16]	; (800662c <tle94112el_spi_transfer+0x48>)
 800661a:	f7ff fa29 	bl	8005a70 <DIGITAL_IO_SetOutputHigh>

  return 0;
 800661e:	2300      	movs	r3, #0

}
 8006620:	4618      	mov	r0, r3
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	1ffe8844 	.word	0x1ffe8844
 800662c:	080069dc 	.word	0x080069dc

08006630 <__errno>:
 8006630:	4b01      	ldr	r3, [pc, #4]	; (8006638 <__errno+0x8>)
 8006632:	6818      	ldr	r0, [r3, #0]
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	1ffe89bc 	.word	0x1ffe89bc

0800663c <__libc_init_array>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	4b0e      	ldr	r3, [pc, #56]	; (8006678 <__libc_init_array+0x3c>)
 8006640:	4c0e      	ldr	r4, [pc, #56]	; (800667c <__libc_init_array+0x40>)
 8006642:	1ae4      	subs	r4, r4, r3
 8006644:	10a4      	asrs	r4, r4, #2
 8006646:	2500      	movs	r5, #0
 8006648:	461e      	mov	r6, r3
 800664a:	42a5      	cmp	r5, r4
 800664c:	d004      	beq.n	8006658 <__libc_init_array+0x1c>
 800664e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006652:	4798      	blx	r3
 8006654:	3501      	adds	r5, #1
 8006656:	e7f8      	b.n	800664a <__libc_init_array+0xe>
 8006658:	f7fb f8d6 	bl	8001808 <_init>
 800665c:	4c08      	ldr	r4, [pc, #32]	; (8006680 <__libc_init_array+0x44>)
 800665e:	4b09      	ldr	r3, [pc, #36]	; (8006684 <__libc_init_array+0x48>)
 8006660:	1ae4      	subs	r4, r4, r3
 8006662:	10a4      	asrs	r4, r4, #2
 8006664:	2500      	movs	r5, #0
 8006666:	461e      	mov	r6, r3
 8006668:	42a5      	cmp	r5, r4
 800666a:	d004      	beq.n	8006676 <__libc_init_array+0x3a>
 800666c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006670:	4798      	blx	r3
 8006672:	3501      	adds	r5, #1
 8006674:	e7f8      	b.n	8006668 <__libc_init_array+0x2c>
 8006676:	bd70      	pop	{r4, r5, r6, pc}
 8006678:	1ffe89c0 	.word	0x1ffe89c0
 800667c:	1ffe89c0 	.word	0x1ffe89c0
 8006680:	1ffe89c0 	.word	0x1ffe89c0
 8006684:	1ffe89c0 	.word	0x1ffe89c0

08006688 <malloc>:
 8006688:	4b02      	ldr	r3, [pc, #8]	; (8006694 <malloc+0xc>)
 800668a:	4601      	mov	r1, r0
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	f000 b863 	b.w	8006758 <_malloc_r>
 8006692:	bf00      	nop
 8006694:	1ffe89bc 	.word	0x1ffe89bc

08006698 <free>:
 8006698:	4b02      	ldr	r3, [pc, #8]	; (80066a4 <free+0xc>)
 800669a:	4601      	mov	r1, r0
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	f000 b817 	b.w	80066d0 <_free_r>
 80066a2:	bf00      	nop
 80066a4:	1ffe89bc 	.word	0x1ffe89bc

080066a8 <memcpy>:
 80066a8:	b510      	push	{r4, lr}
 80066aa:	1e43      	subs	r3, r0, #1
 80066ac:	440a      	add	r2, r1
 80066ae:	4291      	cmp	r1, r2
 80066b0:	d004      	beq.n	80066bc <memcpy+0x14>
 80066b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066ba:	e7f8      	b.n	80066ae <memcpy+0x6>
 80066bc:	bd10      	pop	{r4, pc}

080066be <memset>:
 80066be:	4402      	add	r2, r0
 80066c0:	4603      	mov	r3, r0
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d002      	beq.n	80066cc <memset+0xe>
 80066c6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ca:	e7fa      	b.n	80066c2 <memset+0x4>
 80066cc:	4770      	bx	lr
	...

080066d0 <_free_r>:
 80066d0:	b530      	push	{r4, r5, lr}
 80066d2:	2900      	cmp	r1, #0
 80066d4:	d03d      	beq.n	8006752 <_free_r+0x82>
 80066d6:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80066da:	1f0b      	subs	r3, r1, #4
 80066dc:	491d      	ldr	r1, [pc, #116]	; (8006754 <_free_r+0x84>)
 80066de:	2a00      	cmp	r2, #0
 80066e0:	bfb8      	it	lt
 80066e2:	189b      	addlt	r3, r3, r2
 80066e4:	680a      	ldr	r2, [r1, #0]
 80066e6:	460c      	mov	r4, r1
 80066e8:	b912      	cbnz	r2, 80066f0 <_free_r+0x20>
 80066ea:	605a      	str	r2, [r3, #4]
 80066ec:	600b      	str	r3, [r1, #0]
 80066ee:	bd30      	pop	{r4, r5, pc}
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d20d      	bcs.n	8006710 <_free_r+0x40>
 80066f4:	6819      	ldr	r1, [r3, #0]
 80066f6:	1858      	adds	r0, r3, r1
 80066f8:	4290      	cmp	r0, r2
 80066fa:	bf01      	itttt	eq
 80066fc:	585a      	ldreq	r2, [r3, r1]
 80066fe:	1852      	addeq	r2, r2, r1
 8006700:	601a      	streq	r2, [r3, #0]
 8006702:	6842      	ldreq	r2, [r0, #4]
 8006704:	605a      	str	r2, [r3, #4]
 8006706:	6023      	str	r3, [r4, #0]
 8006708:	bd30      	pop	{r4, r5, pc}
 800670a:	4299      	cmp	r1, r3
 800670c:	d803      	bhi.n	8006716 <_free_r+0x46>
 800670e:	460a      	mov	r2, r1
 8006710:	6851      	ldr	r1, [r2, #4]
 8006712:	2900      	cmp	r1, #0
 8006714:	d1f9      	bne.n	800670a <_free_r+0x3a>
 8006716:	6814      	ldr	r4, [r2, #0]
 8006718:	1915      	adds	r5, r2, r4
 800671a:	429d      	cmp	r5, r3
 800671c:	d10a      	bne.n	8006734 <_free_r+0x64>
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4423      	add	r3, r4
 8006722:	18d0      	adds	r0, r2, r3
 8006724:	4288      	cmp	r0, r1
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	d113      	bne.n	8006752 <_free_r+0x82>
 800672a:	6808      	ldr	r0, [r1, #0]
 800672c:	4403      	add	r3, r0
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	684b      	ldr	r3, [r1, #4]
 8006732:	e00d      	b.n	8006750 <_free_r+0x80>
 8006734:	d902      	bls.n	800673c <_free_r+0x6c>
 8006736:	230c      	movs	r3, #12
 8006738:	6003      	str	r3, [r0, #0]
 800673a:	bd30      	pop	{r4, r5, pc}
 800673c:	681c      	ldr	r4, [r3, #0]
 800673e:	1918      	adds	r0, r3, r4
 8006740:	4288      	cmp	r0, r1
 8006742:	bf04      	itt	eq
 8006744:	6808      	ldreq	r0, [r1, #0]
 8006746:	6849      	ldreq	r1, [r1, #4]
 8006748:	6059      	str	r1, [r3, #4]
 800674a:	bf04      	itt	eq
 800674c:	1900      	addeq	r0, r0, r4
 800674e:	6018      	streq	r0, [r3, #0]
 8006750:	6053      	str	r3, [r2, #4]
 8006752:	bd30      	pop	{r4, r5, pc}
 8006754:	1ffe8b54 	.word	0x1ffe8b54

08006758 <_malloc_r>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	1ccc      	adds	r4, r1, #3
 800675c:	f024 0403 	bic.w	r4, r4, #3
 8006760:	3408      	adds	r4, #8
 8006762:	2c0c      	cmp	r4, #12
 8006764:	bf38      	it	cc
 8006766:	240c      	movcc	r4, #12
 8006768:	2c00      	cmp	r4, #0
 800676a:	4606      	mov	r6, r0
 800676c:	da03      	bge.n	8006776 <_malloc_r+0x1e>
 800676e:	230c      	movs	r3, #12
 8006770:	6033      	str	r3, [r6, #0]
 8006772:	2000      	movs	r0, #0
 8006774:	bd70      	pop	{r4, r5, r6, pc}
 8006776:	428c      	cmp	r4, r1
 8006778:	d3f9      	bcc.n	800676e <_malloc_r+0x16>
 800677a:	4a20      	ldr	r2, [pc, #128]	; (80067fc <_malloc_r+0xa4>)
 800677c:	6813      	ldr	r3, [r2, #0]
 800677e:	4610      	mov	r0, r2
 8006780:	4619      	mov	r1, r3
 8006782:	b1a1      	cbz	r1, 80067ae <_malloc_r+0x56>
 8006784:	680a      	ldr	r2, [r1, #0]
 8006786:	1b12      	subs	r2, r2, r4
 8006788:	d40e      	bmi.n	80067a8 <_malloc_r+0x50>
 800678a:	2a0b      	cmp	r2, #11
 800678c:	d903      	bls.n	8006796 <_malloc_r+0x3e>
 800678e:	600a      	str	r2, [r1, #0]
 8006790:	188b      	adds	r3, r1, r2
 8006792:	508c      	str	r4, [r1, r2]
 8006794:	e01f      	b.n	80067d6 <_malloc_r+0x7e>
 8006796:	428b      	cmp	r3, r1
 8006798:	bf0d      	iteet	eq
 800679a:	685a      	ldreq	r2, [r3, #4]
 800679c:	684a      	ldrne	r2, [r1, #4]
 800679e:	605a      	strne	r2, [r3, #4]
 80067a0:	6002      	streq	r2, [r0, #0]
 80067a2:	bf18      	it	ne
 80067a4:	460b      	movne	r3, r1
 80067a6:	e016      	b.n	80067d6 <_malloc_r+0x7e>
 80067a8:	460b      	mov	r3, r1
 80067aa:	6849      	ldr	r1, [r1, #4]
 80067ac:	e7e9      	b.n	8006782 <_malloc_r+0x2a>
 80067ae:	4d14      	ldr	r5, [pc, #80]	; (8006800 <_malloc_r+0xa8>)
 80067b0:	682b      	ldr	r3, [r5, #0]
 80067b2:	b91b      	cbnz	r3, 80067bc <_malloc_r+0x64>
 80067b4:	4630      	mov	r0, r6
 80067b6:	f000 f825 	bl	8006804 <_sbrk_r>
 80067ba:	6028      	str	r0, [r5, #0]
 80067bc:	4630      	mov	r0, r6
 80067be:	4621      	mov	r1, r4
 80067c0:	f000 f820 	bl	8006804 <_sbrk_r>
 80067c4:	1c42      	adds	r2, r0, #1
 80067c6:	4603      	mov	r3, r0
 80067c8:	d0d1      	beq.n	800676e <_malloc_r+0x16>
 80067ca:	1cc5      	adds	r5, r0, #3
 80067cc:	f025 0503 	bic.w	r5, r5, #3
 80067d0:	4285      	cmp	r5, r0
 80067d2:	d10a      	bne.n	80067ea <_malloc_r+0x92>
 80067d4:	601c      	str	r4, [r3, #0]
 80067d6:	f103 000b 	add.w	r0, r3, #11
 80067da:	1d1a      	adds	r2, r3, #4
 80067dc:	f020 0007 	bic.w	r0, r0, #7
 80067e0:	1a82      	subs	r2, r0, r2
 80067e2:	d00a      	beq.n	80067fa <_malloc_r+0xa2>
 80067e4:	4251      	negs	r1, r2
 80067e6:	5099      	str	r1, [r3, r2]
 80067e8:	bd70      	pop	{r4, r5, r6, pc}
 80067ea:	4630      	mov	r0, r6
 80067ec:	1ae9      	subs	r1, r5, r3
 80067ee:	f000 f809 	bl	8006804 <_sbrk_r>
 80067f2:	3001      	adds	r0, #1
 80067f4:	d0bb      	beq.n	800676e <_malloc_r+0x16>
 80067f6:	462b      	mov	r3, r5
 80067f8:	e7ec      	b.n	80067d4 <_malloc_r+0x7c>
 80067fa:	bd70      	pop	{r4, r5, r6, pc}
 80067fc:	1ffe8b54 	.word	0x1ffe8b54
 8006800:	1ffe8b50 	.word	0x1ffe8b50

08006804 <_sbrk_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4c06      	ldr	r4, [pc, #24]	; (8006820 <_sbrk_r+0x1c>)
 8006808:	2300      	movs	r3, #0
 800680a:	4605      	mov	r5, r0
 800680c:	4608      	mov	r0, r1
 800680e:	6023      	str	r3, [r4, #0]
 8006810:	f7fa ffc6 	bl	80017a0 <_sbrk>
 8006814:	1c43      	adds	r3, r0, #1
 8006816:	d102      	bne.n	800681e <_sbrk_r+0x1a>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	b103      	cbz	r3, 800681e <_sbrk_r+0x1a>
 800681c:	602b      	str	r3, [r5, #0]
 800681e:	bd38      	pop	{r3, r4, r5, pc}
 8006820:	1ffe8bd0 	.word	0x1ffe8bd0

08006824 <SPI_MASTER_0_MOSI>:
 8006824:	48028300 00000008                       ...H....

0800682c <SPI_MASTER_0_MISO>:
 800682c:	48028300 00000007                       ...H....

08006834 <SPI_MASTER_0_SCLKOUT>:
 8006834:	48028300 00000009                       ...H....

0800683c <SPI_MASTER_0_SCLKOUT_Config>:
 800683c:	00000088 00000001 00000001 00000000     ................
 800684c:	00000000                                ....

08006850 <SPI_MASTER_0_SS_0>:
 8006850:	48028500 00000006                       ...H....

08006858 <SPI_MASTER_0_SS_0_Config>:
 8006858:	00000088 00000001 00000001 00000000     ................
 8006868:	00080000                                ....

0800686c <SPI_MASTER_0_Config>:
 800686c:	1ffe8814 08002499 08006824 1ffe8800     .....$..$h......
 800687c:	0800682c 1ffe89c4 00000000 00000000     ,h..............
	...
 8006894:	08006834 0800683c 08006850 00000000     4h..<h..Ph......
	...
 80068bc:	08006858 00000000 00000000 00000000     Xh..............
	...
 80068e8:	00000404 00000000 01000000 00020302     ................

080068f8 <PWM_CLAMP_compare_config>:
 80068f8:	00000000 00000006                       ........

08006900 <PWM_CLAMP_gpio_out_config>:
 8006900:	00000098 00010000 00000003              ............

0800690c <PWM_LIFT_compare_config>:
 800690c:	00000000 00000006                       ........

08006914 <PWM_LIFT_gpio_out_config>:
 8006914:	00000098 00010000 00000003              ............

08006920 <PWM_ROTATE_compare_config>:
 8006920:	00000000 00000006                       ........

08006928 <PWM_ROTATE_gpio_out_config>:
 8006928:	00000098 00010000 00000003              ............

08006934 <ROTATE_INTERRUPT>:
 8006934:	50004800 48028000 00000018 00000000     .H.P...H........
 8006944:	00000000 00000002 0000002d 03003f03     ........-....?..
 8006954:	00010b02                                ....

08006958 <DIRECTION_INTERRUPT>:
 8006958:	50004800 48028000 00000018 00000000     .H.P...H........
 8006968:	00000000 0000000c 0000013d 02003f04     ........=....?..
 8006978:	00010403                                ....

0800697c <CLAMP_INTERRUPT>:
 800697c:	40044000 48028000 00000018 00000000     .@.@...H........
	...
 8006994:	0000000d 03003f05 00010500 454c4449     .....?......IDLE
 80069a4:	00000000 09632509 25097525 75250975     .....%c.%u.%u.%u
 80069b4:	00000a0d 20726d54 00637653 51726d54     ....Tmr Svc.TmrQ
 80069c4:	00000000                                ....

080069c8 <TLE94112_ENABLE>:
 80069c8:	48028100 00000080 00000001 00000000     ...H............
 80069d8:	0000000a                                ....

080069dc <TLE94112_CS>:
 80069dc:	48028300 00000080 00000001 00000000     ...H............
 80069ec:	0000000a                                ....

080069f0 <DIGITAL_IO_0>:
 80069f0:	48028300 00000080 00010000 00000000     ...H............
 8006a00:	00000004                                ....

08006a04 <MOTOR_HIGH>:
 8006a04:	48028000 00000080 00010000 00000000     ...H............
 8006a14:	0000000c                                ....

08006a18 <MOTOR_LOW>:
 8006a18:	48028300 00000080 00010000 00000000     ...H............
 8006a28:	0000000c 01010230 00010000 00000000     ....0...........
 8006a38:	00010000 01010102                       ........

08006a40 <DIRECTION_BUS_IO_pin_list>:
 8006a40:	48028300 00000000 48028000 00000009     ...H.......H....

08006a50 <CLAMP_BUS_IO_pin_list>:
 8006a50:	48028000 00000000 48028000 00000002     ...H.......H....

08006a60 <LED_BUS_IO_pin_list>:
 8006a60:	48028600 00000001 48028100 00000002     ...H.......H....
 8006a70:	48028000 00000007 48028300 0000000e     ...H.......H....

08006a80 <TLE94112EL_0>:
 8006a80:	080065c5 080065d5 080065e5 57524f46     .e...e...e..FORW
 8006a90:	00445241 4b434142 44524157 00000000     ARD.BACKWARD....
 8006aa0:	5446454c 00000000 48474952 00000054     LEFT....RIGHT...
 8006ab0:	00005055 4e574f44 00000000 4e45504f     UP..DOWN....OPEN
 8006ac0:	00000000 534f4c43 00000045 41544f52     ....CLOSE...ROTA
 8006ad0:	00004554 45524944 4f495443 0000004e     TE..DIRECTION...
 8006ae0:	4d414c43 00000050 00000043              CLAMP...C...
